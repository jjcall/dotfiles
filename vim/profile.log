SCRIPT  /Users/jjcall/.vimrc
Sourced 7 times
Total time:   1.653434
 Self time:   0.002585

count  total (s)   self (s)
                            "------------------------------------------
                            " By: Jason Calleiro
                            " Title: It's a Vim Config!
                            " Version: 3.0
                            "------------------------------------------
                            " Load up the plugins
    7              0.000307 source ~/.vim/vundle.vim
                            
                            " System (Mac - MacVim) Configs
    7              0.000271 source ~/.vim/platforms.vim
                            
                            " Vim configs
    7              0.000258 source ~/.vim/config.vim
                            
                            " Bindings
    7              0.000325 source ~/.vim/bindings.vim
                            
                            " Plugin configs
    7              0.000298 source ~/.vim/plugin_configs.vim
                            
                            " Custom functions
    7              0.000292 source ~/.vim/functions.vim
                            
                            " AutoCmd Stuff
    7              0.000250 source ~/.vim/autocmds.vim
                            
                            

SCRIPT  /Users/jjcall/Src/dotfiles/vim/vundle.vim
Sourced 7 times
Total time:   0.864133
 Self time:   0.066241

count  total (s)   self (s)
                            set nocompatible              " be iMproved, required
    7              0.002318 filetype off                  " required
                            
                            " set the runtime path to include Vundle and initialize
    7              0.000058 set rtp+=~/.vim/bundle/Vundle.vim
    7   0.005631   0.000054 call vundle#begin()
                            
                            " alternatively, pass a path where Vundle should install plugins
                            " call vundle#begin('~/some/path/here')
                            "
                            " let Vundle manage Vundle, required
    7              0.002001 Plugin 'gmarik/Vundle.vim'
                            
                            "------------------------------------------
                            " Plugins
                            "------------------------------------------
                            " UI
    7              0.001827 Plugin 'nanotech/jellybeans.vim'
    7              0.001879 Plugin 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
    7              0.001370 Plugin 'scrooloose/nerdtree'
    7              0.001410 Plugin 'bling/vim-airline'
    7              0.001372 Plugin 'paranoida/vim-airlineish'
                            
                            " Navigation
    7              0.001340 Plugin 'kien/ctrlp.vim'
    7              0.001334 Plugin 'ctags.vim'
                            
                            " Commands
    7              0.001415 Plugin 'scrooloose/nerdcommenter'
    7              0.001291 Plugin 'tpope/vim-surround'
    7              0.001238 Plugin 'tpope/vim-fugitive'
    7              0.001175 Plugin 'mileszs/ack.vim'
    7              0.001168 Plugin 'danro/rename.vim'
                            
                            " Helpers
    7              0.001300 Plugin 'Valloric/YouCompleteMe'
    7              0.001184 Plugin 'SirVer/ultisnips'
    7              0.001241 Plugin 'honza/vim-snippets'
    7              0.001289 Plugin 'Raimondi/delimitMate'
    7              0.001274 Plugin 'scrooloose/syntastic'
    7              0.001158 Plugin 'matchit.zip'
    7              0.001304 Plugin 'christoomey/vim-tmux-navigator'
    7              0.001217 Plugin 'wellle/tmux-complete.vim'
    7              0.001185 Plugin 'ervandew/supertab'
    7              0.001169 Plugin 'mattn/emmet-vim'
                            
                            " Ruby
    7              0.001180 Plugin 'vim-ruby/vim-ruby'
    7              0.001238 Plugin 'tpope/vim-haml'
    7              0.001193 Plugin 'tpope/vim-rails'
    7              0.001155 Plugin 'tpope/vim-endwise'
    7              0.001159 Plugin 'thoughtbot/vim-rspec'
                            
                            " Javascript
    7              0.001155 Plugin 'pangloss/vim-javascript'
    7              0.001159 Plugin 'kchmck/vim-coffee-script'
    7              0.001139 Plugin 'leshill/vim-json'
    7              0.001178 Plugin 'mustache/vim-mustache-handlebars'
    7              0.001232 Plugin '1995eaton/vim-better-javascript-completion'
                            
                            " HTML
    7              0.001130 Plugin 'othree/html5.vim'
    7              0.001132 Plugin 'indenthtml.vim'
                            
                            " Misc
    7              0.001147 Plugin 'mutewinter/vim-css3-syntax'
    7              0.001234 Plugin 'hallison/vim-markdown'
    7              0.001127 Plugin 'groenewege/vim-less'
    7              0.001195 Plugin '1995eaton/vim-better-css-completion'
                            
                            
                            
                            " All of your Plugins must be added before the following line
    7   0.004513   0.000031 call vundle#end()            " required
    7              0.002266 filetype plugin indent on    " required

SCRIPT  /usr/local/Cellar/vim/7.4.335/share/vim/vim74/ftoff.vim
Sourced 7 times
Total time:   0.003259
 Self time:   0.003259

count  total (s)   self (s)
                            " Vim support file to switch off detection of file types
                            "
                            " Maintainer:	Bram Moolenaar <Bram@vim.org>
                            " Last change:	2001 Jun 11
                            
    7              0.000057 if exists("did_load_filetypes")
    7              0.000024   unlet did_load_filetypes
    7              0.000010 endif
                            
                            " Remove all autocommands in the filetypedetect group
    7              0.003111 silent! au! filetypedetect *

SCRIPT  /usr/local/Cellar/vim/7.4.335/share/vim/vim74/filetype.vim
Sourced 7 times
Total time:   0.783435
 Self time:   0.728262

count  total (s)   self (s)
                            " Vim support file to detect file types
                            "
                            " Maintainer:	Bram Moolenaar <Bram@vim.org>
                            " Last Change:	2014 Jun 12
                            
                            " Listen very carefully, I will say this only once
    7              0.000032 if exists("did_load_filetypes")
                              finish
                            endif
    7              0.000019 let did_load_filetypes = 1
                            
                            " Line continuation is used here, remove 'C' from 'cpoptions'
    7              0.000035 let s:cpo_save = &cpo
    7              0.000035 set cpo&vim
                            
    7              0.000013 augroup filetypedetect
                            
                            " Ignored extensions
    7              0.000022 if exists("*fnameescape")
    7              0.005182 au BufNewFile,BufRead ?\+.orig,?\+.bak,?\+.old,?\+.new,?\+.dpkg-dist,?\+.dpkg-old,?\+.dpkg-new,?\+.dpkg-bak,?\+.rpmsave,?\+.rpmnew
                            	\ exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r"))
    7              0.000547 au BufNewFile,BufRead *~
                            	\ let s:name = expand("<afile>") |
                            	\ let s:short = substitute(s:name, '\~$', '', '') |
                            	\ if s:name != s:short && s:short != "" |
                            	\   exe "doau filetypedetect BufRead " . fnameescape(s:short) |
                            	\ endif |
                            	\ unlet! s:name s:short
    7              0.000569 au BufNewFile,BufRead ?\+.in
                            	\ if expand("<afile>:t") != "configure.in" |
                            	\   exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r")) |
                            	\ endif
    7              0.000013 elseif &verbose > 0
                              echomsg "Warning: some filetypes will not be recognized because this version of Vim does not have fnameescape()"
                            endif
                            
                            " Pattern used to match file names which should not be inspected.
                            " Currently finds compressed files.
    7              0.000026 if !exists("g:ft_ignore_pat")
                              let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'
                            endif
                            
                            " Function used for patterns that end in a star: don't set the filetype if the
                            " file name matches ft_ignore_pat.
    7              0.000026 func! s:StarSetf(ft)
                              if expand("<amatch>") !~ g:ft_ignore_pat
                                exe 'setf ' . a:ft
                              endif
                            endfunc
                            
                            " Abaqus or Trasys
    7              0.000529 au BufNewFile,BufRead *.inp			call s:Check_inp()
                            
    7              0.000015 func! s:Check_inp()
                              if getline(1) =~ '^\*'
                                setf abaqus
                              else
                                let n = 1
                                if line("$") > 500
                                  let nmax = 500
                                else
                                  let nmax = line("$")
                                endif
                                while n <= nmax
                                  if getline(n) =~? "^header surface data"
                            	setf trasys
                            	break
                                  endif
                                  let n = n + 1
                                endwhile
                              endif
                            endfunc
                            
                            " A-A-P recipe
    7              0.000530 au BufNewFile,BufRead *.aap			setf aap
                            
                            " A2ps printing utility
    7              0.002107 au BufNewFile,BufRead */etc/a2ps.cfg,*/etc/a2ps/*.cfg,a2psrc,.a2psrc setf a2ps
                            
                            " ABAB/4
    7              0.000621 au BufNewFile,BufRead *.abap			setf abap
                            
                            " ABC music notation
    7              0.000569 au BufNewFile,BufRead *.abc			setf abc
                            
                            " ABEL
    7              0.000640 au BufNewFile,BufRead *.abl			setf abel
                            
                            " AceDB
    7              0.000610 au BufNewFile,BufRead *.wrm			setf acedb
                            
                            " Ada (83, 9X, 95)
    7              0.001542 au BufNewFile,BufRead *.adb,*.ads,*.ada		setf ada
    7              0.000043 if has("vms")
                              au BufNewFile,BufRead *.gpr,*.ada_m,*.adc	setf ada
                            else
    7              0.000623   au BufNewFile,BufRead *.gpr			setf ada
    7              0.000008 endif
                            
                            " AHDL
    7              0.000515 au BufNewFile,BufRead *.tdf			setf ahdl
                            
                            " AMPL
    7              0.000499 au BufNewFile,BufRead *.run			setf ampl
                            
                            " Ant
    7              0.000523 au BufNewFile,BufRead build.xml			setf ant
                            
                            " Arduino
    7              0.000933 au BufNewFile,BufRead *.ino,*.pde		setf arduino
                            
                            " Apache style config file
    7              0.000534 au BufNewFile,BufRead proftpd.conf*		call s:StarSetf('apachestyle')
                            
                            " Apache config file
    7              0.000980 au BufNewFile,BufRead .htaccess,*/etc/httpd/*.conf		setf apache
                            
                            " XA65 MOS6510 cross assembler
    7              0.000516 au BufNewFile,BufRead *.a65			setf a65
                            
                            " Applescript
    7              0.000518 au BufNewFile,BufRead *.scpt			setf applescript
                            
                            " Applix ELF
    7              0.000528 au BufNewFile,BufRead *.am
                            	\ if expand("<afile>") !~? 'Makefile.am\>' | setf elf | endif
                            
                            " ALSA configuration
    7              0.001439 au BufNewFile,BufRead .asoundrc,*/usr/share/alsa/alsa.conf,*/etc/asound.conf setf alsaconf
                            
                            " Arc Macro Language
    7              0.000509 au BufNewFile,BufRead *.aml			setf aml
                            
                            " APT config file
    7              0.000524 au BufNewFile,BufRead apt.conf		       setf aptconf
    7              0.000533 au BufNewFile,BufRead */.aptitude/config       setf aptconf
    7              0.000603 au BufNewFile,BufRead */etc/apt/apt.conf.d/{[-_[:alnum:]]\+,[-_.[:alnum:]]\+.conf} setf aptconf
                            
                            " Arch Inventory file
    7              0.000985 au BufNewFile,BufRead .arch-inventory,=tagging-method	setf arch
                            
                            " ART*Enterprise (formerly ART-IM)
    7              0.000508 au BufNewFile,BufRead *.art			setf art
                            
                            " AsciiDoc
    7              0.000531 au BufNewFile,BufRead *.asciidoc		setf asciidoc
                            
                            " ASN.1
    7              0.000938 au BufNewFile,BufRead *.asn,*.asn1		setf asn
                            
                            " Active Server Pages (with Visual Basic Script)
    7              0.000526 au BufNewFile,BufRead *.asa
                            	\ if exists("g:filetype_asa") |
                            	\   exe "setf " . g:filetype_asa |
                            	\ else |
                            	\   setf aspvbs |
                            	\ endif
                            
                            " Active Server Pages (with Perl or Visual Basic Script)
    7              0.000574 au BufNewFile,BufRead *.asp
                            	\ if exists("g:filetype_asp") |
                            	\   exe "setf " . g:filetype_asp |
                            	\ elseif getline(1) . getline(2) . getline(3) =~? "perlscript" |
                            	\   setf aspperl |
                            	\ else |
                            	\   setf aspvbs |
                            	\ endif
                            
                            " Grub (must be before catch *.lst)
    7              0.001462 au BufNewFile,BufRead */boot/grub/menu.lst,*/boot/grub/grub.conf,*/etc/grub.conf setf grub
                            
                            " Assembly (all kinds)
                            " *.lst is not pure assembly, it has two extra columns (address, byte codes)
    7              0.002269 au BufNewFile,BufRead *.asm,*.[sS],*.[aA],*.mac,*.lst	call s:FTasm()
                            
                            " This function checks for the kind of assembly that is wanted by the user, or
                            " can be detected from the first five lines of the file.
    7              0.000026 func! s:FTasm()
                              " make sure b:asmsyntax exists
                              if !exists("b:asmsyntax")
                                let b:asmsyntax = ""
                              endif
                            
                              if b:asmsyntax == ""
                                call s:FTasmsyntax()
                              endif
                            
                              " if b:asmsyntax still isn't set, default to asmsyntax or GNU
                              if b:asmsyntax == ""
                                if exists("g:asmsyntax")
                                  let b:asmsyntax = g:asmsyntax
                                else
                                  let b:asmsyntax = "asm"
                                endif
                              endif
                            
                              exe "setf " . fnameescape(b:asmsyntax)
                            endfunc
                            
    7              0.000014 func! s:FTasmsyntax()
                              " see if file contains any asmsyntax=foo overrides. If so, change
                              " b:asmsyntax appropriately
                              let head = " ".getline(1)." ".getline(2)." ".getline(3)." ".getline(4).
                            	\" ".getline(5)." "
                              let match = matchstr(head, '\sasmsyntax=\zs[a-zA-Z0-9]\+\ze\s')
                              if match != ''
                                let b:asmsyntax = match
                              elseif ((head =~? '\.title') || (head =~? '\.ident') || (head =~? '\.macro') || (head =~? '\.subtitle') || (head =~? '\.library'))
                                let b:asmsyntax = "vmasm"
                              endif
                            endfunc
                            
                            " Macro (VAX)
    7              0.000545 au BufNewFile,BufRead *.mar			setf vmasm
                            
                            " Atlas
    7              0.000959 au BufNewFile,BufRead *.atl,*.as		setf atlas
                            
                            " Autoit v3
    7              0.000519 au BufNewFile,BufRead *.au3			setf autoit
                            
                            " Autohotkey
    7              0.000520 au BufNewFile,BufRead *.ahk			setf autohotkey
                            
                            " Automake
    7              0.001021 au BufNewFile,BufRead [mM]akefile.am,GNUmakefile.am	setf automake
                            
                            " Autotest .at files are actually m4
    7              0.000518 au BufNewFile,BufRead *.at			setf m4
                            
                            " Avenue
    7              0.000511 au BufNewFile,BufRead *.ave			setf ave
                            
                            " Awk
    7              0.000511 au BufNewFile,BufRead *.awk			setf awk
                            
                            " B
    7              0.001365 au BufNewFile,BufRead *.mch,*.ref,*.imp		setf b
                            
                            " BASIC or Visual Basic
    7              0.000511 au BufNewFile,BufRead *.bas			call s:FTVB("basic")
                            
                            " Check if one of the first five lines contains "VB_Name".  In that case it is
                            " probably a Visual Basic file.  Otherwise it's assumed to be "alt" filetype.
    7              0.000018 func! s:FTVB(alt)
                              if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'VB_Name\|Begin VB\.\(Form\|MDIForm\|UserControl\)'
                                setf vb
                              else
                                exe "setf " . a:alt
                              endif
                            endfunc
                            
                            " Visual Basic Script (close to Visual Basic) or Visual Basic .NET
    7              0.001870 au BufNewFile,BufRead *.vb,*.vbs,*.dsm,*.ctl	setf vb
                            
                            " IBasic file (similar to QBasic)
    7              0.000971 au BufNewFile,BufRead *.iba,*.ibi		setf ibasic
                            
                            " FreeBasic file (similar to QBasic)
    7              0.001125 au BufNewFile,BufRead *.fb,*.bi			setf freebasic
                            
                            " Batch file for MSDOS.
    7              0.001073 au BufNewFile,BufRead *.bat,*.sys		setf dosbatch
                            " *.cmd is close to a Batch file, but on OS/2 Rexx files also use *.cmd.
    7              0.000607 au BufNewFile,BufRead *.cmd
                            	\ if getline(1) =~ '^/\*' | setf rexx | else | setf dosbatch | endif
                            
                            " Batch file for 4DOS
    7              0.000737 au BufNewFile,BufRead *.btm			call s:FTbtm()
    7              0.000025 func! s:FTbtm()
                              if exists("g:dosbatch_syntax_for_btm") && g:dosbatch_syntax_for_btm
                                setf dosbatch
                              else
                                setf btm
                              endif
                            endfunc
                            
                            " BC calculator
    7              0.000712 au BufNewFile,BufRead *.bc			setf bc
                            
                            " BDF font
    7              0.000641 au BufNewFile,BufRead *.bdf			setf bdf
                            
                            " BibTeX bibliography database file
    7              0.000724 au BufNewFile,BufRead *.bib			setf bib
                            
                            " BibTeX Bibliography Style
    7              0.000747 au BufNewFile,BufRead *.bst			setf bst
                            
                            " BIND configuration
    7              0.001241 au BufNewFile,BufRead named.conf,rndc.conf	setf named
                            
                            " BIND zone
    7              0.000639 au BufNewFile,BufRead named.root		setf bindzone
    7              0.000614 au BufNewFile,BufRead *.db			call s:BindzoneCheck('')
                            
    7              0.000025 func! s:BindzoneCheck(default)
                              if getline(1).getline(2).getline(3).getline(4) =~ '^; <<>> DiG [0-9.]\+ <<>>\|BIND.*named\|$ORIGIN\|$TTL\|IN\s\+SOA'
                                setf bindzone
                              elseif a:default != ''
                                exe 'setf ' . a:default
                              endif
                            endfunc
                            
                            " Blank
    7              0.000624 au BufNewFile,BufRead *.bl			setf blank
                            
                            " Blkid cache file
    7              0.001187 au BufNewFile,BufRead */etc/blkid.tab,*/etc/blkid.tab.old   setf xml
                            
                            " C or lpc
    7              0.000644 au BufNewFile,BufRead *.c			call s:FTlpc()
                            
    7              0.000017 func! s:FTlpc()
                              if exists("g:lpc_syntax_for_c")
                                let lnum = 1
                                while lnum <= 12
                                  if getline(lnum) =~# '^\(//\|inherit\|private\|protected\|nosave\|string\|object\|mapping\|mixed\)'
                            	setf lpc
                            	return
                                  endif
                                  let lnum = lnum + 1
                                endwhile
                              endif
                              setf c
                            endfunc
                            
                            " Calendar
    7              0.000645 au BufNewFile,BufRead calendar			setf calendar
                            
                            " C#
    7              0.000605 au BufNewFile,BufRead *.cs			setf cs
                            
                            " CSDL
    7              0.000599 au BufNewFile,BufRead *.csdl			setf csdl
                            
                            " Cabal
    7              0.000602 au BufNewFile,BufRead *.cabal			setf cabal
                            
                            " Cdrdao TOC
    7              0.000597 au BufNewFile,BufRead *.toc			setf cdrtoc
                            
                            " Cdrdao config
    7              0.002148 au BufNewFile,BufRead */etc/cdrdao.conf,*/etc/defaults/cdrdao,*/etc/default/cdrdao,.cdrdao	setf cdrdaoconf
                            
                            " Cfengine
    7              0.000565 au BufNewFile,BufRead cfengine.conf		setf cfengine
                            
                            " ChaiScript
    7              0.000513 au BufRead,BufNewFile *.chai			setf chaiscript
                            
                            " Comshare Dimension Definition Language
    7              0.000530 au BufNewFile,BufRead *.cdl			setf cdl
                            
                            " Conary Recipe
    7              0.000555 au BufNewFile,BufRead *.recipe			setf conaryrecipe
                            
                            " Controllable Regex Mutilator
    7              0.000536 au BufNewFile,BufRead *.crm			setf crm
                            
                            " Cyn++
    7              0.000539 au BufNewFile,BufRead *.cyn			setf cynpp
                            
                            " Cynlib
                            " .cc and .cpp files can be C++ or Cynlib.
    7              0.000545 au BufNewFile,BufRead *.cc
                            	\ if exists("cynlib_syntax_for_cc")|setf cynlib|else|setf cpp|endif
    7              0.000563 au BufNewFile,BufRead *.cpp
                            	\ if exists("cynlib_syntax_for_cpp")|setf cynlib|else|setf cpp|endif
                            
                            " C++
    7              0.004141 au BufNewFile,BufRead *.cxx,*.c++,*.hh,*.hxx,*.hpp,*.ipp,*.moc,*.tcc,*.inl setf cpp
    7              0.000047 if has("fname_case")
                              au BufNewFile,BufRead *.C,*.H setf cpp
                            endif
                            
                            " .h files can be C, Ch C++, ObjC or ObjC++.
                            " Set c_syntax_for_h if you want C, ch_syntax_for_h if you want Ch. ObjC is
                            " detected automatically.
    7              0.000553 au BufNewFile,BufRead *.h			call s:FTheader()
                            
    7              0.000018 func! s:FTheader()
                              if match(getline(1, min([line("$"), 200])), '^@\(interface\|end\|class\)') > -1
                                if exists("g:c_syntax_for_h")
                                  setf objc
                                else
                                  setf objcpp
                                endif
                              elseif exists("g:c_syntax_for_h")
                                setf c
                              elseif exists("g:ch_syntax_for_h")
                                setf ch
                              else
                                setf cpp
                              endif
                            endfunc
                            
                            " Ch (CHscript)
    7              0.000568 au BufNewFile,BufRead *.chf			setf ch
                            
                            " TLH files are C++ headers generated by Visual C++'s #import from typelibs
    7              0.000548 au BufNewFile,BufRead *.tlh			setf cpp
                            
                            " Cascading Style Sheets
    7              0.000543 au BufNewFile,BufRead *.css			setf css
                            
                            " Century Term Command Scripts (*.cmd too)
    7              0.000538 au BufNewFile,BufRead *.con			setf cterm
                            
                            " Changelog
    7              0.002154 au BufNewFile,BufRead changelog.Debian,changelog.dch,NEWS.Debian,NEWS.dch
                            					\	setf debchangelog
                            
    7              0.000699 au BufNewFile,BufRead [cC]hange[lL]og
                            	\  if getline(1) =~ '; urgency='
                            	\|   setf debchangelog
                            	\| else
                            	\|   setf changelog
                            	\| endif
                            
    7              0.000613 au BufNewFile,BufRead NEWS
                            	\  if getline(1) =~ '; urgency='
                            	\|   setf debchangelog
                            	\| endif
                            
                            " CHILL
    7              0.000681 au BufNewFile,BufRead *..ch			setf chill
                            
                            " Changes for WEB and CWEB or CHILL
    7              0.000606 au BufNewFile,BufRead *.ch			call s:FTchange()
                            
                            " This function checks if one of the first ten lines start with a '@'.  In
                            " that case it is probably a change file.
                            " If the first line starts with # or ! it's probably a ch file.
                            " If a line has "main", "include", "//" ir "/*" it's probably ch.
                            " Otherwise CHILL is assumed.
    7              0.000022 func! s:FTchange()
                              let lnum = 1
                              while lnum <= 10
                                if getline(lnum)[0] == '@'
                                  setf change
                                  return
                                endif
                                if lnum == 1 && (getline(1)[0] == '#' || getline(1)[0] == '!')
                                  setf ch
                                  return
                                endif
                                if getline(lnum) =~ "MODULE"
                                  setf chill
                                  return
                                endif
                                if getline(lnum) =~ 'main\s*(\|#\s*include\|//'
                                  setf ch
                                  return
                                endif
                                let lnum = lnum + 1
                              endwhile
                              setf chill
                            endfunc
                            
                            " ChordPro
    7              0.002555 au BufNewFile,BufRead *.chopro,*.crd,*.cho,*.crdpro,*.chordpro	setf chordpro
                            
                            " Clean
    7              0.001099 au BufNewFile,BufRead *.dcl,*.icl		setf clean
                            
                            " Clever
    7              0.000564 au BufNewFile,BufRead *.eni			setf cl
                            
                            " Clever or dtd
    7              0.000605 au BufNewFile,BufRead *.ent			call s:FTent()
                            
    7              0.000018 func! s:FTent()
                              " This function checks for valid cl syntax in the first five lines.
                              " Look for either an opening comment, '#', or a block start, '{".
                              " If not found, assume SGML.
                              let lnum = 1
                              while lnum < 6
                                let line = getline(lnum)
                                if line =~ '^\s*[#{]'
                                  setf cl
                                  return
                                elseif line !~ '^\s*$'
                                  " Not a blank line, not a comment, and not a block start,
                                  " so doesn't look like valid cl code.
                                  break
                                endif
                                let lnum = lnum + 1
                              endw
                              setf dtd
                            endfunc
                            
                            " Clipper (or FoxPro; could also be eviews)
    7              0.000612 au BufNewFile,BufRead *.prg
                            	\ if exists("g:filetype_prg") |
                            	\   exe "setf " . g:filetype_prg |
                            	\ else |
                            	\   setf clipper |
                            	\ endif
                            
                            " Clojure
    7              0.001032 au BufNewFile,BufRead *.clj,*.cljs		setf clojure
                            
                            " Cmake
    7              0.001573 au BufNewFile,BufRead CMakeLists.txt,*.cmake,*.cmake.in		setf cmake
                            
                            " Cmusrc
    7              0.000646 au BufNewFile,BufRead */.cmus/{autosave,rc,command-history,*.theme} setf cmusrc
    7              0.000598 au BufNewFile,BufRead */cmus/{rc,*.theme}			setf cmusrc
                            
                            " Cobol
    7              0.001539 au BufNewFile,BufRead *.cbl,*.cob,*.lib	setf cobol
                            "   cobol or zope form controller python script? (heuristic)
    7              0.000589 au BufNewFile,BufRead *.cpy
                            	\ if getline(1) =~ '^##' |
                            	\   setf python |
                            	\ else |
                            	\   setf cobol |
                            	\ endif
                            
                            " Coco/R
    7              0.000570 au BufNewFile,BufRead *.atg			setf coco
                            
                            " Cold Fusion
    7              0.001501 au BufNewFile,BufRead *.cfm,*.cfi,*.cfc		setf cf
                            
                            " Configure scripts
    7              0.001091 au BufNewFile,BufRead configure.in,configure.ac setf config
                            
                            " CUDA  Cumpute Unified Device Architecture
    7              0.000567 au BufNewFile,BufRead *.cu			setf cuda
                            
                            " WildPackets EtherPeek Decoder
    7              0.000565 au BufNewFile,BufRead *.dcd			setf dcd
                            
                            " Enlightenment configuration files
    7              0.000610 au BufNewFile,BufRead *enlightenment/*.cfg	setf c
                            
                            " Eterm
    7              0.000602 au BufNewFile,BufRead *Eterm/*.cfg		setf eterm
                            
                            " Euphoria 3 or 4
    7              0.002458 au BufNewFile,BufRead *.eu,*.ew,*.ex,*.exu,*.exw  call s:EuphoriaCheck()
    7              0.000058 if has("fname_case")
                               au BufNewFile,BufRead *.EU,*.EW,*.EX,*.EXU,*.EXW  call s:EuphoriaCheck()
                            endif
                            
    7              0.000018 func! s:EuphoriaCheck()
                              if exists('g:filetype_euphoria')
                                exe 'setf ' . g:filetype_euphoria
                              else
                                setf euphoria3
                              endif
                            endfunc
                            
                            " Lynx config files
    7              0.000618 au BufNewFile,BufRead lynx.cfg			setf lynx
                            
                            " Quake
    7              0.001126 au BufNewFile,BufRead *baseq[2-3]/*.cfg,*id1/*.cfg	setf quake
    7              0.000728 au BufNewFile,BufRead *quake[1-3]/*.cfg			setf quake
                            
                            " Quake C
    7              0.000838 au BufNewFile,BufRead *.qc			setf c
                            
                            " Configure files
    7              0.000618 au BufNewFile,BufRead *.cfg			setf cfg
                            
                            " Cucumber
    7              0.000586 au BufNewFile,BufRead *.feature			setf cucumber
                            
                            " Communicating Sequential Processes
    7              0.001055 au BufNewFile,BufRead *.csp,*.fdr		setf csp
                            
                            " CUPL logic description and simulation
    7              0.000606 au BufNewFile,BufRead *.pld			setf cupl
    7              0.000586 au BufNewFile,BufRead *.si			setf cuplsim
                            
                            " Debian Control
    7              0.000603 au BufNewFile,BufRead */debian/control		setf debcontrol
    7              0.000597 au BufNewFile,BufRead control
                            	\  if getline(1) =~ '^Source:'
                            	\|   setf debcontrol
                            	\| endif
                            
                            " Debian Sources.list
    7              0.000592 au BufNewFile,BufRead */etc/apt/sources.list		setf debsources
    7              0.000617 au BufNewFile,BufRead */etc/apt/sources.list.d/*.list	setf debsources
                            
                            " Deny hosts
    7              0.000590 au BufNewFile,BufRead denyhosts.conf		setf denyhosts
                            
                            " dnsmasq(8) configuration files
    7              0.000585 au BufNewFile,BufRead */etc/dnsmasq.conf	setf dnsmasq
                            
                            " ROCKLinux package description
    7              0.000570 au BufNewFile,BufRead *.desc			setf desc
                            
                            " the D language or dtrace
    7              0.000567 au BufNewFile,BufRead *.d			call s:DtraceCheck()
                            
    7              0.000020 func! s:DtraceCheck()
                              let lines = getline(1, min([line("$"), 100]))
                              if match(lines, '^module\>\|^import\>') > -1
                                " D files often start with a module and/or import statement.
                                setf d
                              elseif match(lines, '^#!\S\+dtrace\|#pragma\s\+D\s\+option\|:\S\{-}:\S\{-}:') > -1
                                setf dtrace
                              else
                                setf d
                              endif
                            endfunc
                            
                            " Desktop files
    7              0.001100 au BufNewFile,BufRead *.desktop,.directory	setf desktop
                            
                            " Dict config
    7              0.001076 au BufNewFile,BufRead dict.conf,.dictrc		setf dictconf
                            
                            " Dictd config
    7              0.000586 au BufNewFile,BufRead dictd.conf		setf dictdconf
                            
                            " Diff files
    7              0.001528 au BufNewFile,BufRead *.diff,*.rej,*.patch	setf diff
                            
                            " Dircolors
    7              0.001698 au BufNewFile,BufRead .dir_colors,.dircolors,*/etc/DIR_COLORS	setf dircolors
                            
                            " Diva (with Skill) or InstallShield
    7              0.000613 au BufNewFile,BufRead *.rul
                            	\ if getline(1).getline(2).getline(3).getline(4).getline(5).getline(6) =~? 'InstallShield' |
                            	\   setf ishd |
                            	\ else |
                            	\   setf diva |
                            	\ endif
                            
                            " DCL (Digital Command Language - vms) or DNS zone file
    7              0.000581 au BufNewFile,BufRead *.com			call s:BindzoneCheck('dcl')
                            
                            " DOT
    7              0.000587 au BufNewFile,BufRead *.dot			setf dot
                            
                            " Dylan - lid files
    7              0.000572 au BufNewFile,BufRead *.lid			setf dylanlid
                            
                            " Dylan - intr files (melange)
    7              0.000605 au BufNewFile,BufRead *.intr			setf dylanintr
                            
                            " Dylan
    7              0.000602 au BufNewFile,BufRead *.dylan			setf dylan
                            
                            " Microsoft Module Definition
    7              0.000582 au BufNewFile,BufRead *.def			setf def
                            
                            " Dracula
    7              0.002038 au BufNewFile,BufRead *.drac,*.drc,*lvs,*lpe	setf dracula
                            
                            " Datascript
    7              0.000582 au BufNewFile,BufRead *.ds			setf datascript
                            
                            " dsl
    7              0.000579 au BufNewFile,BufRead *.dsl			setf dsl
                            
                            " DTD (Document Type Definition for XML)
    7              0.000580 au BufNewFile,BufRead *.dtd			setf dtd
                            
                            " DTS/DSTI (device tree files)
    7              0.001071 au BufNewFile,BufRead *.dts,*.dtsi		setf dts
                            
                            " EDIF (*.edf,*.edif,*.edn,*.edo)
    7              0.000596 au BufNewFile,BufRead *.ed\(f\|if\|n\|o\)	setf edif
                            
                            " Embedix Component Description
    7              0.000581 au BufNewFile,BufRead *.ecd			setf ecd
                            
                            " Eiffel or Specman or Euphoria
    7              0.001040 au BufNewFile,BufRead *.e,*.E			call s:FTe()
                            
                            " Elinks configuration
    7              0.001099 au BufNewFile,BufRead */etc/elinks.conf,*/.elinks/elinks.conf	setf elinks
                            
    7              0.000019 func! s:FTe()
                              if exists('g:filetype_euphoria')
                                exe 'setf ' . g:filetype_euphoria
                              else
                                let n = 1
                                while n < 100 && n < line("$")
                                  if getline(n) =~ "^\\s*\\(<'\\|'>\\)\\s*$"
                                    setf specman
                                    return
                                  endif
                                  let n = n + 1
                                endwhile
                                setf eiffel
                              endif
                            endfunc
                            
                            " ERicsson LANGuage; Yaws is erlang too
    7              0.001536 au BufNewFile,BufRead *.erl,*.hrl,*.yaws	setf erlang
                            
                            " Elm Filter Rules file
    7              0.001357 au BufNewFile,BufRead filter-rules		setf elmfilt
                            
                            " ESMTP rc file
    7              0.000773 au BufNewFile,BufRead *esmtprc			setf esmtprc
                            
                            " ESQL-C
    7              0.001162 au BufNewFile,BufRead *.ec,*.EC			setf esqlc
                            
                            " Esterel
    7              0.000601 au BufNewFile,BufRead *.strl			setf esterel
                            
                            " Essbase script
    7              0.000592 au BufNewFile,BufRead *.csc			setf csc
                            
                            " Exim
    7              0.000590 au BufNewFile,BufRead exim.conf			setf exim
                            
                            " Expect
    7              0.000585 au BufNewFile,BufRead *.exp			setf expect
                            
                            " Exports
    7              0.001013 au BufNewFile,BufRead exports			setf exports
                            
                            " Falcon
    7              0.000712 au BufNewFile,BufRead *.fal			setf falcon
                            
                            " Fantom
    7              0.001244 au BufNewFile,BufRead *.fan,*.fwt		setf fan
                            
                            " Factor
    7              0.000693 au BufNewFile,BufRead *.factor			setf factor
                            
                            " Fetchmail RC file
    7              0.000694 au BufNewFile,BufRead .fetchmailrc		setf fetchmail
                            
                            " FlexWiki - disabled, because it has side effects when a .wiki file
                            " is not actually FlexWiki
                            "au BufNewFile,BufRead *.wiki			setf flexwiki
                            
                            " Focus Executable
    7              0.001288 au BufNewFile,BufRead *.fex,*.focexec		setf focexec
                            
                            " Focus Master file (but not for auto.master)
    7              0.000693 au BufNewFile,BufRead auto.master		setf conf
    7              0.001261 au BufNewFile,BufRead *.mas,*.master		setf master
                            
                            " Forth
    7              0.001264 au BufNewFile,BufRead *.fs,*.ft			setf forth
                            
                            " Reva Forth
    7              0.000669 au BufNewFile,BufRead *.frt			setf reva
                            
                            " Fortran
    7              0.000062 if has("fname_case")
                              au BufNewFile,BufRead *.F,*.FOR,*.FPP,*.FTN,*.F77,*.F90,*.F95,*.F03,*.F08	 setf fortran
                            endif
    7              0.005834 au BufNewFile,BufRead   *.f,*.for,*.fortran,*.fpp,*.ftn,*.f77,*.f90,*.f95,*.f03,*.f08  setf fortran
                            
                            " Framescript
    7              0.000686 au BufNewFile,BufRead *.fsl			setf framescript
                            
                            " FStab
    7              0.001364 au BufNewFile,BufRead fstab,mtab		setf fstab
                            
                            " GDB command files
    7              0.000658 au BufNewFile,BufRead .gdbinit			setf gdb
                            
                            " GDMO
    7              0.001195 au BufNewFile,BufRead *.mo,*.gdmo		setf gdmo
                            
                            " Gedcom
    7              0.001228 au BufNewFile,BufRead *.ged,lltxxxxx.txt	setf gedcom
                            
                            " Git
    7              0.000689 au BufNewFile,BufRead *.git/COMMIT_EDITMSG	setf gitcommit
    7              0.000679 au BufNewFile,BufRead *.git/MERGE_MSG		setf gitcommit
    7              0.001821 au BufNewFile,BufRead *.git/config,.gitconfig,.gitmodules setf gitconfig
    7              0.000732 au BufNewFile,BufRead *.git/modules/*/COMMIT_EDITMSG setf gitcommit
    7              0.000675 au BufNewFile,BufRead *.git/modules/*/config	setf gitconfig
    7              0.000661 au BufNewFile,BufRead */.config/git/config	setf gitconfig
    7              0.000672 au BufNewFile,BufRead git-rebase-todo		setf gitrebase
    7              0.000660 au BufNewFile,BufRead .msg.[0-9]*
                                  \ if getline(1) =~ '^From.*# This line is ignored.$' |
                                  \   setf gitsendemail |
                                  \ endif
    7              0.000646 au BufNewFile,BufRead *.git/*
                                  \ if getline(1) =~ '^\x\{40\}\>\|^ref: ' |
                                  \   setf git |
                                  \ endif
                            
                            " Gkrellmrc
    7              0.001176 au BufNewFile,BufRead gkrellmrc,gkrellmrc_?	setf gkrellmrc
                            
                            " GP scripts (2.0 and onward)
    7              0.001163 au BufNewFile,BufRead *.gp,.gprc		setf gp
                            
                            " GPG
    7              0.000698 au BufNewFile,BufRead */.gnupg/options		setf gpg
    7              0.000694 au BufNewFile,BufRead */.gnupg/gpg.conf		setf gpg
    7              0.000658 au BufNewFile,BufRead */usr/*/gnupg/options.skel setf gpg
                            
                            " gnash(1) configuration files
    7              0.002649 au BufNewFile,BufRead gnashrc,.gnashrc,gnashpluginrc,.gnashpluginrc setf gnash
                            
                            " Gitolite
    7              0.000860 au BufNewFile,BufRead gitolite.conf		setf gitolite
    7              0.000791 au BufNewFile,BufRead */gitolite-admin/conf/*	call s:StarSetf('gitolite')
    7              0.001489 au BufNewFile,BufRead {,.}gitolite.rc,example.gitolite.rc	setf perl
                            
                            " Gnuplot scripts
    7              0.000730 au BufNewFile,BufRead *.gpi			setf gnuplot
                            
                            " GrADS scripts
    7              0.000757 au BufNewFile,BufRead *.gs			setf grads
                            
                            " Gretl
    7              0.000767 au BufNewFile,BufRead *.gretl			setf gretl
                            
                            " Groovy
    7              0.000767 au BufNewFile,BufRead *.groovy			setf groovy
                            
                            " GNU Server Pages
    7              0.000767 au BufNewFile,BufRead *.gsp			setf gsp
                            
                            " Group file
    7              0.005024 au BufNewFile,BufRead */etc/group,*/etc/group-,*/etc/group.edit,*/etc/gshadow,*/etc/gshadow-,*/etc/gshadow.edit,*/var/backups/group.bak,*/var/backups/gshadow.bak  setf group
                            
                            " GTK RC
    7              0.001377 au BufNewFile,BufRead .gtkrc,gtkrc		setf gtkrc
                            
                            " Haml
    7              0.000882 au BufNewFile,BufRead *.haml			setf haml
                            
                            " Hamster Classic | Playground files
    7              0.001467 au BufNewFile,BufRead *.hsc,*.hsm		setf hamster
                            
                            " Haskell
    7              0.001290 au BufNewFile,BufRead *.hs,*.hs-boot		setf haskell
    7              0.000773 au BufNewFile,BufRead *.lhs			setf lhaskell
    7              0.000808 au BufNewFile,BufRead *.chs			setf chaskell
                            
                            " Haste
    7              0.000735 au BufNewFile,BufRead *.ht			setf haste
    7              0.000723 au BufNewFile,BufRead *.htpp			setf hastepreproc
                            
                            " Hercules
    7              0.003262 au BufNewFile,BufRead *.vc,*.ev,*.rs,*.sum,*.errsum	setf hercules
                            
                            " HEX (Intel)
    7              0.001282 au BufNewFile,BufRead *.hex,*.h32		setf hex
                            
                            " Tilde (must be before HTML)
    7              0.000684 au BufNewFile,BufRead *.t.html			setf tilde
                            
                            " HTML (.shtml and .stm for server side)
    7              0.002539 au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm  call s:FThtml()
                            
                            " Distinguish between HTML, XHTML and Django
    7              0.000047 func! s:FThtml()
                              let n = 1
                              while n < 10 && n < line("$")
                                if getline(n) =~ '\<DTD\s\+XHTML\s'
                                  setf xhtml
                                  return
                                endif
                                if getline(n) =~ '{%\s*\(extends\|block\)\>'
                                  setf htmldjango
                                  return
                                endif
                                let n = n + 1
                              endwhile
                              setf html
                            endfunc
                            
                            " HTML with Ruby - eRuby
    7              0.001338 au BufNewFile,BufRead *.erb,*.rhtml		setf eruby
                            
                            " HTML with M4
    7              0.000715 au BufNewFile,BufRead *.html.m4			setf htmlm4
                            
                            " HTML Cheetah template
    7              0.000685 au BufNewFile,BufRead *.tmpl			setf htmlcheetah
                            
                            " Host config
    7              0.000709 au BufNewFile,BufRead */etc/host.conf		setf hostconf
                            
                            " Hosts access
    7              0.001298 au BufNewFile,BufRead */etc/hosts.allow,*/etc/hosts.deny  setf hostsaccess
                            
                            " Hyper Builder
    7              0.000686 au BufNewFile,BufRead *.hb			setf hb
                            
                            " Httest
    7              0.001263 au BufNewFile,BufRead *.htt,*.htb		setf httest
                            
                            " Icon
    7              0.000691 au BufNewFile,BufRead *.icn			setf icon
                            
                            " IDL (Interface Description Language)
    7              0.000683 au BufNewFile,BufRead *.idl			call s:FTidl()
                            
                            " Distinguish between standard IDL and MS-IDL
    7              0.000020 func! s:FTidl()
                              let n = 1
                              while n < 50 && n < line("$")
                                if getline(n) =~ '^\s*import\s\+"\(unknwn\|objidl\)\.idl"'
                                  setf msidl
                                  return
                                endif
                                let n = n + 1
                              endwhile
                              setf idl
                            endfunc
                            
                            " Microsoft IDL (Interface Description Language)  Also *.idl
                            " MOF = WMI (Windows Management Instrumentation) Managed Object Format
    7              0.001297 au BufNewFile,BufRead *.odl,*.mof		setf msidl
                            
                            " Icewm menu
    7              0.000703 au BufNewFile,BufRead */.icewm/menu		setf icemenu
                            
                            " Indent profile (must come before IDL *.pro!)
    7              0.000716 au BufNewFile,BufRead .indent.pro		setf indent
    7              0.000701 au BufNewFile,BufRead indent.pro		call s:ProtoCheck('indent')
                            
                            " IDL (Interactive Data Language)
    7              0.000726 au BufNewFile,BufRead *.pro			call s:ProtoCheck('idlang')
                            
                            " Distinguish between "default" and Cproto prototype file. */
    7              0.000022 func! s:ProtoCheck(default)
                              " Cproto files have a comment in the first line and a function prototype in
                              " the second line, it always ends in ";".  Indent files may also have
                              " comments, thus we can't match comments to see the difference.
                              " IDL files can have a single ';' in the second line, require at least one
                              " chacter before the ';'.
                              if getline(2) =~ '.;$'
                                setf cpp
                              else
                                exe 'setf ' . a:default
                              endif
                            endfunc
                            
                            
                            " Indent RC
    7              0.000721 au BufNewFile,BufRead indentrc			setf indent
                            
                            " Inform
    7              0.001282 au BufNewFile,BufRead *.inf,*.INF		setf inform
                            
                            " Initng
    7              0.002161 au BufNewFile,BufRead */etc/initng/*/*.i,*.ii	setf initng
                            
                            " Innovation Data Processing
    7              0.001930 au BufRead,BufNewFile upstream.dat\c,upstream.*.dat\c,*.upstream.dat\c 	setf upstreamdat
    7              0.001904 au BufRead,BufNewFile upstream.log\c,upstream.*.log\c,*.upstream.log\c 	setf upstreamlog
    7              0.002029 au BufRead,BufNewFile upstreaminstall.log\c,upstreaminstall.*.log\c,*.upstreaminstall.log\c setf upstreaminstalllog
    7              0.001807 au BufRead,BufNewFile usserver.log\c,usserver.*.log\c,*.usserver.log\c 	setf usserverlog
    7              0.001809 au BufRead,BufNewFile usw2kagt.log\c,usw2kagt.*.log\c,*.usw2kagt.log\c 	setf usw2kagtlog
                            
                            " Ipfilter
    7              0.001774 au BufNewFile,BufRead ipf.conf,ipf6.conf,ipf.rules	setf ipfilter
                            
                            " Informix 4GL (source - canonical, include file, I4GL+M4 preproc.)
    7              0.001824 au BufNewFile,BufRead *.4gl,*.4gh,*.m4gl	setf fgl
                            
                            " .INI file for MSDOS
    7              0.000698 au BufNewFile,BufRead *.ini			setf dosini
                            
                            " SysV Inittab
    7              0.000850 au BufNewFile,BufRead inittab			setf inittab
                            
                            " Inno Setup
    7              0.000734 au BufNewFile,BufRead *.iss			setf iss
                            
                            " J
    7              0.000672 au BufNewFile,BufRead *.ijs			setf j
                            
                            " JAL
    7              0.001193 au BufNewFile,BufRead *.jal,*.JAL		setf jal
                            
                            " Jam
    7              0.001172 au BufNewFile,BufRead *.jpl,*.jpr		setf jam
                            
                            " Java
    7              0.001191 au BufNewFile,BufRead *.java,*.jav		setf java
                            
                            " JavaCC
    7              0.001194 au BufNewFile,BufRead *.jj,*.jjt		setf javacc
                            
                            " JavaScript, ECMAScript
    7              0.003034 au BufNewFile,BufRead *.js,*.javascript,*.es,*.jsx,*.json   setf javascript
                            
                            " Java Server Pages
    7              0.000641 au BufNewFile,BufRead *.jsp			setf jsp
                            
                            " Java Properties resource file (note: doesn't catch font.properties.pl)
    7              0.001802 au BufNewFile,BufRead *.properties,*.properties_??,*.properties_??_??	setf jproperties
    7              0.000659 au BufNewFile,BufRead *.properties_??_??_*	call s:StarSetf('jproperties')
                            
                            " Jess
    7              0.000646 au BufNewFile,BufRead *.clp			setf jess
                            
                            " Jgraph
    7              0.000642 au BufNewFile,BufRead *.jgr			setf jgraph
                            
                            " Jovial
    7              0.001743 au BufNewFile,BufRead *.jov,*.j73,*.jovial	setf jovial
                            
                            " Kixtart
    7              0.000637 au BufNewFile,BufRead *.kix			setf kix
                            
                            " Kimwitu[++]
    7              0.000629 au BufNewFile,BufRead *.k			setf kwt
                            
                            " Kivy
    7              0.000633 au BufNewFile,BufRead *.kv			setf kivy
                            
                            " KDE script
    7              0.000915 au BufNewFile,BufRead *.ks			setf kscript
                            
                            " Kconfig
    7              0.001246 au BufNewFile,BufRead Kconfig,Kconfig.debug	setf kconfig
                            
                            " Lace (ISE)
    7              0.001232 au BufNewFile,BufRead *.ace,*.ACE		setf lace
                            
                            " Latte
    7              0.001264 au BufNewFile,BufRead *.latte,*.lte		setf latte
                            
                            " Limits
    7              0.001966 au BufNewFile,BufRead */etc/limits,*/etc/*limits.conf,*/etc/*limits.d/*.conf	setf limits
                            
                            " LambdaProlog (*.mod too, see Modsim)
    7              0.000724 au BufNewFile,BufRead *.sig			setf lprolog
                            
                            " LDAP LDIF
    7              0.000688 au BufNewFile,BufRead *.ldif			setf ldif
                            
                            " Ld loader
    7              0.000704 au BufNewFile,BufRead *.ld			setf ld
                            
                            " Lex
    7              0.003014 au BufNewFile,BufRead *.lex,*.l,*.lxx,*.l++	setf lex
                            
                            " Libao
    7              0.001372 au BufNewFile,BufRead */etc/libao.conf,*/.libao	setf libao
                            
                            " Libsensors
    7              0.001364 au BufNewFile,BufRead */etc/sensors.conf,*/etc/sensors3.conf	setf sensors
                            
                            " LFTP
    7              0.001858 au BufNewFile,BufRead lftp.conf,.lftprc,*lftp/rc	setf lftp
                            
                            " Lifelines (or Lex for C++!)
    7              0.000764 au BufNewFile,BufRead *.ll			setf lifelines
                            
                            " Lilo: Linux loader
    7              0.000686 au BufNewFile,BufRead lilo.conf			setf lilo
                            
                            " Lisp (*.el = ELisp, *.cl = Common Lisp, *.jl = librep Lisp)
    7              0.000061 if has("fname_case")
                              au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.jl,*.L,.emacs,.sawfishrc setf lisp
                            else
    7              0.003922   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.jl,.emacs,.sawfishrc setf lisp
    7              0.000009 endif
                            
                            " SBCL implementation of Common Lisp
    7              0.001190 au BufNewFile,BufRead sbclrc,.sbclrc		setf lisp
                            
                            " Liquid
    7              0.000640 au BufNewFile,BufRead *.liquid			setf liquid
                            
                            " Lite
    7              0.001163 au BufNewFile,BufRead *.lite,*.lt		setf lite
                            
                            " LiteStep RC files
    7              0.000659 au BufNewFile,BufRead */LiteStep/*/*.rc		setf litestep
                            
                            " Login access
    7              0.000658 au BufNewFile,BufRead */etc/login.access	setf loginaccess
                            
                            " Login defs
    7              0.000652 au BufNewFile,BufRead */etc/login.defs		setf logindefs
                            
                            " Logtalk
    7              0.000650 au BufNewFile,BufRead *.lgt			setf logtalk
                            
                            " LOTOS
    7              0.001177 au BufNewFile,BufRead *.lot,*.lotos		setf lotos
                            
                            " Lout (also: *.lt)
    7              0.001153 au BufNewFile,BufRead *.lou,*.lout		setf lout
                            
                            " Lua
    7              0.000615 au BufNewFile,BufRead *.lua			setf lua
                            
                            " Linden Scripting Language (Second Life)
    7              0.000623 au BufNewFile,BufRead *.lsl			setf lsl
                            
                            " Lynx style file (or LotusScript!)
    7              0.000622 au BufNewFile,BufRead *.lss			setf lss
                            
                            " M4
    7              0.000629 au BufNewFile,BufRead *.m4
                            	\ if expand("<afile>") !~? 'html.m4$\|fvwm2rc' | setf m4 | endif
                            
                            " MaGic Point
    7              0.000614 au BufNewFile,BufRead *.mgp			setf mgp
                            
                            " Mail (for Elm, trn, mutt, muttng, rn, slrn)
    7              0.008155 au BufNewFile,BufRead snd.\d\+,.letter,.letter.\d\+,.followup,.article,.article.\d\+,pico.\d\+,mutt{ng,}-*-\w\+,mutt[[:alnum:]_-]\\\{6\},ae\d\+.txt,/tmp/SLRN[0-9A-Z.]\+,*.eml setf mail
                            
                            " Mail aliases
    7              0.001902 au BufNewFile,BufRead */etc/mail/aliases,*/etc/aliases	setf mailaliases
                            
                            " Mailcap configuration file
    7              0.001679 au BufNewFile,BufRead .mailcap,mailcap		setf mailcap
                            
                            " Makefile
    7              0.002534 au BufNewFile,BufRead *[mM]akefile,*.mk,*.mak,*.dsp setf make
                            
                            " MakeIndex
    7              0.001575 au BufNewFile,BufRead *.ist,*.mst		setf ist
                            
                            " Mallard
    7              0.000913 au BufNewFile,BufRead *.page			setf mallard
                            
                            " Manpage
    7              0.000742 au BufNewFile,BufRead *.man			setf man
                            
                            " Man config
    7              0.001267 au BufNewFile,BufRead */etc/man.conf,man.config	setf manconf
                            
                            " Maple V
    7              0.001740 au BufNewFile,BufRead *.mv,*.mpl,*.mws		setf maple
                            
                            " Map (UMN mapserver config file)
    7              0.000641 au BufNewFile,BufRead *.map			setf map
                            
                            " Markdown
    7              0.003428 au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.mdwn,README.md  setf markdown
                            
                            " Mason
    7              0.001219 au BufNewFile,BufRead *.mason,*.mhtml		setf mason
                            
                            " Matlab or Objective C
    7              0.000668 au BufNewFile,BufRead *.m			call s:FTm()
                            
    7              0.000040 func! s:FTm()
                              let n = 1
                              while n < 10
                                let line = getline(n)
                                if line =~ '^\s*\(#\s*\(include\|import\)\>\|/\*\|//\)'
                                  setf objc
                                  return
                                endif
                                if line =~ '^\s*%'
                                  setf matlab
                                  return
                                endif
                                if line =~ '^\s*(\*'
                                  setf mma
                                  return
                                endif
                                let n = n + 1
                              endwhile
                              if exists("g:filetype_m")
                                exe "setf " . g:filetype_m
                              else
                                setf matlab
                              endif
                            endfunc
                            
                            " Mathematica notebook
    7              0.000680 au BufNewFile,BufRead *.nb			setf mma
                            
                            " Maya Extension Language
    7              0.000676 au BufNewFile,BufRead *.mel			setf mel
                            
                            " Mercurial (hg) commit file
    7              0.000682 au BufNewFile,BufRead hg-editor-*.txt		setf hgcommit
                            
                            " Mercurial config (looks like generic config file)
    7              0.001241 au BufNewFile,BufRead *.hgrc,*hgrc		setf cfg
                            
                            " Messages (logs mostly)
    7              0.000822 au BufNewFile,BufRead */log/{auth,cron,daemon,debug,kern,lpr,mail,messages,news/news,syslog,user}{,.log,.err,.info,.warn,.crit,.notice}{,.[0-9]*,-[0-9]*} setf messages
                            
                            " Metafont
    7              0.000699 au BufNewFile,BufRead *.mf			setf mf
                            
                            " MetaPost
    7              0.000670 au BufNewFile,BufRead *.mp			setf mp
                            
                            " MGL
    7              0.000681 au BufNewFile,BufRead *.mgl			setf mgl
                            
                            " MIX - Knuth assembly
    7              0.001285 au BufNewFile,BufRead *.mix,*.mixal		setf mix
                            
                            " MMIX or VMS makefile
    7              0.000689 au BufNewFile,BufRead *.mms			call s:FTmms()
                            
                            " Symbian meta-makefile definition (MMP)
    7              0.000694 au BufNewFile,BufRead *.mmp			setf mmp
                            
    7              0.000021 func! s:FTmms()
                              let n = 1
                              while n < 10
                                let line = getline(n)
                                if line =~ '^\s*\(%\|//\)' || line =~ '^\*'
                                  setf mmix
                                  return
                                endif
                                if line =~ '^\s*#'
                                  setf make
                                  return
                                endif
                                let n = n + 1
                              endwhile
                              setf mmix
                            endfunc
                            
                            
                            " Modsim III (or LambdaProlog)
    7              0.000724 au BufNewFile,BufRead *.mod
                            	\ if getline(1) =~ '\<module\>' |
                            	\   setf lprolog |
                            	\ else |
                            	\   setf modsim3 |
                            	\ endif
                            
                            " Modula 2
    7              0.003217 au BufNewFile,BufRead *.m2,*.DEF,*.MOD,*.md,*.mi setf modula2
                            
                            " Modula 3 (.m3, .i3, .mg, .ig)
    7              0.000707 au BufNewFile,BufRead *.[mi][3g]		setf modula3
                            
                            " Monk
    7              0.002475 au BufNewFile,BufRead *.isc,*.monk,*.ssc,*.tsc	setf monk
                            
                            " MOO
    7              0.000662 au BufNewFile,BufRead *.moo			setf moo
                            
                            " Modconf
    7              0.001849 au BufNewFile,BufRead */etc/modules.conf,*/etc/modules,*/etc/conf.modules setf modconf
                            
                            " Mplayer config
    7              0.001304 au BufNewFile,BufRead mplayer.conf,*/.mplayer/config	setf mplayerconf
                            
                            " Moterola S record
    7              0.001773 au BufNewFile,BufRead *.s19,*.s28,*.s37		setf srec
                            
                            " Mrxvtrc
    7              0.001209 au BufNewFile,BufRead mrxvtrc,.mrxvtrc		setf mrxvtrc
                            
                            " Msql
    7              0.000636 au BufNewFile,BufRead *.msql			setf msql
                            
                            " Mysql
    7              0.000652 au BufNewFile,BufRead *.mysql			setf mysql
                            
                            " Mutt setup files (must be before catch *.rc)
    7              0.000666 au BufNewFile,BufRead */etc/Muttrc.d/*		call s:StarSetf('muttrc')
                            
                            " M$ Resource files
    7              0.001216 au BufNewFile,BufRead *.rc,*.rch		setf rc
                            
                            " MuPAD source
    7              0.000662 au BufRead,BufNewFile *.mu			setf mupad
                            
                            " Mush
    7              0.000616 au BufNewFile,BufRead *.mush			setf mush
                            
                            " Mutt setup file (also for Muttng)
    7              0.000663 au BufNewFile,BufRead Mutt{ng,}rc		setf muttrc
                            
                            " Nano
    7              0.001493 au BufNewFile,BufRead */etc/nanorc,.nanorc	setf nanorc
                            
                            " Nastran input/DMAP
                            "au BufNewFile,BufRead *.dat			setf nastran
                            
                            " Natural
    7              0.000699 au BufNewFile,BufRead *.NS[ACGLMNPS]		setf natural
                            
                            " Netrc
    7              0.000661 au BufNewFile,BufRead .netrc			setf netrc
                            
                            " Ninja file
    7              0.000671 au BufNewFile,BufRead *.ninja			setf ninja
                            
                            " Novell netware batch files
    7              0.000676 au BufNewFile,BufRead *.ncf			setf ncf
                            
                            " Nroff/Troff (*.ms and *.t are checked below)
    7              0.000684 au BufNewFile,BufRead *.me
                            	\ if expand("<afile>") != "read.me" && expand("<afile>") != "click.me" |
                            	\   setf nroff |
                            	\ endif
    7              0.003009 au BufNewFile,BufRead *.tr,*.nr,*.roff,*.tmac,*.mom	setf nroff
    7              0.000691 au BufNewFile,BufRead *.[1-9]			call s:FTnroff()
                            
                            " This function checks if one of the first five lines start with a dot.  In
                            " that case it is probably an nroff file: 'filetype' is set and 1 is returned.
    7              0.000029 func! s:FTnroff()
                              if getline(1)[0] . getline(2)[0] . getline(3)[0] . getline(4)[0] . getline(5)[0] =~ '\.'
                                setf nroff
                                return 1
                              endif
                              return 0
                            endfunc
                            
                            " Nroff or Objective C++
    7              0.000697 au BufNewFile,BufRead *.mm			call s:FTmm()
                            
    7              0.000013 func! s:FTmm()
                              let n = 1
                              while n < 10
                                let line = getline(n)
                                if line =~ '^\s*\(#\s*\(include\|import\)\>\|/\*\)'
                                  setf objcpp
                                  return
                                endif
                                let n = n + 1
                              endwhile
                              setf nroff
                            endfunc
                            
                            " Not Quite C
    7              0.000695 au BufNewFile,BufRead *.nqc			setf nqc
                            
                            " NSIS
    7              0.001476 au BufNewFile,BufRead *.nsi,*.nsh		setf nsis
                            
                            " OCAML
    7              0.003472 au BufNewFile,BufRead *.ml,*.mli,*.mll,*.mly,.ocamlinit	setf ocaml
                            
                            " Occam
    7              0.000876 au BufNewFile,BufRead *.occ			setf occam
                            
                            " Omnimark
    7              0.001757 au BufNewFile,BufRead *.xom,*.xin		setf omnimark
                            
                            " OpenROAD
    7              0.000860 au BufNewFile,BufRead *.or			setf openroad
                            
                            " OPL
    7              0.000892 au BufNewFile,BufRead *.[Oo][Pp][Ll]		setf opl
                            
                            " Oracle config file
    7              0.000872 au BufNewFile,BufRead *.ora			setf ora
                            
                            " Packet filter conf
    7              0.000989 au BufNewFile,BufRead pf.conf			setf pf
                            
                            " Pam conf
    7              0.000907 au BufNewFile,BufRead */etc/pam.conf		setf pamconf
                            
                            " PApp
    7              0.002416 au BufNewFile,BufRead *.papp,*.pxml,*.pxsl	setf papp
                            
                            " Password file
    7              0.006051 au BufNewFile,BufRead */etc/passwd,*/etc/passwd-,*/etc/passwd.edit,*/etc/shadow,*/etc/shadow-,*/etc/shadow.edit,*/var/backups/passwd.bak,*/var/backups/shadow.bak setf passwd
                            
                            " Pascal (also *.p)
    7              0.000761 au BufNewFile,BufRead *.pas			setf pascal
                            
                            " Delphi project file
    7              0.000827 au BufNewFile,BufRead *.dpr			setf pascal
                            
                            " PDF
    7              0.000736 au BufNewFile,BufRead *.pdf			setf pdf
                            
                            " Perl
    7              0.000055 if has("fname_case")
                              au BufNewFile,BufRead *.pl,*.PL		call s:FTpl()
                            else
    7              0.000747   au BufNewFile,BufRead *.pl			call s:FTpl()
    7              0.000007 endif
    7              0.001369 au BufNewFile,BufRead *.plx,*.al		setf perl
    7              0.001350 au BufNewFile,BufRead *.p6,*.pm6		setf perl6
                            
    7              0.000027 func! s:FTpl()
                              if exists("g:filetype_pl")
                                exe "setf " . g:filetype_pl
                              else
                                " recognize Prolog by specific text in the first non-empty line
                                " require a blank after the '%' because Perl uses "%list" and "%translate"
                                let l = getline(nextnonblank(1))
                                if l =~ '\<prolog\>' || l =~ '^\s*\(%\+\(\s\|$\)\|/\*\)' || l =~ ':-'
                                  setf prolog
                                else
                                  setf perl
                                endif
                              endif
                            endfunc
                            
                            " Perl, XPM or XPM2
    7              0.000771 au BufNewFile,BufRead *.pm
                            	\ if getline(1) =~ "XPM2" |
                            	\   setf xpm2 |
                            	\ elseif getline(1) =~ "XPM" |
                            	\   setf xpm |
                            	\ else |
                            	\   setf perl |
                            	\ endif
                            
                            " Perl POD
    7              0.000713 au BufNewFile,BufRead *.pod			setf pod
                            
                            " Php, php3, php4, etc.
                            " Also Phtml (was used for PHP 2 in the past)
                            " Also .ctp for Cake template file
    7              0.002624 au BufNewFile,BufRead *.php,*.php\d,*.phtml,*.ctp	setf php
                            
                            " Pike
    7              0.002892 au BufNewFile,BufRead *.pike,*.lpc,*.ulpc,*.pmod setf pike
                            
                            " Pinfo config
    7              0.001490 au BufNewFile,BufRead */etc/pinforc,*/.pinforc	setf pinfo
                            
                            " Palm Resource compiler
    7              0.000808 au BufNewFile,BufRead *.rcp			setf pilrc
                            
                            " Pine config
    7              0.002876 au BufNewFile,BufRead .pinerc,pinerc,.pinercex,pinercex		setf pine
                            
                            " PL/1, PL/I
    7              0.001785 au BufNewFile,BufRead *.pli,*.pl1		setf pli
                            
                            " PL/M (also: *.inp)
    7              0.003290 au BufNewFile,BufRead *.plm,*.p36,*.pac		setf plm
                            
                            " PL/SQL
    7              0.002498 au BufNewFile,BufRead *.pls,*.plsql		setf plsql
                            
                            " PLP
    7              0.001351 au BufNewFile,BufRead *.plp			setf plp
                            
                            " PO and PO template (GNU gettext)
    7              0.002238 au BufNewFile,BufRead *.po,*.pot		setf po
                            
                            " Postfix main config
    7              0.001217 au BufNewFile,BufRead main.cf			setf pfmain
                            
                            " PostScript (+ font files, encapsulated PostScript, Adobe Illustrator)
    7              0.007091 au BufNewFile,BufRead *.ps,*.pfa,*.afm,*.eps,*.epsf,*.epsi,*.ai	  setf postscr
                            
                            " PostScript Printer Description
    7              0.000965 au BufNewFile,BufRead *.ppd			setf ppd
                            
                            " Povray
    7              0.000913 au BufNewFile,BufRead *.pov			setf pov
                            
                            " Povray configuration
    7              0.000909 au BufNewFile,BufRead .povrayrc			setf povini
                            
                            " Povray, PHP or assembly
    7              0.000888 au BufNewFile,BufRead *.inc			call s:FTinc()
                            
    7              0.000023 func! s:FTinc()
                              if exists("g:filetype_inc")
                                exe "setf " . g:filetype_inc
                              else
                                let lines = getline(1).getline(2).getline(3)
                                if lines =~? "perlscript"
                                  setf aspperl
                                elseif lines =~ "<%"
                                  setf aspvbs
                                elseif lines =~ "<?"
                                  setf php
                                else
                                  call s:FTasmsyntax()
                                  if exists("b:asmsyntax")
                            	exe "setf " . fnameescape(b:asmsyntax)
                                  else
                            	setf pov
                                  endif
                                endif
                              endif
                            endfunc
                            
                            " Printcap and Termcap
    7              0.000893 au BufNewFile,BufRead *printcap
                            	\ let b:ptcap_type = "print" | setf ptcap
    7              0.000864 au BufNewFile,BufRead *termcap
                            	\ let b:ptcap_type = "term" | setf ptcap
                            
                            " PCCTS / ANTRL
                            "au BufNewFile,BufRead *.g			setf antrl
    7              0.000827 au BufNewFile,BufRead *.g			setf pccts
                            
                            " PPWizard
    7              0.001508 au BufNewFile,BufRead *.it,*.ih			setf ppwiz
                            
                            " Obj 3D file format
                            " TODO: is there a way to avoid MS-Windows Object files?
    7              0.000798 au BufNewFile,BufRead *.obj			setf obj
                            
                            " Oracle Pro*C/C++
    7              0.000766 au BufNewFile,BufRead *.pc			setf proc
                            
                            " Privoxy actions file
    7              0.000763 au BufNewFile,BufRead *.action			setf privoxy
                            
                            " Procmail
    7              0.001463 au BufNewFile,BufRead .procmail,.procmailrc	setf procmail
                            
                            " Progress or CWEB
    7              0.000721 au BufNewFile,BufRead *.w			call s:FTprogress_cweb()
                            
    7              0.000018 func! s:FTprogress_cweb()
                              if exists("g:filetype_w")
                                exe "setf " . g:filetype_w
                                return
                              endif
                              if getline(1) =~ '&ANALYZE' || getline(3) =~ '&GLOBAL-DEFINE'
                                setf progress
                              else
                                setf cweb
                              endif
                            endfunc
                            
                            " Progress or assembly
    7              0.000720 au BufNewFile,BufRead *.i			call s:FTprogress_asm()
                            
    7              0.000013 func! s:FTprogress_asm()
                              if exists("g:filetype_i")
                                exe "setf " . g:filetype_i
                                return
                              endif
                              " This function checks for an assembly comment the first ten lines.
                              " If not found, assume Progress.
                              let lnum = 1
                              while lnum <= 10 && lnum < line('$')
                                let line = getline(lnum)
                                if line =~ '^\s*;' || line =~ '^\*'
                                  call s:FTasm()
                                  return
                                elseif line !~ '^\s*$' || line =~ '^/\*'
                                  " Not an empty line: Doesn't look like valid assembly code.
                                  " Or it looks like a Progress /* comment
                                  break
                                endif
                                let lnum = lnum + 1
                              endw
                              setf progress
                            endfunc
                            
                            " Progress or Pascal
    7              0.000723 au BufNewFile,BufRead *.p			call s:FTprogress_pascal()
                            
    7              0.000014 func! s:FTprogress_pascal()
                              if exists("g:filetype_p")
                                exe "setf " . g:filetype_p
                                return
                              endif
                              " This function checks for valid Pascal syntax in the first ten lines.
                              " Look for either an opening comment or a program start.
                              " If not found, assume Progress.
                              let lnum = 1
                              while lnum <= 10 && lnum < line('$')
                                let line = getline(lnum)
                                if line =~ '^\s*\(program\|unit\|procedure\|function\|const\|type\|var\)\>'
                            	\ || line =~ '^\s*{' || line =~ '^\s*(\*'
                                  setf pascal
                                  return
                                elseif line !~ '^\s*$' || line =~ '^/\*'
                                  " Not an empty line: Doesn't look like valid Pascal code.
                                  " Or it looks like a Progress /* comment
                                  break
                                endif
                                let lnum = lnum + 1
                              endw
                              setf progress
                            endfunc
                            
                            
                            " Software Distributor Product Specification File (POSIX 1387.2-1995)
    7              0.000964 au BufNewFile,BufRead *.psf			setf psf
    7              0.001411 au BufNewFile,BufRead INDEX,INFO
                            	\ if getline(1) =~ '^\s*\(distribution\|installed_software\|root\|bundle\|product\)\s*$' |
                            	\   setf psf |
                            	\ endif
                            
                            " Prolog
    7              0.000709 au BufNewFile,BufRead *.pdb			setf prolog
                            
                            " Promela
    7              0.000884 au BufNewFile,BufRead *.pml			setf promela
                            
                            " Google protocol buffers
    7              0.000867 au BufNewFile,BufRead *.proto			setf proto
                            
                            " Protocols
    7              0.000738 au BufNewFile,BufRead */etc/protocols		setf protocols
                            
                            " Pyrex
    7              0.001511 au BufNewFile,BufRead *.pyx,*.pxd		setf pyrex
                            
                            " Python
    7              0.001373 au BufNewFile,BufRead *.py,*.pyw		setf python
                            
                            " Quixote (Python-based web framework)
    7              0.000676 au BufNewFile,BufRead *.ptl			setf python
                            
                            " Radiance
    7              0.001359 au BufNewFile,BufRead *.rad,*.mat		setf radiance
                            
                            " Ratpoison config/command files
    7              0.001452 au BufNewFile,BufRead .ratpoisonrc,ratpoisonrc	setf ratpoison
                            
                            " RCS file
    7              0.000714 au BufNewFile,BufRead *\,v			setf rcs
                            
                            " Readline
    7              0.001362 au BufNewFile,BufRead .inputrc,inputrc		setf readline
                            
                            " Registry for MS-Windows
    7              0.000736 au BufNewFile,BufRead *.reg
                            	\ if getline(1) =~? '^REGEDIT[0-9]*\s*$\|^Windows Registry Editor Version \d*\.\d*\s*$' | setf registry | endif
                            
                            " Renderman Interface Bytestream
    7              0.000715 au BufNewFile,BufRead *.rib			setf rib
                            
                            " Rexx
    7              0.005649 au BufNewFile,BufRead *.rex,*.orx,*.rxo,*.rxj,*.jrexx,*.rexxj,*.rexx,*.testGroup,*.testUnit	setf rexx
                            
                            " R (Splus)
    7              0.000067 if has("fname_case")
                              au BufNewFile,BufRead *.s,*.S			setf r
                            else
    7              0.000715   au BufNewFile,BufRead *.s			setf r
    7              0.000008 endif
                            
                            " R Help file
    7              0.000027 if has("fname_case")
                              au BufNewFile,BufRead *.rd,*.Rd		setf rhelp
                            else
    7              0.000720   au BufNewFile,BufRead *.rd			setf rhelp
    7              0.000007 endif
                            
                            " R noweb file
    7              0.000055 if has("fname_case")
                              au BufNewFile,BufRead *.Rnw,*.rnw,*.Snw,*.snw		setf rnoweb
                            else
    7              0.001363   au BufNewFile,BufRead *.rnw,*.snw			setf rnoweb
    7              0.000007 endif
                            
                            " Rexx, Rebol or R
    7              0.001296 au BufNewFile,BufRead *.r,*.R			call s:FTr()
                            
    7              0.000025 func! s:FTr()
                              let max = line("$") > 50 ? 50 : line("$")
                            
                              for n in range(1, max)
                                " Rebol is easy to recognize, check for that first
                                if getline(n) =~? '\<REBOL\>'
                                  setf rebol
                                  return
                                endif
                              endfor
                            
                              for n in range(1, max)
                                " R has # comments
                                if getline(n) =~ '^\s*#'
                                  setf r
                                  return
                                endif
                                " Rexx has /* comments */
                                if getline(n) =~ '^\s*/\*'
                                  setf rexx
                                  return
                                endif
                              endfor
                            
                              " Nothing recognized, use user default or assume Rexx
                              if exists("g:filetype_r")
                                exe "setf " . g:filetype_r
                              else
                                " Rexx used to be the default, but R appears to be much more popular.
                                setf r
                              endif
                            endfunc
                            
                            " Remind
    7              0.002061 au BufNewFile,BufRead .reminders,*.remind,*.rem		setf remind
                            
                            " Resolv.conf
    7              0.000728 au BufNewFile,BufRead resolv.conf		setf resolv
                            
                            " Relax NG Compact
    7              0.000727 au BufNewFile,BufRead *.rnc			setf rnc
                            
                            " Relax NG XML
    7              0.000726 au BufNewFile,BufRead *.rng			setf rng
                            
                            " RPL/2
    7              0.000707 au BufNewFile,BufRead *.rpl			setf rpl
                            
                            " Robots.txt
    7              0.000730 au BufNewFile,BufRead robots.txt		setf robots
                            
                            " Rpcgen
    7              0.000704 au BufNewFile,BufRead *.x			setf rpcgen
                            
                            " reStructuredText Documentation Format
    7              0.000715 au BufNewFile,BufRead *.rst			setf rst
                            
                            " RTF
    7              0.000714 au BufNewFile,BufRead *.rtf			setf rtf
                            
                            " Interactive Ruby shell
    7              0.001348 au BufNewFile,BufRead .irbrc,irbrc		setf ruby
                            
                            " Ruby
    7              0.001350 au BufNewFile,BufRead *.rb,*.rbw		setf ruby
                            
                            " RubyGems
    7              0.000719 au BufNewFile,BufRead *.gemspec			setf ruby
                            
                            " Rackup
    7              0.000713 au BufNewFile,BufRead *.ru			setf ruby
                            
                            " Bundler
    7              0.000795 au BufNewFile,BufRead Gemfile			setf ruby
                            
                            " Ruby on Rails
    7              0.001970 au BufNewFile,BufRead *.builder,*.rxml,*.rjs	setf ruby
                            
                            " Rantfile and Rakefile is like Ruby
    7              0.002690 au BufNewFile,BufRead [rR]antfile,*.rant,[rR]akefile,*.rake	setf ruby
                            
                            " S-lang (or shader language, or SmallLisp)
    7              0.000693 au BufNewFile,BufRead *.sl			setf slang
                            
                            " Samba config
    7              0.000707 au BufNewFile,BufRead smb.conf			setf samba
                            
                            " SAS script
    7              0.000710 au BufNewFile,BufRead *.sas			setf sas
                            
                            " Sass
    7              0.000704 au BufNewFile,BufRead *.sass			setf sass
                            
                            " Sather
    7              0.000691 au BufNewFile,BufRead *.sa			setf sather
                            
                            " Scilab
    7              0.001334 au BufNewFile,BufRead *.sci,*.sce		setf scilab
                            
                            " SCSS
    7              0.000696 au BufNewFile,BufRead *.scss			setf scss
                            
                            " SD: Streaming Descriptors
    7              0.000689 au BufNewFile,BufRead *.sd			setf sd
                            
                            " SDL
    7              0.001329 au BufNewFile,BufRead *.sdl,*.pr		setf sdl
                            
                            " sed
    7              0.000699 au BufNewFile,BufRead *.sed			setf sed
                            
                            " Sieve (RFC 3028)
    7              0.000688 au BufNewFile,BufRead *.siv			setf sieve
                            
                            " Sendmail
    7              0.000705 au BufNewFile,BufRead sendmail.cf		setf sm
                            
                            " Sendmail .mc files are actually m4.  Could also be MS Message text file.
    7              0.000692 au BufNewFile,BufRead *.mc			call s:McSetf()
                            
    7              0.000023 func! s:McSetf()
                              " Rely on the file to start with a comment.
                              " MS message text files use ';', Sendmail files use '#' or 'dnl'
                              for lnum in range(1, min([line("$"), 20]))
                                let line = getline(lnum)
                                if line =~ '^\s*\(#\|dnl\)'
                                  setf m4  " Sendmail .mc file
                                  return
                                elseif line =~ '^\s*;'
                                  setf msmessages  " MS Message text file
                                  return
                                endif
                              endfor
                              setf m4  " Default: Sendmail .mc file
                            endfunc
                            
                            " Services
    7              0.000737 au BufNewFile,BufRead */etc/services		setf services
                            
                            " Service Location config
    7              0.000718 au BufNewFile,BufRead */etc/slp.conf		setf slpconf
                            
                            " Service Location registration
    7              0.000702 au BufNewFile,BufRead */etc/slp.reg		setf slpreg
                            
                            " Service Location SPI
    7              0.000700 au BufNewFile,BufRead */etc/slp.spi		setf slpspi
                            
                            " Setserial config
    7              0.000715 au BufNewFile,BufRead */etc/serial.conf		setf setserial
                            
                            " SGML
    7              0.001374 au BufNewFile,BufRead *.sgm,*.sgml
                            	\ if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'linuxdoc' |
                            	\   setf sgmllnx |
                            	\ elseif getline(1) =~ '<!DOCTYPE.*DocBook' || getline(2) =~ '<!DOCTYPE.*DocBook' |
                            	\   let b:docbk_type = "sgml" |
                            	\   let b:docbk_ver = 4 |
                            	\   setf docbk |
                            	\ else |
                            	\   setf sgml |
                            	\ endif
                            
                            " SGMLDECL
    7              0.001949 au BufNewFile,BufRead *.decl,*.dcl,*.dec
                            	\ if getline(1).getline(2).getline(3) =~? '^<!SGML' |
                            	\    setf sgmldecl |
                            	\ endif
                            
                            " SGML catalog file
    7              0.000714 au BufNewFile,BufRead catalog			setf catalog
    7              0.000705 au BufNewFile,BufRead sgml.catalog*		call s:StarSetf('catalog')
                            
                            " Shell scripts (sh, ksh, bash, bash2, csh); Allow .profile_foo etc.
                            " Gentoo ebuilds are actually bash scripts
    7              0.004595 au BufNewFile,BufRead .bashrc*,bashrc,bash.bashrc,.bash_profile*,.bash_logout*,*.bash,*.ebuild call SetFileTypeSH("bash")
    7              0.001347 au BufNewFile,BufRead .kshrc*,*.ksh call SetFileTypeSH("ksh")
    7              0.002593 au BufNewFile,BufRead */etc/profile,.profile*,*.sh,*.env call SetFileTypeSH(getline(1))
                            
                            " Also called from scripts.vim.
    7              0.000020 func! SetFileTypeSH(name)
                              if expand("<amatch>") =~ g:ft_ignore_pat
                                return
                              endif
                              if a:name =~ '\<csh\>'
                                " Some .sh scripts contain #!/bin/csh.
                                call SetFileTypeShell("csh")
                                return
                              elseif a:name =~ '\<tcsh\>'
                                " Some .sh scripts contain #!/bin/tcsh.
                                call SetFileTypeShell("tcsh")
                                return
                              elseif a:name =~ '\<zsh\>'
                                " Some .sh scripts contain #!/bin/zsh.
                                call SetFileTypeShell("zsh")
                                return
                              elseif a:name =~ '\<ksh\>'
                                let b:is_kornshell = 1
                                if exists("b:is_bash")
                                  unlet b:is_bash
                                endif
                                if exists("b:is_sh")
                                  unlet b:is_sh
                                endif
                              elseif exists("g:bash_is_sh") || a:name =~ '\<bash\>' || a:name =~ '\<bash2\>'
                                let b:is_bash = 1
                                if exists("b:is_kornshell")
                                  unlet b:is_kornshell
                                endif
                                if exists("b:is_sh")
                                  unlet b:is_sh
                                endif
                              elseif a:name =~ '\<sh\>'
                                let b:is_sh = 1
                                if exists("b:is_kornshell")
                                  unlet b:is_kornshell
                                endif
                                if exists("b:is_bash")
                                  unlet b:is_bash
                                endif
                              endif
                              call SetFileTypeShell("sh")
                            endfunc
                            
                            " For shell-like file types, check for an "exec" command hidden in a comment,
                            " as used for Tcl.
                            " Also called from scripts.vim, thus can't be local to this script.
    7              0.000014 func! SetFileTypeShell(name)
                              if expand("<amatch>") =~ g:ft_ignore_pat
                                return
                              endif
                              let l = 2
                              while l < 20 && l < line("$") && getline(l) =~ '^\s*\(#\|$\)'
                                " Skip empty and comment lines.
                                let l = l + 1
                              endwhile
                              if l < line("$") && getline(l) =~ '\s*exec\s' && getline(l - 1) =~ '^\s*#.*\\$'
                                " Found an "exec" line after a comment with continuation
                                let n = substitute(getline(l),'\s*exec\s\+\([^ ]*/\)\=', '', '')
                                if n =~ '\<tclsh\|\<wish'
                                  setf tcl
                                  return
                                endif
                              endif
                              exe "setf " . a:name
                            endfunc
                            
                            " tcsh scripts
    7              0.002589 au BufNewFile,BufRead .tcshrc*,*.tcsh,tcsh.tcshrc,tcsh.login	call SetFileTypeShell("tcsh")
                            
                            " csh scripts, but might also be tcsh scripts (on some systems csh is tcsh)
    7              0.004463 au BufNewFile,BufRead .login*,.cshrc*,csh.cshrc,csh.login,csh.logout,*.csh,.alias  call s:CSH()
                            
    7              0.000017 func! s:CSH()
                              if exists("g:filetype_csh")
                                call SetFileTypeShell(g:filetype_csh)
                              elseif &shell =~ "tcsh"
                                call SetFileTypeShell("tcsh")
                              else
                                call SetFileTypeShell("csh")
                              endif
                            endfunc
                            
                            " Z-Shell script
    7              0.001997 au BufNewFile,BufRead .zprofile,*/etc/zprofile,.zfbfmarks  setf zsh
    7              0.002319 au BufNewFile,BufRead .zsh*,.zlog*,.zcompdump*  call s:StarSetf('zsh')
    7              0.000836 au BufNewFile,BufRead *.zsh			setf zsh
                            
                            " Scheme
    7              0.002242 au BufNewFile,BufRead *.scm,*.ss,*.rkt		setf scheme
                            
                            " Screen RC
    7              0.001519 au BufNewFile,BufRead .screenrc,screenrc	setf screen
                            
                            " Simula
    7              0.000795 au BufNewFile,BufRead *.sim			setf simula
                            
                            " SINDA
    7              0.001504 au BufNewFile,BufRead *.sin,*.s85		setf sinda
                            
                            " SiSU
    7              0.003616 au BufNewFile,BufRead *.sst,*.ssm,*.ssi,*.-sst,*._sst setf sisu
    7              0.002213 au BufNewFile,BufRead *.sst.meta,*.-sst.meta,*._sst.meta setf sisu
                            
                            " SKILL
    7              0.002237 au BufNewFile,BufRead *.il,*.ils,*.cdf		setf skill
                            
                            " SLRN
    7              0.000737 au BufNewFile,BufRead .slrnrc			setf slrnrc
    7              0.000737 au BufNewFile,BufRead *.score			setf slrnsc
                            
                            " Smalltalk (and TeX)
    7              0.000725 au BufNewFile,BufRead *.st			setf st
    7              0.000805 au BufNewFile,BufRead *.cls
                            	\ if getline(1) =~ '^%' |
                            	\  setf tex |
                            	\ elseif getline(1)[0] == '#' && getline(1) =~ 'rexx' |
                            	\  setf rexx |
                            	\ else |
                            	\  setf st |
                            	\ endif
                            
                            " Smarty templates
    7              0.000735 au BufNewFile,BufRead *.tpl			setf smarty
                            
                            " SMIL or XML
    7              0.000924 au BufNewFile,BufRead *.smil
                            	\ if getline(1) =~ '<?\s*xml.*?>' |
                            	\   setf xml |
                            	\ else |
                            	\   setf smil |
                            	\ endif
                            
                            " SMIL or SNMP MIB file
    7              0.000817 au BufNewFile,BufRead *.smi
                            	\ if getline(1) =~ '\<smil\>' |
                            	\   setf smil |
                            	\ else |
                            	\   setf mib |
                            	\ endif
                            
                            " SMITH
    7              0.001418 au BufNewFile,BufRead *.smt,*.smith		setf smith
                            
                            " Snobol4 and spitbol
    7              0.001388 au BufNewFile,BufRead *.sno,*.spt		setf snobol4
                            
                            " SNMP MIB files
    7              0.001621 au BufNewFile,BufRead *.mib,*.my		setf mib
                            
                            " Snort Configuration
    7              0.002123 au BufNewFile,BufRead *.hog,snort.conf,vision.conf	setf hog
    7              0.000746 au BufNewFile,BufRead *.rules			call s:FTRules()
                            
    7              0.000045 let s:ft_rules_udev_rules_pattern = '^\s*\cudev_rules\s*=\s*"\([^"]\{-1,}\)/*".*'
    7              0.000020 func! s:FTRules()
                              let path = expand('<amatch>:p')
                              if path =~ '^/\(etc/udev/\%(rules\.d/\)\=.*\.rules\|lib/udev/\%(rules\.d/\)\=.*\.rules\)$'
                                setf udevrules
                                return
                              endif
                              if path =~ '^/etc/ufw/'
                                setf conf  " Better than hog
                                return
                              endif
                              try
                                let config_lines = readfile('/etc/udev/udev.conf')
                              catch /^Vim\%((\a\+)\)\=:E484/
                                setf hog
                                return
                              endtry
                              let dir = expand('<amatch>:p:h')
                              for line in config_lines
                                if line =~ s:ft_rules_udev_rules_pattern
                                  let udev_rules = substitute(line, s:ft_rules_udev_rules_pattern, '\1', "")
                                  if dir == udev_rules
                                    setf udevrules
                                  endif
                                  break
                                endif
                              endfor
                              setf hog
                            endfunc
                            
                            
                            " Spec (Linux RPM)
    7              0.000744 au BufNewFile,BufRead *.spec			setf spec
                            
                            " Speedup (AspenTech plant simulator)
    7              0.002074 au BufNewFile,BufRead *.speedup,*.spdata,*.spd	setf spup
                            
                            " Slice
    7              0.000746 au BufNewFile,BufRead *.ice			setf slice
                            
                            " Spice
    7              0.001409 au BufNewFile,BufRead *.sp,*.spice		setf spice
                            
                            " Spyce
    7              0.001412 au BufNewFile,BufRead *.spy,*.spi		setf spyce
                            
                            " Squid
    7              0.000751 au BufNewFile,BufRead squid.conf		setf squid
                            
                            " SQL for Oracle Designer
    7              0.003435 au BufNewFile,BufRead *.tyb,*.typ,*.tyc,*.pkb,*.pks	setf sql
                            
                            " SQL
    7              0.000776 au BufNewFile,BufRead *.sql			call s:SQL()
                            
    7              0.000018 func! s:SQL()
                              if exists("g:filetype_sql")
                                exe "setf " . g:filetype_sql
                              else
                                setf sql
                              endif
                            endfunc
                            
                            " SQLJ
    7              0.000767 au BufNewFile,BufRead *.sqlj			setf sqlj
                            
                            " SQR
    7              0.001408 au BufNewFile,BufRead *.sqr,*.sqi		setf sqr
                            
                            " OpenSSH configuration
    7              0.001407 au BufNewFile,BufRead ssh_config,*/.ssh/config	setf sshconfig
                            
                            " OpenSSH server configuration
    7              0.000744 au BufNewFile,BufRead sshd_config		setf sshdconfig
                            
                            " Stata
    7              0.003444 au BufNewFile,BufRead *.ado,*.class,*.do,*.imata,*.mata   setf stata
                            
                            " SMCL
    7              0.002062 au BufNewFile,BufRead *.hlp,*.ihlp,*.smcl	setf smcl
                            
                            " Stored Procedures
    7              0.000731 au BufNewFile,BufRead *.stp			setf stp
                            
                            " Standard ML
    7              0.000722 au BufNewFile,BufRead *.sml			setf sml
                            
                            " Sratus VOS command macro
    7              0.000727 au BufNewFile,BufRead *.cm			setf voscm
                            
                            " Sysctl
    7              0.001450 au BufNewFile,BufRead */etc/sysctl.conf,*/etc/sysctl.d/*.conf	setf sysctl
                            
                            " Synopsys Design Constraints
    7              0.000733 au BufNewFile,BufRead *.sdc			setf sdc
                            
                            " Sudoers
    7              0.001422 au BufNewFile,BufRead */etc/sudoers,sudoers.tmp	setf sudoers
                            
                            " SVG (Scalable Vector Graphics)
    7              0.000734 au BufNewFile,BufRead *.svg			setf svg
                            
                            " If the file has an extension of 't' and is in a directory 't' or 'xt' then
                            " it is almost certainly a Perl test file.
                            " If the first line starts with '#' and contains 'perl' it's probably a Perl
                            " file.
                            " (Slow test) If a file contains a 'use' statement then it is almost certainly
                            " a Perl file.
    7              0.000019 func! s:FTperl()
                              let dirname = expand("%:p:h:t")
                              if expand("%:e") == 't' && (dirname == 't' || dirname == 'xt')
                                setf perl
                                return 1
                              endif
                              if getline(1)[0] == '#' && getline(1) =~ 'perl'
                                setf perl
                                return 1
                              endif
                              if search('^use\s\s*\k', 'nc', 30)
                                setf perl
                                return 1
                              endif
                              return 0
                            endfunc
                            
                            " Tads (or Nroff or Perl test file)
    7              0.000737 au BufNewFile,BufRead *.t
                            	\ if !s:FTnroff() && !s:FTperl() | setf tads | endif
                            
                            " Tags
    7              0.000730 au BufNewFile,BufRead tags			setf tags
                            
                            " TAK
    7              0.000740 au BufNewFile,BufRead *.tak			setf tak
                            
                            " Task
    7              0.000751 au BufRead,BufNewFile {pending,completed,undo}.data  setf taskdata
    7              0.000730 au BufRead,BufNewFile *.task			setf taskedit
                            
                            " Tcl (JACL too)
    7              0.003354 au BufNewFile,BufRead *.tcl,*.tk,*.itcl,*.itk,*.jacl	setf tcl
                            
                            " TealInfo
    7              0.000741 au BufNewFile,BufRead *.tli			setf tli
                            
                            " Telix Salt
    7              0.000773 au BufNewFile,BufRead *.slt			setf tsalt
                            
                            " Terminfo
    7              0.000789 au BufNewFile,BufRead *.ti			setf terminfo
                            
                            " TeX
    7              0.003429 au BufNewFile,BufRead *.latex,*.sty,*.dtx,*.ltx,*.bbl	setf tex
    7              0.000736 au BufNewFile,BufRead *.tex			call s:FTtex()
                            
                            " Choose context, plaintex, or tex (LaTeX) based on these rules:
                            " 1. Check the first line of the file for "%&<format>".
                            " 2. Check the first 1000 non-comment lines for LaTeX or ConTeXt keywords.
                            " 3. Default to "latex" or to g:tex_flavor, can be set in user's vimrc.
    7              0.000016 func! s:FTtex()
                              let firstline = getline(1)
                              if firstline =~ '^%&\s*\a\+'
                                let format = tolower(matchstr(firstline, '\a\+'))
                                let format = substitute(format, 'pdf', '', '')
                                if format == 'tex'
                                  let format = 'plain'
                                endif
                              else
                                " Default value, may be changed later:
                                let format = exists("g:tex_flavor") ? g:tex_flavor : 'plain'
                                " Save position, go to the top of the file, find first non-comment line.
                                let save_cursor = getpos('.')
                                call cursor(1,1)
                                let firstNC = search('^\s*[^[:space:]%]', 'c', 1000)
                                if firstNC " Check the next thousand lines for a LaTeX or ConTeXt keyword.
                                  let lpat = 'documentclass\>\|usepackage\>\|begin{\|newcommand\>\|renewcommand\>'
                                  let cpat = 'start\a\+\|setup\a\+\|usemodule\|enablemode\|enableregime\|setvariables\|useencoding\|usesymbols\|stelle\a\+\|verwende\a\+\|stel\a\+\|gebruik\a\+\|usa\a\+\|imposta\a\+\|regle\a\+\|utilisemodule\>'
                                  let kwline = search('^\s*\\\%(' . lpat . '\)\|^\s*\\\(' . cpat . '\)',
                            			      \ 'cnp', firstNC + 1000)
                                  if kwline == 1	" lpat matched
                            	let format = 'latex'
                                  elseif kwline == 2	" cpat matched
                            	let format = 'context'
                                  endif		" If neither matched, keep default set above.
                                  " let lline = search('^\s*\\\%(' . lpat . '\)', 'cn', firstNC + 1000)
                                  " let cline = search('^\s*\\\%(' . cpat . '\)', 'cn', firstNC + 1000)
                                  " if cline > 0
                                  "   let format = 'context'
                                  " endif
                                  " if lline > 0 && (cline == 0 || cline > lline)
                                  "   let format = 'tex'
                                  " endif
                                endif " firstNC
                                call setpos('.', save_cursor)
                              endif " firstline =~ '^%&\s*\a\+'
                            
                              " Translation from formats to file types.  TODO:  add AMSTeX, RevTex, others?
                              if format == 'plain'
                                setf plaintex
                              elseif format == 'context'
                                setf context
                              else " probably LaTeX
                                setf tex
                              endif
                              return
                            endfunc
                            
                            " ConTeXt
    7              0.002084 au BufNewFile,BufRead tex/context/*/*.tex,*.mkii,*.mkiv   setf context
                            
                            " Texinfo
    7              0.002062 au BufNewFile,BufRead *.texinfo,*.texi,*.txi	setf texinfo
                            
                            " TeX configuration
    7              0.000738 au BufNewFile,BufRead texmf.cnf			setf texmf
                            
                            " Tidy config
    7              0.001390 au BufNewFile,BufRead .tidyrc,tidyrc		setf tidy
                            
                            " TF mud client
    7              0.002066 au BufNewFile,BufRead *.tf,.tfrc,tfrc		setf tf
                            
                            " TPP - Text Presentation Program
    7              0.000748 au BufNewFile,BufReadPost *.tpp			setf tpp
                            
                            " Treetop
    7              0.000728 au BufRead,BufNewFile *.treetop			setf treetop
                            
                            " Trustees
    7              0.000708 au BufNewFile,BufRead trustees.conf		setf trustees
                            
                            " TSS - Geometry
    7              0.000731 au BufNewFile,BufReadPost *.tssgm		setf tssgm
                            
                            " TSS - Optics
    7              0.000729 au BufNewFile,BufReadPost *.tssop		setf tssop
                            
                            " TSS - Command Line (temporary)
    7              0.000719 au BufNewFile,BufReadPost *.tsscl		setf tsscl
                            
                            " TWIG files
    7              0.000723 au BufNewFile,BufReadPost *.twig		setf twig
                            
                            " Motif UIT/UIL files
    7              0.001417 au BufNewFile,BufRead *.uit,*.uil		setf uil
                            
                            " Udev conf
    7              0.000749 au BufNewFile,BufRead */etc/udev/udev.conf	setf udevconf
                            
                            " Udev permissions
    7              0.000756 au BufNewFile,BufRead */etc/udev/permissions.d/*.permissions setf udevperm
                            "
                            " Udev symlinks config
    7              0.000741 au BufNewFile,BufRead */etc/udev/cdsymlinks.conf	setf sh
                            
                            " UnrealScript
    7              0.000713 au BufNewFile,BufRead *.uc			setf uc
                            
                            " Updatedb
    7              0.000735 au BufNewFile,BufRead */etc/updatedb.conf	setf updatedb
                            
                            " Upstart (init(8)) config files
    7              0.000736 au BufNewFile,BufRead */usr/share/upstart/*.conf	       setf upstart
    7              0.000776 au BufNewFile,BufRead */usr/share/upstart/*.override	       setf upstart
    7              0.001437 au BufNewFile,BufRead */etc/init/*.conf,*/etc/init/*.override  setf upstart
    7              0.001402 au BufNewFile,BufRead */.init/*.conf,*/.init/*.override        setf upstart
    7              0.000745 au BufNewFile,BufRead */.config/upstart/*.conf		       setf upstart
    7              0.000737 au BufNewFile,BufRead */.config/upstart/*.override	       setf upstart
                            
                            " Vera
    7              0.002090 au BufNewFile,BufRead *.vr,*.vri,*.vrh		setf vera
                            
                            " Verilog HDL
    7              0.000717 au BufNewFile,BufRead *.v			setf verilog
                            
                            " Verilog-AMS HDL
    7              0.001386 au BufNewFile,BufRead *.va,*.vams		setf verilogams
                            
                            " SystemVerilog
    7              0.001448 au BufNewFile,BufRead *.sv,*.svh		setf systemverilog
                            
                            " VHDL
    7              0.003497 au BufNewFile,BufRead *.hdl,*.vhd,*.vhdl,*.vbe,*.vst  setf vhdl
    7              0.000765 au BufNewFile,BufRead *.vhdl_[0-9]*		call s:StarSetf('vhdl')
                            
                            " Vim script
    7              0.002947 au BufNewFile,BufRead *.vim,*.vba,.exrc,_exrc	setf vim
                            
                            " Viminfo file
    7              0.001416 au BufNewFile,BufRead .viminfo,_viminfo		setf viminfo
                            
                            " Virata Config Script File or Drupal module
    7              0.002107 au BufRead,BufNewFile *.hw,*.module,*.pkg
                            	\ if getline(1) =~ '<?php' |
                            	\   setf php |
                            	\ else |
                            	\   setf virata |
                            	\ endif
                            
                            " Visual Basic (also uses *.bas) or FORM
    7              0.000721 au BufNewFile,BufRead *.frm			call s:FTVB("form")
                            
                            " SaxBasic is close to Visual Basic
    7              0.000955 au BufNewFile,BufRead *.sba			setf vb
                            
                            " Vgrindefs file
    7              0.000742 au BufNewFile,BufRead vgrindefs			setf vgrindefs
                            
                            " VRML V1.0c
    7              0.000741 au BufNewFile,BufRead *.wrl			setf vrml
                            
                            " Webmacro
    7              0.000746 au BufNewFile,BufRead *.wm			setf webmacro
                            
                            " Wget config
    7              0.001423 au BufNewFile,BufRead .wgetrc,wgetrc		setf wget
                            
                            " Website MetaLanguage
    7              0.000814 au BufNewFile,BufRead *.wml			setf wml
                            
                            " Winbatch
    7              0.000742 au BufNewFile,BufRead *.wbt			setf winbatch
                            
                            " WSML
    7              0.000749 au BufNewFile,BufRead *.wsml			setf wsml
                            
                            " WvDial
    7              0.001515 au BufNewFile,BufRead wvdial.conf,.wvdialrc	setf wvdial
                            
                            " CVS RC file
    7              0.000762 au BufNewFile,BufRead .cvsrc			setf cvsrc
                            
                            " CVS commit file
    7              0.000748 au BufNewFile,BufRead cvs\d\+			setf cvs
                            
                            " WEB (*.web is also used for Winbatch: Guess, based on expecting "%" comment
                            " lines in a WEB file).
    7              0.000782 au BufNewFile,BufRead *.web
                            	\ if getline(1)[0].getline(2)[0].getline(3)[0].getline(4)[0].getline(5)[0] =~ "%" |
                            	\   setf web |
                            	\ else |
                            	\   setf winbatch |
                            	\ endif
                            
                            " Windows Scripting Host and Windows Script Component
    7              0.000746 au BufNewFile,BufRead *.ws[fc]			setf wsh
                            
                            " XHTML
    7              0.001427 au BufNewFile,BufRead *.xhtml,*.xht		setf xhtml
                            
                            " X Pixmap (dynamically sets colors, use BufEnter to make it work better)
    7              0.000054 au BufEnter *.xpm
                            	\ if getline(1) =~ "XPM2" |
                            	\   setf xpm2 |
                            	\ else |
                            	\   setf xpm |
                            	\ endif
    7              0.000022 au BufEnter *.xpm2				setf xpm2
                            
                            " XFree86 config
    7              0.000760 au BufNewFile,BufRead XF86Config
                            	\ if getline(1) =~ '\<XConfigurator\>' |
                            	\   let b:xf86conf_xfree86_version = 3 |
                            	\ endif |
                            	\ setf xf86conf
    7              0.000763 au BufNewFile,BufRead */xorg.conf.d/*.conf
                            	\ let b:xf86conf_xfree86_version = 4 |
                            	\ setf xf86conf
                            
                            " Xorg config
    7              0.001428 au BufNewFile,BufRead xorg.conf,xorg.conf-4	let b:xf86conf_xfree86_version = 4 | setf xf86conf
                            
                            " Xinetd conf
    7              0.000748 au BufNewFile,BufRead */etc/xinetd.conf		setf xinetd
                            
                            " XS Perl extension interface language
    7              0.000729 au BufNewFile,BufRead *.xs			setf xs
                            
                            " X resources file
    7              0.003373 au BufNewFile,BufRead .Xdefaults,.Xpdefaults,.Xresources,xdm-config,*.ad setf xdefaults
                            
                            " Xmath
    7              0.001441 au BufNewFile,BufRead *.msc,*.msf		setf xmath
    7              0.000736 au BufNewFile,BufRead *.ms
                            	\ if !s:FTnroff() | setf xmath | endif
                            
                            " XML  specific variants: docbk and xbl
    7              0.000750 au BufNewFile,BufRead *.xml			call s:FTxml()
                            
    7              0.000030 func! s:FTxml()
                              let n = 1
                              while n < 100 && n < line("$")
                                let line = getline(n)
                                " DocBook 4 or DocBook 5.
                                let is_docbook4 = line =~ '<!DOCTYPE.*DocBook'
                                let is_docbook5 = line =~ ' xmlns="http://docbook.org/ns/docbook"'
                                if is_docbook4 || is_docbook5
                                  let b:docbk_type = "xml"
                                  if is_docbook5
                            	let b:docbk_ver = 5
                                  else
                            	let b:docbk_ver = 4
                                  endif
                                  setf docbk
                                  return
                                endif
                                if line =~ 'xmlns:xbl="http://www.mozilla.org/xbl"'
                                  setf xbl
                                  return
                                endif
                                let n += 1
                              endwhile
                              setf xml
                            endfunc
                            
                            " XMI (holding UML models) is also XML
    7              0.000752 au BufNewFile,BufRead *.xmi			setf xml
                            
                            " CSPROJ files are Visual Studio.NET's XML-based project config files
    7              0.001411 au BufNewFile,BufRead *.csproj,*.csproj.user	setf xml
                            
                            " Qt Linguist translation source and Qt User Interface Files are XML
    7              0.001379 au BufNewFile,BufRead *.ts,*.ui			setf xml
                            
                            " TPM's are RDF-based descriptions of TeX packages (Nikolai Weibull)
    7              0.000758 au BufNewFile,BufRead *.tpm			setf xml
                            
                            " Xdg menus
    7              0.000754 au BufNewFile,BufRead */etc/xdg/menus/*.menu	setf xml
                            
                            " ATI graphics driver configuration
    7              0.000745 au BufNewFile,BufRead fglrxrc			setf xml
                            
                            " XLIFF (XML Localisation Interchange File Format) is also XML
    7              0.000751 au BufNewFile,BufRead *.xlf			setf xml
    7              0.000742 au BufNewFile,BufRead *.xliff			setf xml
                            
                            " XML User Interface Language
    7              0.000744 au BufNewFile,BufRead *.xul			setf xml
                            
                            " X11 xmodmap (also see below)
    7              0.000745 au BufNewFile,BufRead *Xmodmap			setf xmodmap
                            
                            " Xquery
    7              0.003427 au BufNewFile,BufRead *.xq,*.xql,*.xqm,*.xquery,*.xqy	setf xquery
                            
                            " XSD
    7              0.000745 au BufNewFile,BufRead *.xsd			setf xsd
                            
                            " Xslt
    7              0.001413 au BufNewFile,BufRead *.xsl,*.xslt		setf xslt
                            
                            " Yacc
    7              0.002088 au BufNewFile,BufRead *.yy,*.yxx,*.y++		setf yacc
                            
                            " Yacc or racc
    7              0.000727 au BufNewFile,BufRead *.y			call s:FTy()
                            
    7              0.000015 func! s:FTy()
                              let n = 1
                              while n < 100 && n < line("$")
                                let line = getline(n)
                                if line =~ '^\s*%'
                                  setf yacc
                                  return
                                endif
                                if getline(n) =~ '^\s*\(#\|class\>\)' && getline(n) !~ '^\s*#\s*include'
                                  setf racc
                                  return
                                endif
                                let n = n + 1
                              endwhile
                              setf yacc
                            endfunc
                            
                            
                            " Yaml
    7              0.001426 au BufNewFile,BufRead *.yaml,*.yml		setf yaml
                            
                            " yum conf (close enough to dosini)
    7              0.000767 au BufNewFile,BufRead */etc/yum.conf		setf dosini
                            
                            " Zimbu
    7              0.000748 au BufNewFile,BufRead *.zu			setf zimbu
                            
                            " Zope
                            "   dtml (zope dynamic template markup language), pt (zope page template),
                            "   cpt (zope form controller page template)
    7              0.002097 au BufNewFile,BufRead *.dtml,*.pt,*.cpt		call s:FThtml()
                            "   zsql (zope sql method)
    7              0.000770 au BufNewFile,BufRead *.zsql			call s:SQL()
                            
                            " Z80 assembler asz80
    7              0.000760 au BufNewFile,BufRead *.z8a			setf z8a
                            
    7              0.000013 augroup END
                            
                            
                            " Source the user-specified filetype file, for backwards compatibility with
                            " Vim 5.x.
    7              0.000059 if exists("myfiletypefile") && filereadable(expand(myfiletypefile))
                              execute "source " . myfiletypefile
                            endif
                            
                            
                            " Check for "*" after loading myfiletypefile, so that scripts.vim is only used
                            " when there are no matching file name extensions.
                            " Don't do this for compressed files.
    7              0.000012 augroup filetypedetect
    7              0.000867 au BufNewFile,BufRead *
                            	\ if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat
                            	\ | runtime! scripts.vim | endif
    7              0.000044 au StdinReadPost * if !did_filetype() | runtime! scripts.vim | endif
                            
                            
                            " Extra checks for when no filetype has been detected now.  Mostly used for
                            " patterns that end in "*".  E.g., "zsh*" matches "zsh.vim", but that's a Vim
                            " script file.
                            " Most of these should call s:StarSetf() to avoid names ending in .gz and the
                            " like are used.
                            
                            " More Apache config files
    7              0.003460 au BufNewFile,BufRead access.conf*,apache.conf*,apache2.conf*,httpd.conf*,srm.conf*	call s:StarSetf('apache')
    7              0.003460 au BufNewFile,BufRead */etc/apache2/*.conf*,*/etc/apache2/conf.*/*,*/etc/apache2/mods-*/*,*/etc/apache2/sites-*/*,*/etc/httpd/conf.d/*.conf*		call s:StarSetf('apache')
                            
                            " Asterisk config file
    7              0.000769 au BufNewFile,BufRead *asterisk/*.conf*		call s:StarSetf('asterisk')
    7              0.000766 au BufNewFile,BufRead *asterisk*/*voicemail.conf* call s:StarSetf('asteriskvm')
                            
                            " Bazaar version control
    7              0.000751 au BufNewFile,BufRead bzr_log.*			setf bzr
                            
                            " BIND zone
    7              0.001430 au BufNewFile,BufRead */named/db.*,*/bind/db.*	call s:StarSetf('bindzone')
                            
                            " Calendar
    7              0.002130 au BufNewFile,BufRead */.calendar/*,
                            	\*/share/calendar/*/calendar.*,*/share/calendar/calendar.*
                            	\					call s:StarSetf('calendar')
                            
                            " Changelog
    7              0.000792 au BufNewFile,BufRead [cC]hange[lL]og*
                            	\ if getline(1) =~ '; urgency='
                            	\|  call s:StarSetf('debchangelog')
                            	\|else
                            	\|  call s:StarSetf('changelog')
                            	\|endif
                            
                            " Crontab
    7              0.002123 au BufNewFile,BufRead crontab,crontab.*,*/etc/cron.d/*		call s:StarSetf('crontab')
                            
                            " dnsmasq(8) configuration
    7              0.000764 au BufNewFile,BufRead */etc/dnsmasq.d/*		call s:StarSetf('dnsmasq')
                            
                            " Dracula
    7              0.000748 au BufNewFile,BufRead drac.*			call s:StarSetf('dracula')
                            
                            " Fvwm
    7              0.000759 au BufNewFile,BufRead */.fvwm/*			call s:StarSetf('fvwm')
    7              0.001479 au BufNewFile,BufRead *fvwmrc*,*fvwm95*.hook
                            	\ let b:fvwm_version = 1 | call s:StarSetf('fvwm')
    7              0.000796 au BufNewFile,BufRead *fvwm2rc*
                            	\ if expand("<afile>:e") == "m4"
                            	\|  call s:StarSetf('fvwm2m4')
                            	\|else
                            	\|  let b:fvwm_version = 2 | call s:StarSetf('fvwm')
                            	\|endif
                            
                            " Gedcom
    7              0.000767 au BufNewFile,BufRead */tmp/lltmp*		call s:StarSetf('gedcom')
                            
                            " GTK RC
    7              0.001469 au BufNewFile,BufRead .gtkrc*,gtkrc*		call s:StarSetf('gtkrc')
                            
                            " Jam
    7              0.001436 au BufNewFile,BufRead Prl*.*,JAM*.*		call s:StarSetf('jam')
                            
                            " Jargon
    7              0.000780 au! BufNewFile,BufRead *jarg*
                            	\ if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'THIS IS THE JARGON FILE'
                            	\|  call s:StarSetf('jargon')
                            	\|endif
                            
                            " Kconfig
    7              0.000989 au BufNewFile,BufRead Kconfig.*			call s:StarSetf('kconfig')
                            
                            " Lilo: Linux loader
    7              0.000865 au BufNewFile,BufRead lilo.conf*		call s:StarSetf('lilo')
                            
                            " Logcheck
    7              0.000878 au BufNewFile,BufRead */etc/logcheck/*.d*/*	call s:StarSetf('logcheck')
                            
                            " Makefile
    7              0.000868 au BufNewFile,BufRead [mM]akefile*		call s:StarSetf('make')
                            
                            " Ruby Makefile
    7              0.000860 au BufNewFile,BufRead [rR]akefile*		call s:StarSetf('ruby')
                            
                            " Mail (also matches muttrc.vim, so this is below the other checks)
    7              0.000948 au BufNewFile,BufRead mutt[[:alnum:]._-]\\\{6\}	setf mail
                            
                            " Modconf
    7              0.001085 au BufNewFile,BufRead */etc/modutils/*
                            	\ if executable(expand("<afile>")) != 1
                            	\|  call s:StarSetf('modconf')
                            	\|endif
    7              0.000952 au BufNewFile,BufRead */etc/modprobe.*		call s:StarSetf('modconf')
                            
                            " Mutt setup file
    7              0.001823 au BufNewFile,BufRead .mutt{ng,}rc*,*/.mutt{ng,}/mutt{ng,}rc*	call s:StarSetf('muttrc')
    7              0.001649 au BufNewFile,BufRead mutt{ng,}rc*,Mutt{ng,}rc*		call s:StarSetf('muttrc')
                            
                            " Nroff macros
    7              0.000862 au BufNewFile,BufRead tmac.*			call s:StarSetf('nroff')
                            
                            " Pam conf
    7              0.000875 au BufNewFile,BufRead */etc/pam.d/*		call s:StarSetf('pamconf')
                            
                            " Printcap and Termcap
    7              0.000887 au BufNewFile,BufRead *printcap*
                            	\ if !did_filetype()
                            	\|  let b:ptcap_type = "print" | call s:StarSetf('ptcap')
                            	\|endif
    7              0.000884 au BufNewFile,BufRead *termcap*
                            	\ if !did_filetype()
                            	\|  let b:ptcap_type = "term" | call s:StarSetf('ptcap')
                            	\|endif
                            
                            " ReDIF
                            " Only used when the .rdf file was not detected to be XML.
    7              0.000883 au BufRead,BufNewFile *.rdf			call s:Redif()
    7              0.000031 func! s:Redif()
                              let lnum = 1
                              while lnum <= 5 && lnum < line('$')
                                if getline(lnum) =~ "^\ctemplate-type:"
                                  setf redif
                                  return
                                endif
                                let lnum = lnum + 1
                              endwhile
                            endfunc
                            
                            " Remind
    7              0.000886 au BufNewFile,BufRead .reminders*		call s:StarSetf('remind')
                            
                            " Vim script
    7              0.000908 au BufNewFile,BufRead *vimrc*			call s:StarSetf('vim')
                            
                            " Subversion commit file
    7              0.000817 au BufNewFile,BufRead svn-commit*.tmp		setf svn
                            
                            " X resources file
    7              0.002291 au BufNewFile,BufRead Xresources*,*/app-defaults/*,*/Xresources/* call s:StarSetf('xdefaults')
                            
                            " XFree86 config
    7              0.000843 au BufNewFile,BufRead XF86Config-4*
                            	\ let b:xf86conf_xfree86_version = 4 | call s:StarSetf('xf86conf')
    7              0.000835 au BufNewFile,BufRead XF86Config*
                            	\ if getline(1) =~ '\<XConfigurator\>'
                            	\|  let b:xf86conf_xfree86_version = 3
                            	\|endif
                            	\|call s:StarSetf('xf86conf')
                            
                            " X11 xmodmap
    7              0.000807 au BufNewFile,BufRead *xmodmap*			call s:StarSetf('xmodmap')
                            
                            " Xinetd conf
    7              0.000867 au BufNewFile,BufRead */etc/xinetd.d/*		call s:StarSetf('xinetd')
                            
                            " yum conf (close enough to dosini)
    7              0.000818 au BufNewFile,BufRead */etc/yum.repos.d/*	call s:StarSetf('dosini')
                            
                            " Z-Shell script
    7              0.001549 au BufNewFile,BufRead zsh*,zlog*		call s:StarSetf('zsh')
                            
                            
                            " Plain text files, needs to be far down to not override others.  This avoids
                            " the "conf" type being used if there is a line starting with '#'.
    7              0.001574 au BufNewFile,BufRead *.txt,*.text		setf text
                            
                            
                            " Use the filetype detect plugins.  They may overrule any of the previously
                            " detected filetypes.
    7              0.002216 runtime! ftdetect/*.vim
                            
                            " NOTE: The above command could have ended the filetypedetect autocmd group
                            " and started another one. Let's make sure it has ended to get to a consistent
                            " state.
    7              0.000009 augroup END
                            
                            " Generic configuration file (check this last, it's just guessing!)
    7              0.000841 au filetypedetect BufNewFile,BufRead,StdinReadPost *
                            	\ if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat
                            	\    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'
                            	\	|| getline(4) =~ '^#' || getline(5) =~ '^#') |
                            	\   setf conf |
                            	\ endif
                            
                            
                            " If the GUI is already running, may still need to install the Syntax menu.
                            " Don't do it when the 'M' flag is included in 'guioptions'.
    7              0.000071 if has("menu") && has("gui_running")
                                  \ && !exists("did_install_syntax_menu") && &guioptions !~# "M"
                              source <sfile>:p:h/menu.vim
                            endif
                            
                            " Function called for testing all functions defined here.  These are
                            " script-local, thus need to be executed here.
                            " Returns a string with error messages (hopefully empty).
    7              0.000020 func! TestFiletypeFuncs(testlist)
                              let output = ''
                              for f in a:testlist
                                try
                                  exe f
                                catch
                                  let output = output . "\n" . f . ": " . v:exception
                                endtry
                              endfor
                              return output
                            endfunc
                            
                            " Restore 'cpoptions'
    7              0.000084 let &cpo = s:cpo_save
    7              0.000028 unlet s:cpo_save

SCRIPT  /Users/jjcall/Src/dotfiles/vim/bundle/ultisnips/ftdetect/snippets.vim
Sourced 7 times
Total time:   0.000993
 Self time:   0.000993

count  total (s)   self (s)
                            " recognize .snippet files
    7              0.000050 if has("autocmd")
    7              0.000901     autocmd BufNewFile,BufRead *.snippets setf snippets
    7              0.000022 endif

SCRIPT  /Users/jjcall/Src/dotfiles/vim/bundle/ultisnips/ftdetect/UltiSnips.vim
Sourced 7 times
Total time:   0.001085
 Self time:   0.001085

count  total (s)   self (s)
                            " This has to be called before ftplugins are loaded. Therefore
                            " it is here in ftdetect though it maybe shouldn't
    7              0.000026 if has("autocmd")
    7              0.000028    augroup UltiSnipsFileType
    7              0.000936       au!
    7              0.000046       autocmd FileType * call UltiSnips#FileTypeChanged()
    7              0.000011    augroup END
    7              0.000015 endif

SCRIPT  /Users/jjcall/Src/dotfiles/vim/bundle/vim-ruby/ftdetect/ruby.vim
Sourced 7 times
Total time:   0.028773
 Self time:   0.028773

count  total (s)   self (s)
                            function! s:setf(filetype) abort
                              if &filetype !=# a:filetype
                                let &filetype = a:filetype
                              endif
                            endfunction
                            
                            " Ruby
    7              0.002365 au BufNewFile,BufRead *.rb,*.rbw,*.gemspec	call s:setf('ruby')
                            
                            " Ruby on Rails
    7              0.002943 au BufNewFile,BufRead *.builder,*.rxml,*.rjs,*.ruby call s:setf('ruby')
                            
                            " Rakefile
    7              0.001550 au BufNewFile,BufRead [rR]akefile,*.rake	call s:setf('ruby')
                            
                            " Rantfile
    7              0.001514 au BufNewFile,BufRead [rR]antfile,*.rant	call s:setf('ruby')
                            
                            " IRB config
    7              0.001518 au BufNewFile,BufRead .irbrc,irbrc		call s:setf('ruby')
                            
                            " Pry config
    7              0.000794 au BufNewFile,BufRead .pryrc			call s:setf('ruby')
                            
                            " Rackup
    7              0.000793 au BufNewFile,BufRead *.ru			call s:setf('ruby')
                            
                            " Capistrano
    7              0.001516 au BufNewFile,BufRead Capfile,*.cap 		call s:setf('ruby')
                            
                            " Bundler
    7              0.000800 au BufNewFile,BufRead Gemfile			call s:setf('ruby')
                            
                            " Guard
    7              0.001554 au BufNewFile,BufRead Guardfile,.Guardfile	call s:setf('ruby')
                            
                            " Chef
    7              0.000800 au BufNewFile,BufRead Cheffile			call s:setf('ruby')
    7              0.000997 au BufNewFile,BufRead Berksfile			call s:setf('ruby')
                            
                            " Vagrant
    7              0.000880 au BufNewFile,BufRead [vV]agrantfile		call s:setf('ruby')
                            
                            " Autotest
    7              0.000882 au BufNewFile,BufRead .autotest			call s:setf('ruby')
                            
                            " eRuby
    7              0.001641 au BufNewFile,BufRead *.erb,*.rhtml		call s:setf('eruby')
                            
                            " Thor
    7              0.001673 au BufNewFile,BufRead [tT]horfile,*.thor	call s:setf('ruby')
                            
                            " Rabl
    7              0.000866 au BufNewFile,BufRead *.rabl			call s:setf('ruby')
                            
                            " Jbuilder
    7              0.000875 au BufNewFile,BufRead *.jbuilder		call s:setf('ruby')
                            
                            " Puppet librarian
    7              0.000874 au BufNewFile,BufRead Puppetfile		call s:setf('ruby')
                            "
                            " Buildr Buildfile
    7              0.000973 au BufNewFile,BufRead [Bb]uildfile		call s:setf('ruby')
                            
                            " Appraisal
    7              0.000949 au BufNewFile,BufRead Appraisals		call s:setf('ruby')
                            
                            " CocoaPods
    7              0.001672 au BufNewFile,BufRead Podfile,*.podspec		call s:setf('ruby')
                            
                            " vim: nowrap sw=2 sts=2 ts=8 noet:

SCRIPT  /Users/jjcall/Src/dotfiles/vim/bundle/vim-haml/ftdetect/haml.vim
Sourced 7 times
Total time:   0.004380
 Self time:   0.004380

count  total (s)   self (s)
                            autocmd BufNewFile,BufRead *.haml,*.hamlbars,*.hamlc setf haml
    7              0.000913 autocmd BufNewFile,BufRead *.sass setf sass
    7              0.000855 autocmd BufNewFile,BufRead *.scss setf scss

SCRIPT  /Users/jjcall/Src/dotfiles/vim/bundle/vim-javascript/ftdetect/javascript.vim
Sourced 7 times
Total time:   0.003391
 Self time:   0.003391

count  total (s)   self (s)
                            au BufNewFile,BufRead *.js setf javascript
    7              0.000810 au BufNewFile,BufRead *.jsm setf javascript
    7              0.000817 au BufNewFile,BufRead Jakefile setf javascript
                            
    7              0.000032 fun! s:SelectJavascript()
                              if getline(1) =~# '^#!.*/bin/env\s\+node\>'
                                set ft=javascript
                              endif
                            endfun
    7              0.000822 au BufNewFile,BufRead * call s:SelectJavascript()

SCRIPT  /Users/jjcall/Src/dotfiles/vim/bundle/vim-coffee-script/ftdetect/coffee.vim
Sourced 7 times
Total time:   0.004969
 Self time:   0.004969

count  total (s)   self (s)
                            " Language:    CoffeeScript
                            " Maintainer:  Mick Koch <kchmck@gmail.com>
                            " URL:         http://github.com/kchmck/vim-coffee-script
                            " License:     WTFPL
                            
    7              0.000842 autocmd BufNewFile,BufRead *.coffee set filetype=coffee
    7              0.000831 autocmd BufNewFile,BufRead *Cakefile set filetype=coffee
    7              0.001559 autocmd BufNewFile,BufRead *.coffeekup,*.ck set filetype=coffee
    7              0.000809 autocmd BufNewFile,BufRead *._coffee set filetype=coffee
                            
    7              0.000024 function! s:DetectCoffee()
                                if getline(1) =~ '^#!.*\<coffee\>'
                                    set filetype=coffee
                                endif
                            endfunction
                            
    7              0.000825 autocmd BufNewFile,BufRead * call s:DetectCoffee()

SCRIPT  /Users/jjcall/Src/dotfiles/vim/bundle/vim-json/ftdetect/json.vim
Sourced 7 times
Total time:   0.001816
 Self time:   0.001816

count  total (s)   self (s)
                            autocmd BufNewFile,BufRead *.json set filetype=json
                            
    7              0.000013 augroup json_autocmd
    7              0.000856   autocmd!
    7              0.000041   autocmd FileType json setlocal autoindent
    7              0.000019   autocmd FileType json setlocal formatoptions=tcq2l
    7              0.000017   autocmd FileType json setlocal foldmethod=syntax
    7              0.000017 augroup END

SCRIPT  /Users/jjcall/Src/dotfiles/vim/bundle/vim-mustache-handlebars/ftdetect/mustache.vim
Sourced 7 times
Total time:   0.004793
 Self time:   0.004793

count  total (s)   self (s)
                            if has("autocmd")
    7              0.004723   au  BufNewFile,BufRead *.mustache,*.handlebars,*.hbs,*.hogan,*.hulk,*.hjs set filetype=html syntax=mustache | runtime! ftplugin/mustache.vim ftplugin/mustache*.vim ftplugin/mustache/*.vim
    7              0.000024 endif

SCRIPT  /Users/jjcall/Src/dotfiles/vim/bundle/vim-markdown/ftdetect/markdown.vim
Sourced 7 times
Total time:   0.000888
 Self time:   0.000888

count  total (s)   self (s)
                            " Markdown
    7              0.000874 autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown

SCRIPT  /Users/jjcall/Src/dotfiles/vim/bundle/vim-less/ftdetect/less.vim
Sourced 7 times
Total time:   0.000835
 Self time:   0.000835

count  total (s)   self (s)

SCRIPT  /usr/local/Cellar/vim/7.4.335/share/vim/vim74/ftplugin.vim
Sourced 7 times
Total time:   0.000070
 Self time:   0.000070

count  total (s)   self (s)
                            " Vim support file to switch on loading plugins for file types
                            "
                            " Maintainer:	Bram Moolenaar <Bram@vim.org>
                            " Last change:	2006 Apr 30
                            
    7              0.000034 if exists("did_load_ftplugin")
    7              0.000009   finish

SCRIPT  /usr/local/Cellar/vim/7.4.335/share/vim/vim74/indent.vim
Sourced 7 times
Total time:   0.000060
 Self time:   0.000060

count  total (s)   self (s)
                            " Vim support file to switch on loading indent files for file types
                            "
                            " Maintainer:	Bram Moolenaar <Bram@vim.org>
                            " Last Change:	2008 Feb 22
                            
    7              0.000028 if exists("did_indent_on")
    7              0.000007   finish

SCRIPT  /Users/jjcall/Src/dotfiles/vim/platforms.vim
Sourced 7 times
Total time:   0.000119
 Self time:   0.000119

count  total (s)   self (s)
                            " MacVim
                            
                            " Hide toolbar in MacVim
    7              0.000034 if has('gui_running')
                              set guifont=Bitstream\ Vera\ Sans\ Mono\ for\ Powerline:h16
                              set guioptions=egmrt
                              set ttimeoutlen=10
                              augroup FastEscape
                              autocmd!
                              au InsertEnter * set timeoutlen=0
                              au InsertLeave * set timeoutlen=1000
                              augroup END
                            endif

SCRIPT  /Users/jjcall/Src/dotfiles/vim/config.vim
Sourced 7 times
Total time:   0.774706
 Self time:   0.004081

count  total (s)   self (s)
                            "-------------------------------------
                            " Vim setup
                            "-------------------------------------
                            
                            "-------------------------------------
                            " Color
                            "-------------------------------------
    7              0.000532 colorscheme Tomorrow-Night-Eighties
                            
                            "-------------------------------------
                            " Font
                            "-------------------------------------
    7              0.000029 set gfn=Bitstream\ Vera\ Sans\ Mono\ 10
                            
                            "-------------------------------------
                            " Backups, Tmp Files, and Undo
                            "-------------------------------------
    7              0.000018 set noswapfile
    7              0.000029 set directory=~/.vim/.tmp
    7              0.000286 set undofile
    7              0.000019 set undodir=~/.vimour.undo
    7              0.000015 set title			" Set the title of the window in term
                            
                            "-------------------------------------
                            " Behaviors
                            "-------------------------------------
    7              0.000468 syntax enable
    7              0.000040 set autoread			" Automatically reload changes if detected
    7              0.000012 set wildmenu			" Turn on wild menu
    7              0.000009 set hidden			" Change buffer without saving
    7              0.000017 set history=768			" Number of things to remember
    7              0.000021 set clipboard+=unnamed		" Yanks go on clipboard instead
    7              0.000008 set autowrite			" Writes on make/shell commands
    7              0.000013 set timeoutlen=350		" Time to wait for a command
    7              0.000011 set foldlevelstart=99		" Remove folds
    7              0.000459 set iskeyword+=$,@		" Add extra chars that are valid variable parts
    7              0.000011 set nostartofline		" Dont jump to start of line after commands
    7              0.000010 set scrolloff=5			" Keep three lines below everything
    7              0.000019 set shortmess+=A " Always edit file, even whe swap is present
    7              0.000008 set modifiable
                            
                            
                            "-------------------------------------
                            " Text Format
                            "-------------------------------------
    7              0.000011 set tabstop=2
    7              0.000015 set backspace=2			" Delete everything with backspace
    7              0.000013 set shiftwidth=2		" Tabs under smart indent
    7              0.000009 set cindent
    7              0.000009 set autoindent
    7              0.000007 set smarttab
    7              0.000009 set expandtab
    7              0.000015 set nowrap
                            
                            "-------------------------------------
                            " Searching
                            "-------------------------------------
    7              0.000009 set ignorecase			" Case insensitive search
    7              0.000009 set smartcase			" Non-case sensitive search
    7              0.000020 set incsearch
    7              0.000009 set hlsearch
    7              0.000053 set wildignore+=*.o,*.obj,*.exe,*.so,*.dll,*.pyc,.svn,.hg,.bzr,.git,
                              \.sass-cache,*.class,*.scssc,*.cssc,sprockets%*,*.lessc,
                              \.git,node_modules,_site,*.class,*.zip,*.aux
                            
                            
                            "-------------------------------------
                            " Visual 
    1              0.000001 "-------------------------------------
    6              0.000007 set showmatch			" Show matching brackets
                            "set number " Show line numbers
    1              0.000002 "set relativenumber
    7              0.000012 set matchtime=2			" How many tenths of a second to blink
    6              0.000008 set list
                            
    1              0.000002 " Reset the listchars
    6              0.000013 set listchars=""
    1              0.000003 " a tab should display as "  ", trailing whitespace as "."
    6              0.000015 set listchars=tab:\ \  " Indentended trailing whitespace
    1              0.000003 " show trailing spaces as dots
    6              0.000018 set listchars+=trail:.
                            " The character to show in the last column when wrap is off and the line
    1              0.000002 " continues beyond the right of the screen
    6              0.000014 set listchars+=extends:>
                            " The character to show in the last column when wrap is off and the line
    1              0.000002 " continues beyond the right of the screen
    7              0.000077 set listchars+=precedes:<
    7              0.000413 set nocompatible    " Disable vi-compatibiliy
    7              0.000088 set laststatus=2    " Always show the status line
    7              0.000469 set encoding=utf-8  " Necessary to show Unicode glyphs
    7              0.000046 set t_Co=256        " Explicitly tell Vim that the terminal supports 256 colors
    7              0.000029 set cursorline " highlight current line
    6              0.000019 set colorcolumn=80
                            
                            
                            "-------------------------------------
                            " Sound 
    1              0.000005 "-------------------------------------
    7              0.000041 set noerrorbells visualbell t_vb=
    7              0.000032 if has('autocmd')
    7              0.000037   autocmd GUIEnter * set visualbell t_vb=
    6              0.000004 endif
                            
                            "-------------------------------------
                            " Mouse 
    1              0.000001 "-------------------------------------
    7              0.000013 set mousehide		" Hide mouse after chars typed
    6              0.000024 set mouse=a			" Mouse in all modes

SCRIPT  /Users/jjcall/Src/dotfiles/vim/bundle/tomorrow-theme/vim/colors/Tomorrow-Night-Eighties.vim
Sourced 14 times
Total time:   0.646574
 Self time:   0.039268

count  total (s)   self (s)
                            " Tomorrow Night Eighties - Full Colour and 256 Colour
                            " http://chriskempson.com
                            "
                            " Hex colour conversion functions borrowed from the theme "Desert256""
                            
                            " Default GUI Colours
   14              0.000052 let s:foreground = "cccccc"
   14              0.000028 let s:background = "2d2d2d"
   14              0.000022 let s:selection = "515151"
   14              0.000019 let s:line = "393939"
   14              0.000022 let s:comment = "999999"
   14              0.000019 let s:red = "f2777a"
   14              0.000020 let s:orange = "f99157"
   14              0.000017 let s:yellow = "ffcc66"
   14              0.000019 let s:green = "99cc99"
   14              0.000017 let s:aqua = "009999"
   14              0.000016 let s:blue = "99cccc"
   14              0.000022 let s:purple = "cc99cc"
   14              0.000019 let s:window = "4d5057"
                            
   14              0.007515 hi clear
   14              0.004056 syntax reset
                            
   14              0.000047 let g:colors_name = "Tomorrow-Night-Eighties"
                            
   14              0.000079 if has("gui_running") || &t_Co == 88 || &t_Co == 256
                            	" Returns an approximate grey index for the given grey level
   14              0.000050 	fun <SID>grey_number(x)
                            		if &t_Co == 88
                            			if a:x < 23
                            				return 0
                            			elseif a:x < 69
                            				return 1
                            			elseif a:x < 103
                            				return 2
                            			elseif a:x < 127
                            				return 3
                            			elseif a:x < 150
                            				return 4
                            			elseif a:x < 173
                            				return 5
                            			elseif a:x < 196
                            				return 6
                            			elseif a:x < 219
                            				return 7
                            			elseif a:x < 243
                            				return 8
                            			else
                            				return 9
                            			endif
                            		else
                            			if a:x < 14
                            				return 0
                            			else
                            				let l:n = (a:x - 8) / 10
                            				let l:m = (a:x - 8) % 10
                            				if l:m < 5
                            					return l:n
                            				else
                            					return l:n + 1
                            				endif
                            			endif
                            		endif
                            	endfun
                            
                            	" Returns the actual grey level represented by the grey index
   14              0.000032 	fun <SID>grey_level(n)
                            		if &t_Co == 88
                            			if a:n == 0
                            				return 0
                            			elseif a:n == 1
                            				return 46
                            			elseif a:n == 2
                            				return 92
                            			elseif a:n == 3
                            				return 115
                            			elseif a:n == 4
                            				return 139
                            			elseif a:n == 5
                            				return 162
                            			elseif a:n == 6
                            				return 185
                            			elseif a:n == 7
                            				return 208
                            			elseif a:n == 8
                            				return 231
                            			else
                            				return 255
                            			endif
                            		else
                            			if a:n == 0
                            				return 0
                            			else
                            				return 8 + (a:n * 10)
                            			endif
                            		endif
                            	endfun
                            
                            	" Returns the palette index for the given grey index
   14              0.000028 	fun <SID>grey_colour(n)
                            		if &t_Co == 88
                            			if a:n == 0
                            				return 16
                            			elseif a:n == 9
                            				return 79
                            			else
                            				return 79 + a:n
                            			endif
                            		else
                            			if a:n == 0
                            				return 16
                            			elseif a:n == 25
                            				return 231
                            			else
                            				return 231 + a:n
                            			endif
                            		endif
                            	endfun
                            
                            	" Returns an approximate colour index for the given colour level
   14              0.000026 	fun <SID>rgb_number(x)
                            		if &t_Co == 88
                            			if a:x < 69
                            				return 0
                            			elseif a:x < 172
                            				return 1
                            			elseif a:x < 230
                            				return 2
                            			else
                            				return 3
                            			endif
                            		else
                            			if a:x < 75
                            				return 0
                            			else
                            				let l:n = (a:x - 55) / 40
                            				let l:m = (a:x - 55) % 40
                            				if l:m < 20
                            					return l:n
                            				else
                            					return l:n + 1
                            				endif
                            			endif
                            		endif
                            	endfun
                            
                            	" Returns the actual colour level for the given colour index
   14              0.000025 	fun <SID>rgb_level(n)
                            		if &t_Co == 88
                            			if a:n == 0
                            				return 0
                            			elseif a:n == 1
                            				return 139
                            			elseif a:n == 2
                            				return 205
                            			else
                            				return 255
                            			endif
                            		else
                            			if a:n == 0
                            				return 0
                            			else
                            				return 55 + (a:n * 40)
                            			endif
                            		endif
                            	endfun
                            
                            	" Returns the palette index for the given R/G/B colour indices
   14              0.000031 	fun <SID>rgb_colour(x, y, z)
                            		if &t_Co == 88
                            			return 16 + (a:x * 16) + (a:y * 4) + a:z
                            		else
                            			return 16 + (a:x * 36) + (a:y * 6) + a:z
                            		endif
                            	endfun
                            
                            	" Returns the palette index to approximate the given R/G/B colour levels
   14              0.000026 	fun <SID>colour(r, g, b)
                            		" Get the closest grey
                            		let l:gx = <SID>grey_number(a:r)
                            		let l:gy = <SID>grey_number(a:g)
                            		let l:gz = <SID>grey_number(a:b)
                            
                            		" Get the closest colour
                            		let l:x = <SID>rgb_number(a:r)
                            		let l:y = <SID>rgb_number(a:g)
                            		let l:z = <SID>rgb_number(a:b)
                            
                            		if l:gx == l:gy && l:gy == l:gz
                            			" There are two possibilities
                            			let l:dgr = <SID>grey_level(l:gx) - a:r
                            			let l:dgg = <SID>grey_level(l:gy) - a:g
                            			let l:dgb = <SID>grey_level(l:gz) - a:b
                            			let l:dgrey = (l:dgr * l:dgr) + (l:dgg * l:dgg) + (l:dgb * l:dgb)
                            			let l:dr = <SID>rgb_level(l:gx) - a:r
                            			let l:dg = <SID>rgb_level(l:gy) - a:g
                            			let l:db = <SID>rgb_level(l:gz) - a:b
                            			let l:drgb = (l:dr * l:dr) + (l:dg * l:dg) + (l:db * l:db)
                            			if l:dgrey < l:drgb
                            				" Use the grey
                            				return <SID>grey_colour(l:gx)
                            			else
                            				" Use the colour
                            				return <SID>rgb_colour(l:x, l:y, l:z)
                            			endif
                            		else
                            			" Only one possibility
                            			return <SID>rgb_colour(l:x, l:y, l:z)
                            		endif
                            	endfun
                            
                            	" Returns the palette index to approximate the 'rrggbb' hex string
   14              0.000027 	fun <SID>rgb(rgb)
                            		let l:r = ("0x" . strpart(a:rgb, 0, 2)) + 0
                            		let l:g = ("0x" . strpart(a:rgb, 2, 2)) + 0
                            		let l:b = ("0x" . strpart(a:rgb, 4, 2)) + 0
                            
                            		return <SID>colour(l:r, l:g, l:b)
                            	endfun
                            
                            	" Sets the highlighting for the given group
   14              0.000035 	fun <SID>X(group, fg, bg, attr)
                            		if a:fg != ""
                            			exec "hi " . a:group . " guifg=#" . a:fg . " ctermfg=" . <SID>rgb(a:fg)
                            		endif
                            		if a:bg != ""
                            			exec "hi " . a:group . " guibg=#" . a:bg . " ctermbg=" . <SID>rgb(a:bg)
                            		endif
                            		if a:attr != ""
                            			exec "hi " . a:group . " gui=" . a:attr . " cterm=" . a:attr
                            		endif
                            	endfun
                            
                            	" Vim Highlighting
   14   0.008734   0.000153 	call <SID>X("Normal", s:foreground, s:background, "")
   14   0.004212   0.000086 	call <SID>X("LineNr", s:selection, "", "")
   14   0.004087   0.000071 	call <SID>X("NonText", s:selection, "", "")
   14   0.004095   0.000065 	call <SID>X("SpecialKey", s:selection, "", "")
   14   0.006432   0.000073 	call <SID>X("Search", s:background, s:yellow, "")
   14   0.006917   0.000113 	call <SID>X("TabLine", s:window, s:foreground, "reverse")
   14   0.007192   0.000079 	call <SID>X("TabLineFill", s:window, s:foreground, "reverse")
   14   0.005597   0.000074 	call <SID>X("StatusLine", s:window, s:yellow, "reverse")
   14   0.006798   0.000079 	call <SID>X("StatusLineNC", s:window, s:foreground, "reverse")
   14   0.005447   0.000071 	call <SID>X("VertSplit", s:window, s:window, "none")
   14   0.004129   0.000068 	call <SID>X("Visual", "", s:selection, "")
   14   0.002754   0.000067 	call <SID>X("Directory", s:blue, "", "")
   14   0.002694   0.000059 	call <SID>X("ModeMsg", s:green, "", "")
   14   0.002738   0.000058 	call <SID>X("MoreMsg", s:green, "", "")
   14   0.002688   0.000061 	call <SID>X("Question", s:green, "", "")
   14   0.002659   0.000056 	call <SID>X("WarningMsg", s:red, "", "")
   14   0.004047   0.000060 	call <SID>X("MatchParen", "", s:selection, "")
   14   0.007604   0.000071 	call <SID>X("Folded", s:comment, s:background, "")
   14   0.003761   0.000066 	call <SID>X("FoldColumn", "", s:background, "")
   14              0.000023 	if version >= 700
   14   0.003881   0.000093 		call <SID>X("CursorLine", "", s:line, "none")
   14   0.004267   0.000063 		call <SID>X("CursorColumn", "", s:line, "none")
   14   0.008130   0.000078 		call <SID>X("PMenu", s:foreground, s:selection, "none")
   14   0.008058   0.000077 		call <SID>X("PMenuSel", s:foreground, s:selection, "reverse")
   14   0.003914   0.000070 		call <SID>X("SignColumn", "", s:background, "none")
   14              0.000014 	end
   14              0.000019 	if version >= 703
   14   0.003988   0.000064 		call <SID>X("ColorColumn", "", s:line, "none")
   14              0.000012 	end
                            
                            	" Standard Highlighting
   14   0.004070   0.000064 	call <SID>X("Comment", s:comment, "", "")
   14   0.007665   0.000066 	call <SID>X("Todo", s:comment, s:background, "")
   14   0.004030   0.000062 	call <SID>X("Title", s:comment, "", "")
   14   0.002814   0.000059 	call <SID>X("Identifier", s:red, "", "none")
   14   0.004100   0.000065 	call <SID>X("Statement", s:foreground, "", "")
   14   0.004043   0.000060 	call <SID>X("Conditional", s:foreground, "", "")
   14   0.004081   0.000061 	call <SID>X("Repeat", s:foreground, "", "")
   14   0.002742   0.000065 	call <SID>X("Structure", s:purple, "", "")
   14   0.002714   0.000057 	call <SID>X("Function", s:blue, "", "")
   14   0.002738   0.000087 	call <SID>X("Constant", s:orange, "", "")
   14   0.002690   0.000060 	call <SID>X("String", s:green, "", "")
   14   0.004090   0.000059 	call <SID>X("Special", s:foreground, "", "")
   14   0.002806   0.000061 	call <SID>X("PreProc", s:purple, "", "")
   14   0.002639   0.000065 	call <SID>X("Operator", s:aqua, "", "none")
   14   0.002864   0.000061 	call <SID>X("Type", s:blue, "", "none")
   14   0.002828   0.000061 	call <SID>X("Define", s:purple, "", "none")
   14   0.002718   0.000062 	call <SID>X("Include", s:blue, "", "")
                            	"call <SID>X("Ignore", "666666", "", "")
                            
                            	" Vim Highlighting
   14   0.002824   0.000092 	call <SID>X("vimCommand", s:red, "", "none")
                            
                            	" C Highlighting
   14   0.002683   0.000060 	call <SID>X("cType", s:yellow, "", "")
   14   0.002803   0.000059 	call <SID>X("cStorageClass", s:purple, "", "")
   14   0.002776   0.000062 	call <SID>X("cConditional", s:purple, "", "")
   14   0.002761   0.000058 	call <SID>X("cRepeat", s:purple, "", "")
                            
                            	" PHP Highlighting
   14   0.002788   0.000058 	call <SID>X("phpVarSelector", s:red, "", "")
   14   0.002799   0.000064 	call <SID>X("phpKeyword", s:purple, "", "")
   14   0.002887   0.000059 	call <SID>X("phpRepeat", s:purple, "", "")
   14   0.002833   0.000063 	call <SID>X("phpConditional", s:purple, "", "")
   14   0.002738   0.000062 	call <SID>X("phpStatement", s:purple, "", "")
   14   0.004164   0.000061 	call <SID>X("phpMemberSelector", s:foreground, "", "")
                            
                            	" Ruby Highlighting
   14   0.002743   0.000058 	call <SID>X("rubySymbol", s:green, "", "")
   14   0.002705   0.000061 	call <SID>X("rubyConstant", s:yellow, "", "")
   14   0.002736   0.000059 	call <SID>X("rubyAccess", s:yellow, "", "")
   14   0.002733   0.000058 	call <SID>X("rubyAttribute", s:blue, "", "")
   14   0.002727   0.000055 	call <SID>X("rubyInclude", s:blue, "", "")
   14   0.002771   0.000061 	call <SID>X("rubyLocalVariableOrMethod", s:orange, "", "")
   14   0.002721   0.000065 	call <SID>X("rubyCurlyBlock", s:orange, "", "")
   14   0.002745   0.000056 	call <SID>X("rubyStringDelimiter", s:green, "", "")
   14   0.002791   0.000061 	call <SID>X("rubyInterpolationDelimiter", s:orange, "", "")
   14   0.002742   0.000061 	call <SID>X("rubyConditional", s:purple, "", "")
   14   0.002735   0.000065 	call <SID>X("rubyRepeat", s:purple, "", "")
   14   0.002770   0.000056 	call <SID>X("rubyControl", s:purple, "", "")
   14   0.002749   0.000064 	call <SID>X("rubyException", s:purple, "", "")
                            
                            	" Python Highlighting
   14   0.002839   0.000062 	call <SID>X("pythonInclude", s:purple, "", "")
   14   0.002788   0.000066 	call <SID>X("pythonStatement", s:purple, "", "")
   14   0.002798   0.000062 	call <SID>X("pythonConditional", s:purple, "", "")
   14   0.002780   0.000060 	call <SID>X("pythonRepeat", s:purple, "", "")
   14   0.002744   0.000057 	call <SID>X("pythonException", s:purple, "", "")
   14   0.002721   0.000056 	call <SID>X("pythonFunction", s:blue, "", "")
   14   0.002886   0.000065 	call <SID>X("pythonPreCondit", s:purple, "", "")
   14   0.002662   0.000062 	call <SID>X("pythonRepeat", s:aqua, "", "")
   14   0.002763   0.000065 	call <SID>X("pythonExClass", s:orange, "", "")
                            
                            	" JavaScript Highlighting
   14   0.004275   0.000066 	call <SID>X("javaScriptBraces", s:foreground, "", "")
   14   0.002803   0.000067 	call <SID>X("javaScriptFunction", s:purple, "", "")
   14   0.002816   0.000065 	call <SID>X("javaScriptConditional", s:purple, "", "")
   14   0.002755   0.000067 	call <SID>X("javaScriptRepeat", s:purple, "", "")
   14   0.002723   0.000057 	call <SID>X("javaScriptNumber", s:orange, "", "")
   14   0.002759   0.000061 	call <SID>X("javaScriptMember", s:orange, "", "")
   14   0.002723   0.000059 	call <SID>X("javascriptNull", s:orange, "", "")
   14   0.002794   0.000062 	call <SID>X("javascriptGlobal", s:blue, "", "")
   14   0.002865   0.000061 	call <SID>X("javascriptStatement", s:red, "", "")
                            
                                    " CoffeeScript Highlighting
   14   0.002784   0.000065         call <SID>X("coffeeRepeat", s:purple, "", "")
   14   0.002777   0.000067         call <SID>X("coffeeConditional", s:purple, "", "")
   14   0.002795   0.000060         call <SID>X("coffeeKeyword", s:purple, "", "")
   14   0.002708   0.000062         call <SID>X("coffeeObject", s:yellow, "", "")
                            
                            	" HTML Highlighting
   14   0.002682   0.000058 	call <SID>X("htmlTag", s:red, "", "")
   14   0.002921   0.000092 	call <SID>X("htmlTagName", s:red, "", "")
   14   0.002859   0.000065 	call <SID>X("htmlArg", s:red, "", "")
   14   0.002914   0.000064 	call <SID>X("htmlScriptTag", s:red, "", "")
                            
                            	" Diff Highlighting
   14   0.002830   0.000064 	call <SID>X("diffAdd", "", "4c4e39", "")
   14   0.006768   0.000076 	call <SID>X("diffDelete", s:background, s:red, "")
   14   0.002784   0.000062 	call <SID>X("diffChange", "", "2B5B77", "")
   14   0.006743   0.000068 	call <SID>X("diffText", s:line, s:blue, "")
                            
                            	" ShowMarks Highlighting
   14   0.006653   0.000077 	call <SID>X("ShowMarksHLl", s:orange, s:background, "none")
   14   0.006584   0.000072 	call <SID>X("ShowMarksHLo", s:purple, s:background, "none")
   14   0.006480   0.000077 	call <SID>X("ShowMarksHLu", s:yellow, s:background, "none")
   14   0.006315   0.000072 	call <SID>X("ShowMarksHLm", s:aqua, s:background, "none")
                            
                            	" Lua Highlighting
   14   0.002943   0.000069 	call <SID>X("luaStatement", s:purple, "", "")
   14   0.002763   0.000064 	call <SID>X("luaRepeat", s:purple, "", "")
   14   0.002738   0.000060 	call <SID>X("luaCondStart", s:purple, "", "")
   14   0.002777   0.000058 	call <SID>X("luaCondElseif", s:purple, "", "")
   14   0.002746   0.000060 	call <SID>X("luaCond", s:purple, "", "")
   14   0.002730   0.000059 	call <SID>X("luaCondEnd", s:purple, "", "")
                            
                            	" Cucumber Highlighting
   14   0.002766   0.000059 	call <SID>X("cucumberGiven", s:blue, "", "")
   14   0.002780   0.000061 	call <SID>X("cucumberGivenAnd", s:blue, "", "")
                            
                            	" Go Highlighting
   14   0.002873   0.000062 	call <SID>X("goDirective", s:purple, "", "")
   14   0.002856   0.000099 	call <SID>X("goDeclaration", s:purple, "", "")
   14   0.002779   0.000065 	call <SID>X("goStatement", s:purple, "", "")
   14   0.002765   0.000058 	call <SID>X("goConditional", s:purple, "", "")
   14   0.002791   0.000092 	call <SID>X("goConstants", s:orange, "", "")
   14   0.002727   0.000058 	call <SID>X("goTodo", s:yellow, "", "")
   14   0.002940   0.000061 	call <SID>X("goDeclType", s:blue, "", "")
   14   0.002983   0.000066 	call <SID>X("goBuiltins", s:purple, "", "")
                            
                            	" Clojure "highlighting
   14   0.002849   0.000065 	call <SID>X("clojureConstant", s:orange, "", "")
   14   0.002968   0.000063 	call <SID>X("clojureBoolean", s:orange, "", "")
   14   0.002836   0.000115 	call <SID>X("clojureCharacter", s:orange, "", "")
   14   0.002724   0.000067 	call <SID>X("clojureKeyword", s:green, "", "")
   14   0.002704   0.000059 	call <SID>X("clojureNumber", s:orange, "", "")
   14   0.002651   0.000061 	call <SID>X("clojureString", s:green, "", "")
   14   0.002647   0.000058 	call <SID>X("clojureRegexp", s:green, "", "")
   14   0.002514   0.000056 	call <SID>X("clojureParen", s:aqua, "", "")
   14   0.002653   0.000060 	call <SID>X("clojureVariable", s:yellow, "", "")
   14   0.002661   0.000056 	call <SID>X("clojureCond", s:blue, "", "")
   14   0.002717   0.000056 	call <SID>X("clojureDefine", s:purple, "", "")
   14   0.002772   0.000062 	call <SID>X("clojureException", s:red, "", "")
   14   0.002928   0.000062 	call <SID>X("clojureFunc", s:blue, "", "")
   14   0.003012   0.000065 	call <SID>X("clojureMacro", s:blue, "", "")
   14   0.002802   0.000064 	call <SID>X("clojureRepeat", s:blue, "", "")
   14   0.002815   0.000063 	call <SID>X("clojureSpecial", s:purple, "", "")
   14   0.002978   0.000062 	call <SID>X("clojureQuote", s:blue, "", "")
   14   0.002838   0.000068 	call <SID>X("clojureUnquote", s:blue, "", "")
   14   0.002807   0.000059 	call <SID>X("clojureMeta", s:blue, "", "")
   14   0.002865   0.000093 	call <SID>X("clojureDeref", s:blue, "", "")
   14   0.002776   0.000057 	call <SID>X("clojureAnonArg", s:blue, "", "")
   14   0.002769   0.000060 	call <SID>X("clojureRepeat", s:blue, "", "")
   14   0.002809   0.000091 	call <SID>X("clojureDispatch", s:blue, "", "")
                            
                            	" Scala "highlighting
   14   0.002723   0.000060 	call <SID>X("scalaKeyword", s:purple, "", "")
   14   0.002719   0.000059 	call <SID>X("scalaKeywordModifier", s:purple, "", "")
   14   0.002673   0.000057 	call <SID>X("scalaOperator", s:blue, "", "")
   14   0.002646   0.000059 	call <SID>X("scalaPackage", s:red, "", "")
   14   0.004069   0.000061 	call <SID>X("scalaFqn", s:foreground, "", "")
   14   0.004314   0.000120 	call <SID>X("scalaFqnSet", s:foreground, "", "")
   14   0.002787   0.000059 	call <SID>X("scalaImport", s:purple, "", "")
   14   0.002690   0.000062 	call <SID>X("scalaBoolean", s:orange, "", "")
   14   0.002670   0.000059 	call <SID>X("scalaDef", s:purple, "", "")
   14   0.002751   0.000057 	call <SID>X("scalaVal", s:purple, "", "")
   14   0.002509   0.000057 	call <SID>X("scalaVar", s:aqua, "", "")
   14   0.002691   0.000055 	call <SID>X("scalaClass", s:purple, "", "")
   14   0.002732   0.000056 	call <SID>X("scalaObject", s:purple, "", "")
   14   0.002699   0.000060 	call <SID>X("scalaTrait", s:purple, "", "")
   14   0.002688   0.000058 	call <SID>X("scalaDefName", s:blue, "", "")
   14   0.004105   0.000061 	call <SID>X("scalaValName", s:foreground, "", "")
   14   0.004059   0.000062 	call <SID>X("scalaVarName", s:foreground, "", "")
   14   0.004108   0.000095 	call <SID>X("scalaClassName", s:foreground, "", "")
   14   0.002682   0.000057 	call <SID>X("scalaType", s:yellow, "", "")
   14   0.002718   0.000060 	call <SID>X("scalaTypeSpecializer", s:yellow, "", "")
   14   0.002709   0.000062 	call <SID>X("scalaAnnotation", s:orange, "", "")
   14   0.002673   0.000063 	call <SID>X("scalaNumber", s:orange, "", "")
   14   0.002706   0.000061 	call <SID>X("scalaDefSpecializer", s:yellow, "", "")
   14   0.002680   0.000065 	call <SID>X("scalaClassSpecializer", s:yellow, "", "")
   14   0.003165   0.000069 	call <SID>X("scalaBackTick", s:green, "", "")
   14   0.004131   0.000067 	call <SID>X("scalaRoot", s:foreground, "", "")
   14   0.002731   0.000070 	call <SID>X("scalaMethodCall", s:blue, "", "")
   14   0.002728   0.000062 	call <SID>X("scalaCaseType", s:yellow, "", "")
   14   0.004116   0.000069 	call <SID>X("scalaLineComment", s:comment, "", "")
   14   0.004160   0.000072 	call <SID>X("scalaComment", s:comment, "", "")
   14   0.004034   0.000064 	call <SID>X("scalaDocComment", s:comment, "", "")
   14   0.004065   0.000064 	call <SID>X("scalaDocTags", s:comment, "", "")
   14   0.002727   0.000061 	call <SID>X("scalaEmptyString", s:green, "", "")
   14   0.002838   0.000077 	call <SID>X("scalaMultiLineString", s:green, "", "")
   14   0.002920   0.000100 	call <SID>X("scalaUnicode", s:orange, "", "")
   14   0.002667   0.000062 	call <SID>X("scalaString", s:green, "", "")
   14   0.002692   0.000062 	call <SID>X("scalaStringEscape", s:green, "", "")
   14   0.002711   0.000099 	call <SID>X("scalaSymbol", s:orange, "", "")
   14   0.002646   0.000059 	call <SID>X("scalaChar", s:orange, "", "")
   14   0.002681   0.000057 	call <SID>X("scalaXml", s:green, "", "")
   14   0.002647   0.000062 	call <SID>X("scalaConstructorSpecializer", s:yellow, "", "")
   14   0.002673   0.000061 	call <SID>X("scalaBackTick", s:blue, "", "")
                            
                            	" Delete Functions
   14              0.000054 	delf <SID>X
   14              0.000042 	delf <SID>rgb
   14              0.000072 	delf <SID>colour
   14              0.000044 	delf <SID>rgb_colour
   14              0.000053 	delf <SID>rgb_level
   14              0.000059 	delf <SID>rgb_number
   14              0.000054 	delf <SID>grey_colour
   14              0.000101 	delf <SID>grey_level
   14              0.000073 	delf <SID>grey_number
   14              0.000014 endif
                            
   14              0.000091 set background=dark

SCRIPT  /usr/local/Cellar/vim/7.4.335/share/vim/vim74/syntax/syncolor.vim
Sourced 28 times
Total time:   0.010016
 Self time:   0.010016

count  total (s)   self (s)
                            " Vim syntax support file
                            " Maintainer:	Bram Moolenaar <Bram@vim.org>
                            " Last Change:	2001 Sep 12
                            
                            " This file sets up the default methods for highlighting.
                            " It is loaded from "synload.vim" and from Vim for ":syntax reset".
                            " Also used from init_highlight().
                            
   28              0.000157 if !exists("syntax_cmd") || syntax_cmd == "on"
                              " ":syntax on" works like in Vim 5.7: set colors but keep links
    7              0.000071   command -nargs=* SynColor hi <args>
    7              0.000043   command -nargs=* SynLink hi link <args>
    7              0.000007 else
   21              0.000039   if syntax_cmd == "enable"
                                " ":syntax enable" keeps any existing colors
    7              0.000070     command -nargs=* SynColor hi def <args>
    7              0.000046     command -nargs=* SynLink hi def link <args>
    7              0.000008   elseif syntax_cmd == "reset"
                                " ":syntax reset" resets all colors to the default
   14              0.000089     command -nargs=* SynColor hi <args>
   14              0.000080     command -nargs=* SynLink hi! link <args>
   14              0.000013   else
                                " User defined syncolor file has already set the colors.
                                finish
                              endif
   21              0.000019 endif
                            
                            " Many terminals can only use six different colors (plus black and white).
                            " Therefore the number of colors used is kept low. It doesn't look nice with
                            " too many colors anyway.
                            " Careful with "cterm=bold", it changes the color to bright for some terminals.
                            " There are two sets of defaults: for a dark and a light background.
   28              0.000066 if &background == "dark"
   28              0.000377   SynColor Comment	term=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
   28              0.000267   SynColor Constant	term=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
   28              0.000247   SynColor Special	term=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
   28              0.000239   SynColor Identifier	term=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
   28              0.000235   SynColor Statement	term=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
   28              0.000237   SynColor PreProc	term=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
   28              0.000236   SynColor Type		term=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
   28              0.000232   SynColor Underlined	term=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
   28              0.000238   SynColor Ignore	term=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
   28              0.000027 else
                              SynColor Comment	term=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
                              SynColor Constant	term=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
                              SynColor Special	term=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
                              SynColor Identifier	term=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
                              SynColor Statement	term=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
                              SynColor PreProc	term=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
                              SynColor Type		term=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
                              SynColor Underlined	term=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
                              SynColor Ignore	term=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
                            endif
   28              0.000240 SynColor Error		term=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
   28              0.000237 SynColor Todo		term=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
                            
                            " Common groups that link to default highlighting.
                            " You can specify other highlighting easily.
   28              0.000241 SynLink String		Constant
   28              0.000229 SynLink Character	Constant
   28              0.000224 SynLink Number		Constant
   28              0.000223 SynLink Boolean		Constant
   28              0.000218 SynLink Float		Number
   28              0.000286 SynLink Function	Identifier
   28              0.000226 SynLink Conditional	Statement
   28              0.000220 SynLink Repeat		Statement
   28              0.000216 SynLink Label		Statement
   28              0.000219 SynLink Operator	Statement
   28              0.000214 SynLink Keyword		Statement
   28              0.000216 SynLink Exception	Statement
   28              0.000218 SynLink Include		PreProc
   28              0.000216 SynLink Define		PreProc
   28              0.000216 SynLink Macro		PreProc
   28              0.000215 SynLink PreCondit	PreProc
   28              0.000225 SynLink StorageClass	Type
   28              0.000219 SynLink Structure	Type
   28              0.000216 SynLink Typedef		Type
   28              0.000213 SynLink Tag		Special
   28              0.000216 SynLink SpecialChar	Special
   28              0.000214 SynLink Delimiter	Special
   28              0.000223 SynLink SpecialComment	Special
   28              0.000211 SynLink Debug		Special
                            
   28              0.000058 delcommand SynColor
   28              0.000079 delcommand SynLink

SCRIPT  /usr/local/Cellar/vim/7.4.335/share/vim/vim74/syntax/syntax.vim
Sourced 7 times
Total time:   0.441240
 Self time:   0.003313

count  total (s)   self (s)
                            " Vim syntax support file
                            " Maintainer:	Bram Moolenaar <Bram@vim.org>
                            " Last Change:	2001 Sep 04
                            
                            " This file is used for ":syntax on".
                            " It installs the autocommands and starts highlighting for all buffers.
                            
    7              0.000038 if !has("syntax")
                              finish
                            endif
                            
                            " If Syntax highlighting appears to be on already, turn it off first, so that
                            " any leftovers are cleared.
    7              0.000025 if exists("syntax_on") || exists("syntax_manual")
    7              0.000313   so <sfile>:p:h/nosyntax.vim
    7              0.000030 endif
                            
                            " Load the Syntax autocommands and set the default methods for highlighting.
    7              0.002386 runtime syntax/synload.vim
                            
                            " Load the FileType autocommands if not done yet.
    7              0.000035 if exists("did_load_filetypes")
    7              0.000013   let s:did_ft = 1
    7              0.000005 else
                              filetype on
                              let s:did_ft = 0
                            endif
                            
                            " Set up the connection between FileType and Syntax autocommands.
                            " This makes the syntax automatically set when the file type is detected.
    7              0.000009 augroup syntaxset
    7              0.000055   au! FileType *	exe "set syntax=" . expand("<amatch>")
    7              0.000007 augroup END
                            
                            
                            " Execute the syntax autocommands for the each buffer.
                            " If the filetype wasn't detected yet, do that now.
                            " Always do the syntaxset autocommands, for buffers where the 'filetype'
                            " already was set manually (e.g., help buffers).
    7   0.106848   0.000053 doautoall syntaxset FileType
    7              0.000016 if !s:did_ft
                              doautoall filetypedetect BufRead
                            endif

SCRIPT  /usr/local/Cellar/vim/7.4.335/share/vim/vim74/syntax/synload.vim
Sourced 7 times
Total time:   0.319514
 Self time:   0.001537

count  total (s)   self (s)
                            " Vim syntax support file
                            " Maintainer:	Bram Moolenaar <Bram@vim.org>
                            " Last Change:	2012 Sep 25
                            
                            " This file sets up for syntax highlighting.
                            " It is loaded from "syntax.vim" and "manual.vim".
                            " 1. Set the default highlight groups.
                            " 2. Install Syntax autocommands for all the available syntax files.
                            
    7              0.000044 if !has("syntax")
                              finish
                            endif
                            
                            " let others know that syntax has been switched on
    7              0.000018 let syntax_on = 1
                            
                            " Set the default highlighting colors.  Use a color scheme if specified.
    7              0.000019 if exists("colors_name")
    7              0.000553   exe "colors " . colors_name
    7              0.000010 else
                              runtime! syntax/syncolor.vim
                            endif
                            
                            " Line continuation is used here, remove 'C' from 'cpoptions'
    7              0.000043 let s:cpo_save = &cpo
    7              0.000034 set cpo&vim
                            
                            " First remove all old syntax autocommands.
    7              0.000040 au! Syntax
                            
    7              0.000081 au Syntax *		call s:SynSet()
                            
    7              0.000017 fun! s:SynSet()
                              " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
                              syn clear
                              if exists("b:current_syntax")
                                unlet b:current_syntax
                              endif
                            
                              let s = expand("<amatch>")
                              if s == "ON"
                                " :set syntax=ON
                                if &filetype == ""
                                  echohl ErrorMsg
                                  echo "filetype unknown"
                                  echohl None
                                endif
                                let s = &filetype
                              elseif s == "OFF"
                                let s = ""
                              endif
                            
                              if s != ""
                                " Load the syntax file(s).  When there are several, separated by dots,
                                " load each in sequence.
                                for name in split(s, '\.')
                                  exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
                                endfor
                              endif
                            endfun
                            
                            
                            " Handle adding doxygen to other languages (C, C++, C#, IDL)
    7              0.000101 au Syntax c,cpp,cs,idl,php
                            	\ if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)
                            	\	|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)
                            	\   | runtime! syntax/doxygen.vim
                            	\ | endif
                            
                            
                            " Source the user-specified syntax highlighting file
    7              0.000036 if exists("mysyntaxfile") && filereadable(expand(mysyntaxfile))
                              execute "source " . mysyntaxfile
                            endif
                            
                            " Restore 'cpoptions'
    7              0.000036 let &cpo = s:cpo_save
    7              0.000025 unlet s:cpo_save

SCRIPT  /Users/jjcall/Src/dotfiles/vim/bindings.vim
Sourced 7 times
Total time:   0.001796
 Self time:   0.001796

count  total (s)   self (s)
                            "------------------------------------------
                            " Bindings
                            "------------------------------------------
                            " Set leader to ,
                            " Note: This line MUST come before any <leader> mapping
    7              0.000025 let mapleader=","
                            
                            " Fixes common typos
    7              0.000047 command! W w
    7              0.000022 command! Q q
    7              0.000138 map <F1> <Esc>
    7              0.000051 imap <F1> <Esc>
                            
                            " Pinky issues
    7              0.000042 cnoremap w' w<CR>
                            
                            " Removes doc lookup binding becuase it's easy to fat finger
    7              0.000040 nmap K k
    7              0.000037 vmap K k
                            
                            " Make line completion easier
    7              0.000042 imap <C-l> <C-x><C-l>
                            
                            " Switch between buffers
    7              0.000054 nmap <leader>, b#
                            
                            " Expands to current directory in command mode
    7              0.000057 cnoremap %% <C-R>=expand('%:h').'/'<cr>
                            
                            " Yank entire buffer!
    7              0.000046 nmap gy :%y+<cr>
                            
                            " Make Y Behave normal like other capital commands
    7              0.000035 nnoremap Y y$
                            
                            " Jump to beggining and end of line quickly
    7              0.000043 noremap H ^
    7              0.000031 noremap L $
                            
                            " Clear search
    7              0.000055 map <silent><Leader>/ :nohls<CR>
                            
                            " Highlight search word under cursor without jumping to next
    7              0.000050 nnoremap <leader>h *<C-o>
                            
                            " Hit jj to exit insert mode
    7              0.000036 imap jj <Esc>
                            
                            " Open a vertical/horizontal split, switch over to it
    7              0.000095 nnoremap <leader>s <C-w>s<C-w>j
    7              0.000056 nnoremap <leader>v <C-w>v<C-w>l
                            
                            " Split navigation
    7              0.000039 nnoremap <C-h> <C-w>h
    7              0.000034 nnoremap <C-j> <C-w>j
    7              0.000032 nnoremap <C-k> <C-w>k
    7              0.000036 nnoremap <C-l> <C-w>l
                            
                            " SuperTab w/ OmniComplete
    7              0.000021 let g:SuperTabDefaultCompletionType = "context"
                            
                            "------------------------------------------
                            " Leader Commands
                            "------------------------------------------
                            " Underline the current line with '='
    7              0.000076 nmap <silent> <leader>ul :t.\|s/./-/g\|:nohls<cr>
                            
                            " format the entire file
    7              0.000058 nmap <leader>fef ggVG=
                            
                            " format json
    7              0.000064 nmap <leader>fjf :%!python -m json.tool
                            
                            " Toggle colorsheme color
    7              0.000066 map <silent> <F5> :call gruvbox#bg_toggle()<CR>
    7              0.000064 imap <silent> <F5> <ESC>:call gruvbox#bg_toggle()<CR>a
    7              0.000064 vmap <silent> <F5> <ESC>:call gruvbox#bg_toggle()<CR>gv
                            

SCRIPT  /Users/jjcall/Src/dotfiles/vim/plugin_configs.vim
Sourced 7 times
Total time:   0.004016
 Self time:   0.004016

count  total (s)   self (s)
                            "------------------------------------------
                            " NERDTree
                            "------------------------------------------
    7              0.000073 nnoremap <F2> :NERDTreeToggle<CR>
    7              0.000060 nnoremap <leader>nf :NERDTreeFind<CR>
    7              0.000056 let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$' ]
    7              0.000015 let NERDTreeHighlightCursorline=1
    7              0.000012 let NERDTreeQuitOnOpen = 1
    7              0.000009 let NERDTreeShowFiles=1
    7              0.000013 let g:NERDTreeShowBookmarks=1
    7              0.000012 let g:NERDTreeChDirMode=2 " Change the NERDTree directory to the root node
    7              0.000009 let g:NERDTreeMinimalUI=1
                            
                            "------------------------------------------
                            " Snipmate
                            "------------------------------------------
    7              0.001720 au BufRead *.php set ft=php.html
    7              0.001521 au BufNewFile *.php set ft=php.html
                            
                            "------------------------------------------
                            " Ack
                            "------------------------------------------
    7              0.000070 map <Leader>a :Ack!<space>
    7              0.000059 map <Leader>h :nohlsearch<CR>
                            
                            "------------------------------------------
                            " Syntastic
                            "------------------------------------------
    7              0.000015 let g:syntastic_enable_signs=1
    7              0.000010 let g:syntastic_auto_loclist=1
    7              0.000034 let g:syntastic_quiet_messages = {'level': 'warnings'}
                            
                            "------------------------------------------
                            " Ctrl-P
                            "------------------------------------------
    7              0.000057 let g:ctrlp_custom_ignore = {
                              \ 'dir':  '\v[\/]\.(git|hg|svn|node_modules)$',
                              \ 'file': '\v\.(exe|so|dll)$',
                              \ 'link': '',
                              \ }
                            
                            "------------------------------------------
                            " Airline
                            "------------------------------------------
    7              0.000022 set laststatus=2
    7              0.000014 let g:airline_powerline_fonts = 1
    7              0.000024 if !exists('g:airline_symbols')
                              let g:airline_symbols = {}
                              let g:airline_left_sep = '⮀'
                              let g:airline_left_alt_sep = '⮁'
                              let g:airline_right_sep = '⮂'
                              let g:airline_right_alt_sep = '⮃'
                              let g:airline_symbols.branch = '⭠'
                              let g:airline_symbols.readonly = '⭤'
                              let g:airline_symbols.linenr = '⭡'
                            endif
                            
                            "------------------------------------------
                            " YCM + UltiSnips
                            "------------------------------------------

SCRIPT  /Users/jjcall/Src/dotfiles/vim/functions.vim
Sourced 7 times
Total time:   0.000005
 Self time:   0.000005

count  total (s)   self (s)

SCRIPT  /Users/jjcall/Src/dotfiles/vim/autocmds.vim
Sourced 7 times
Total time:   0.004229
 Self time:   0.004229

count  total (s)   self (s)
                            " ----------------------------------------
                            "  " Auto Commands
                            "  " ----------------------------------------
                            "
    7              0.000039 if has("autocmd")
                              " No formatting on o key newlines
    7              0.000724   autocmd BufNewFile,BufEnter * set formatoptions-=o
                            
                              " No more complaining about untitled documents
    7              0.000025   autocmd FocusLost silent! :wa
                            
                              " When editing a file, always jump to the last cursor position.
                              " This must be after the uncompress commands.
    7              0.000755   autocmd BufReadPost *
                              \ if line("'\"") > 1 && line ("'\"") <= line("$") |
                              \   exe "normal! g`\"" |
                              \ endif
                            
                              " Fix trailing whitespace in my most used programming langauges
    7              0.000082   autocmd BufWritePre *.py,*.coffee,*.rb silent! :StripTrailingWhiteSpace
                              
                              " Source while editing"
    7              0.000045   autocmd bufwritepost vimrc source $MYVIMRC
                            
                              "-------------------------------------
                              " OmniComplete 
                              "-------------------------------------
    7              0.000053   autocmd FileType python set omnifunc=pythoncomplete#Complete
    7              0.000037   autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
    7              0.000030   autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
    7              0.000032   autocmd FileType css set omnifunc=csscomplete#CompleteCSS
    7              0.000025   autocmd FileType php set omnifunc=phpcomplete#CompletePHP
    7              0.001105   autocmd BufNewFile,BufRead *.scss set ft=scss.css
    7              0.000905   autocmd BufNewFile,BufRead *.less set ft=less.css
                            
                              " Source the vimrc file after saving it
    7              0.000058   autocmd bufwritepost .vimrc source $MYVIMRC
    7              0.000039   autocmd bufwritepost config.vim source $MYVIMRC
    7              0.000028   autocmd bufwritepost bindings.vim source $MYVIMRC
    7              0.000033   autocmd bufwritepost autocmds.vim source $MYVIMRC
    7              0.000033   autocmd bufwritepost functions.vim source $MYVIMRC
    7              0.000032   autocmd bufwritepost platforms.vim source $MYVIMRC
    7              0.000035   autocmd bufwritepost plugin_configs.vim source $MYVIMRC
    7              0.000015 endif

SCRIPT  /usr/local/Cellar/vim/7.4.335/share/vim/vim74/syntax/vim.vim
Sourced 7 times
Total time:   0.096777
 Self time:   0.060651

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:	Vim 7.4 script
                            " Maintainer:	Charles E. Campbell <NdrOchipS@PcampbellAfamily.Mbiz>
                            " Last Change:	Mar 20, 2014
                            " Version:	7.4-27
                            " Automatically generated keyword lists: {{{1
                            
                            " Quit when a syntax file was already loaded {{{2
    7              0.000031 if exists("b:current_syntax")
                              finish
                            endif
    7              0.000040 let s:keepcpo= &cpo
    7              0.000030 set cpo&vim
                            
                            " vimTodo: contains common special-notices for comments {{{2
                            " Use the vimCommentGroup cluster to add your own.
    7              0.000079 syn cluster vimCommentGroup	contains=vimTodo,@Spell
                            
                            " regular vim commands {{{2
    7              0.001222 syn keyword vimCommand contained	a arga[dd] ar[gs] bd[elete] bN[ext] breakd[el] bufdo cabc[lear] cat[ch] cex[pr] c[hange] cla[st] cnew[er] cNf[ile] con cp[revious] cuna[bbrev] del deletep delm[arks] diffp[atch] dig[raphs] do e echon endf endw[hile] f[ile] fin[d] folddoc[losed] fu[nction] gvim helpt[ags] iabc[lear] intro k l lan lc[d] lefta[bove] lg[etfile] lla[st] lnew[er] lNf[ile] lockv[ar] ls lvimgrepa[dd] mat[ch] mk[exrc] mo n n[ext] o ownsyntax perld[o] pre[serve] promptf[ind] ptl[ast] ptr[ewind] py3do qa[ll] r[ead] redr[aw] retu[rn] rub[y] rv[iminfo] sba[ll] sbN[ext] scripte[ncoding] setf[iletype] sh[ell] sim[alt] sm[ap] sni[ff] sor[t] spelli[nfo] spr[evious] start st[op] sunmenu syn ta tabf[ind] tabnew tabr[ewind] tcld[o] tj[ump] tN tr tu[nmenu] undoj[oin] uns[ilent] ve[rsion] vimgrepa[dd] vs[plit] winc[md] wN[ext] ws[verb] x[it] xnoremenu
    7              0.001455 syn keyword vimCommand contained	ab argd[elete] argu[ment] bel[owright] bo[tright] breakl[ist] b[uffer] cad cb[uffer] cf[ile] changes cl[ist] cn[ext] col[der] conf[irm] cq[uit] cw[indow] delc[ommand] deletl delp diffpu[t] dir doau ea e[dit] endfo[r] ene[w] files fini[sh] foldd[oopen] g h hi if is[earch] keepa la lan[guage] lch[dir] lex[pr] lgr[ep] lli[st] lne[xt] lo lol[der] lt[ag] lw[indow] menut mks[ession] mod[e] nbc[lose] nmapc[lear] ol[dfiles] p po[p] prev[ious] promptr[epl] ptn pts[elect] pydo q[uit] rec[over] redraws[tatus] rew[ind] rubyd[o] sal[l] sbf[irst] sbp[revious] scrip[tnames] setg[lobal] si sl sme sno[magic] so[urce] spellr[epall] sre[wind] startg[replace] stopi[nsert] sus[pend] sync tab tabfir[st] tabn[ext] tabs tclf[ile] tl[ast] tn[ext] tr[ewind] u undol[ist] up[date] vert[ical] vi[sual] w windo wp[revious] wundo xmapc[lear] xunme
    7              0.011919 syn keyword vimCommand contained	abc[lear] argdo as[cii] bf[irst] bp[revious] br[ewind] buffers caddb[uffer] cc cfir[st] chd[ir] clo[se] cN[ext] colo[rscheme] con[tinue] cr[ewind] d delel deletp dep diffs[plit] di[splay] dp earlier el[se] endfun ex filet fir[st] foldo[pen] go[to] ha[rdcopy] hid[e] ij[ump] isp[lit] keepalt lad la[st] lcl[ose] lf[ile] lgrepa[dd] lmak[e] lN[ext] loadk lop[en] lua ma menut[ranslate] mksp[ell] m[ove] nb[key] noa omapc[lear] pc[lose] popu p[rint] ps[earch] ptN pu[t] pyf[ile] quita[ll] red reg[isters] ri[ght] rubyf[ile] san[dbox] sbl[ast] sbr[ewind] scs setl[ocal] sig sla[st] smenu snoreme spe spellu[ndo] st star[tinsert] sts[elect] sv[iew] syncbind tabc[lose] tabl[ast] tabN[ext] ta[g] te[aroff] tm tN[ext] try un unh[ide] v vi viu[sage] wa[ll] winp[os] wq wv[iminfo] xme xunmenu
    7              0.000499 syn keyword vimCommand contained	abo[veleft] arge[dit] au bl[ast] br bro[wse] bun[load] cad[dexpr] ccl[ose] cgetb[uffer] che[ckpath] cmapc[lear] cnf com cope[n] cs de delep delf di difft[his] dj[ump] dr[op] ec elsei[f] endf[unction] exi[t] filetype fix[del] for gr[ep] h[elp] his[tory] il[ist] iuna[bbrev] keepj[umps] laddb[uffer] lat lcs lfir[st] lh[elpgrep] lmapc[lear] lnf loadkeymap lpf[ile] luado mak[e] mes mkv mz nbs[tart] noautocmd on[ly] pe popu[p] pro pta[g] ptn[ext] pw[d] py[thon] r redi[r] res[ize] rightb[elow] rundo sa[rgument] sbm[odified] sb[uffer] scscope sf[ind] sign sl[eep] sn[ext] snoremenu spelld[ump] spellw[rong] sta[g] startr[eplace] sun[hide] sw[apname] syntime tabd[o] tabm[ove] tabo[nly] tags tf[irst] tm[enu] to[pleft] ts[elect] una[bbreviate] unl ve vie[w] vmapc[lear] wh[ile] win[size] wqa[ll] x xmenu xwininfo
    7              0.000465 syn keyword vimCommand contained	al[l] argg[lobal] bad[d] bm[odified] brea[k] bu bw[ipeout] caddf[ile] cd cgete[xpr] checkt[ime] cn cNf comc[lear] co[py] cscope debug d[elete] delf[unction] diffg[et] diffu[pdate] dl ds[earch] echoe[rr] em[enu] en[dif] exu[sage] fin fo[ld] fu grepa[dd] helpf[ind] i imapc[lear] j[oin] kee[pmarks] lad[dexpr] later lcscope lgetb[uffer] l[ist] lN lNf lo[adview] lp[revious] luafile ma[rk] messages mkvie[w] mzf[ile] ne noh[lsearch] o[pen] ped[it] pp[op] profd[el] ptf[irst] ptN[ext] py python3 re red[o] ret[ab] ru ru[ntime] sav[eas] sbn[ext] scrip se[t] sfir[st] sil[ent] sm[agic] sN[ext] so spe[llgood] sp[lit] star stj[ump] sunme sy t tabe[dit] tabN tabp[revious] tc[l] th[row] tn tp[revious] tu u[ndo] unlo[ckvar] verb[ose] vim[grep] vne[w] win wn[ext] w[rite] xa[ll] xnoreme y[ank]
    7              0.000288 syn keyword vimCommand contained	ar argl[ocal] ba[ll] bn[ext] breaka[dd] buf c cal[l] ce[nter] cg[etfile] cl cN cnf[ile] comp[iler] cpf[ile] cstag debugg[reedy] deletel dell diffo[ff] dig dli[st] dsp[lit] echom[sg] en endt[ry] f fina[lly] foldc[lose] fun gui helpg[rep] ia in ju[mps] keepp[atterns] laddf[ile] lb[uffer] le[ft] lgete[xpr] ll lne lnf[ile] loc[kmarks] lr[ewind] lv[imgrep] marks mk mkv[imrc] mz[scheme] new nu[mber] opt[ions] pe[rl] pr prof[ile] ptj[ump] ptp[revious] py3 q 
    7              0.000071 syn match   vimCommand contained	"\<z[-+^.=]\="
    7              0.000053 syn keyword vimStdPlugin contained	DiffOrig Man N[ext] P[rint] S TOhtml XMLent XMLns 
                            
                            " vimOptions are caught only when contained in a vimSet {{{2
    7              0.000229 syn keyword vimOption contained	acd ambiwidth arabicshape autowriteall backupdir bdlay binary breakat bufhidden cd ci cinw co commentstring confirm cpoptions cscoperelative csre cursorcolumn delcombine diffopt ea efm ep et fdc fdo ffs filetype fo foldlevelstart formatexpr ft gfw gtt guipty hh hkmap ic imaf iminsert includeexpr inf isident key langmap lines lmap ma matchtime mco ml modeline mousefocus mousetime nrformats ofu para pdev pi previewwindow printmbfont qe relativenumber rightleftcmd ru sbr scrolloff selection shellcmdflag shellxescape showbreak si smartcase softtabstop spelllang sps sta su swb synmaxcol tagbsearch tbi termencoding thesaurus titlestring tpm ttm ttytype undodir ut vfile vop wcm whichwrap wildignore winaltkeys winminwidth wmnu write
    7              0.000222 syn keyword vimOption contained	ai ambw ari aw backupext beval biosk brk buflisted cdpath cin cinwords cocu compatible consk cpt cscopetag cst cursorline dex digraph ead ei equalalways eventignore fde fdt fic fillchars foldclose foldmarker formatlistpat gcr ghr guicursor guitablabel hi hkmapp icon imak ims incsearch infercase isk keymap langmenu linespace loadplugins macatsui maxcombine mef mls modelines mousehide mp nu omnifunc paragraphs penc pm printdevice printoptions quoteescape remap rl ruf sc scrollopt selectmode shellpipe shellxquote showcmd sidescroll smartindent sol spellsuggest sr stal sua swf syntax taglength tbidi terse tildeop tl tr tty tw undofile vb vi wa wd wi wildignorecase window winwidth wmw writeany
    7              0.000243 syn keyword vimOption contained	akm anti arshape awa backupskip bex bioskey browsedir buftype cedit cindent clipboard cole complete conskey crb cscopetagorder csto cwh dg dip eadirection ek equalprg ex fdi fen fileencoding fk foldcolumn foldmethod formatoptions gd go guifont guitabtooltip hid hkp iconstring imc imsearch inde insertmode iskeyword keymodel laststatus lisp lpl magic maxfuncdepth menuitems mm modifiable mousem mps number opendevice paste pex pmbcs printencoding prompt rdt report rlc ruler scb scs sessionoptions shellquote shiftround showfulltag sidescrolloff smarttab sp spf srr startofline suffixes switchbuf ta tagrelative tbis textauto timeout tm ts ttybuiltin tx undolevels vbs viewdir wak weirdinvert wic wildmenu winfixheight wiv wop writebackup
    7              0.000220 syn keyword vimOption contained	al antialias autochdir background balloondelay bexpr bk bs casemap cf cink cmdheight colorcolumn completefunc copyindent cryptmethod cscopeverbose csverb debug dict dir eb enc errorbells expandtab fdl fenc fileencodings fkmap foldenable foldminlines formatprg gdefault gp guifontset helpfile hidden hl ignorecase imcmdline imsf indentexpr is isp keywordprg lazyredraw lispwords ls makeef maxmapdepth mfd mmd modified mousemodel msm numberwidth operatorfunc pastetoggle pexpr pmbfn printexpr pt re restorescreen rnu rulerformat scr sect sft shellredir shiftwidth showmatch siso smc spc spl ss statusline suffixesadd sws tabline tags tbs textmode timeoutlen to tsl ttyfast uc undoreload vdir viewoptions warn wfh wig wildmode winfixwidth wiw wrap writedelay
    7              0.000221 syn keyword vimOption contained	aleph ar autoindent backspace ballooneval bg bkc bsdir cb cfu cinkeys cmdwinheight columns completeopt cot cscopepathcomp cspc cuc deco dictionary directory ed encoding errorfile exrc fdls fencs fileformat flp foldexpr foldnestmax fp gfm grepformat guifontwide helpheight highlight hlg im imd imstatusfunc indentkeys isf isprint km lbr list lsp makeprg maxmem mh mmp more mouses mzq nuw opfunc patchexpr pfn popt printfont pumheight readonly revins ro runtimepath scroll sections sh shellslash shm showmode sj smd spell splitbelow ssl stl sw sxe tabpagemax tagstack tenc textwidth title toolbar tsr ttym udf updatecount ve viminfo wb wfw wildchar wildoptions winheight wm wrapmargin ws
    7              0.000223 syn keyword vimOption contained	allowrevins arab autoread backup balloonexpr bh bl bsk cc ch cino cmp com concealcursor cp cscopeprg csprg cul def diff display edcompatible endofline errorformat fcl fdm fex fileformats fml foldignore foldopen fs gfn grepprg guiheadroom helplang history hls imactivatefunc imdisable inc indk isfname joinspaces kmp lcs listchars lw mat maxmempattern mis mmt mouse mouseshape mzquantum odev osfiletype patchmode ph preserveindent printheader pvh redrawtime ri rs sb scrollbind secure shcf shelltemp shortmess showtabline slm sn spellcapcheck splitright ssop stmp swapfile sxq tabstop tal term tf titlelen toolbariconsize ttimeout ttymouse udir updatetime verbose virtualedit wc wh wildcharm wim winminheight wmh wrapscan ww
    7              0.000207 syn keyword vimOption contained	altkeymap arabic autowrite backupcopy bdir bin bomb bt ccv charconvert cinoptions cms comments conceallevel cpo cscopequickfix csqf cursorbind define diffexpr dy ef eol esckeys fcs fdn ff fileignorecase fmr foldlevel foldtext fsync gfs gtl guioptions hf hk hlsearch imactivatekey imi include inex isi js kp linebreak lm lz matchpairs maxmemtot mkspellmem mod mousef mouset nf oft pa path pheader previewheight printmbcharset pvw regexpengine rightleft rtp sbo scrolljump sel shell shelltype shortname shq sm so spellfile spr st sts swapsync syn tag tb termbidi tgst titleold top ttimeoutlen ttyscroll ul ur verbosefile visualbell 
                            
                            " vimOptions: These are the turn-off setting variants {{{2
    7              0.000280 syn keyword vimOption contained	noacd noallowrevins noantialias noarabic noarshape noautoread noaw noballooneval nobinary nobk nobuflisted nocin noconfirm nocopyindent nocscoperelative nocsre nocuc nocursorcolumn nodelcombine nodigraph noed noendofline noerrorbells noex nofen nofk nogd nohid nohkmap nohkp nohlsearch noicon noim noimcmdline noimdisable noinf noinsertmode nojoinspaces nolazyredraw nolinebreak nolist nolpl noma nomagic noml nomodeline nomodified nomousef nomousehide nonumber noopendevice nopi nopreviewwindow nopvw norelativenumber norestorescreen nori norl noro noru nosb noscb noscs nosft noshelltemp noshortname noshowfulltag noshowmode nosm nosmartindent nosmd nosol nosplitbelow nospr nossl nostartofline noswapfile nota notagrelative notbi notbs noterse notextmode notgst notimeout noto notr nottybuiltin notx noundofile novisualbell nowarn noweirdinvert nowfw nowildignorecase nowinfixheight nowiv nowrap nowrite nowritebackup
    7              0.000229 syn keyword vimOption contained	noai noaltkeymap noar noarabicshape noautochdir noautowrite noawa nobeval nobiosk nobl nocf nocindent noconsk nocp nocscopetag nocst nocul nocursorline nodg noea noedcompatible noeol noesckeys noexpandtab nofic nofkmap nogdefault nohidden nohkmapp nohls noic noignorecase noimc noimd noincsearch noinfercase nois nojs nolbr nolisp noloadplugins nolz nomacatsui nomh nomod nomodifiable nomore nomousefocus nonu noodev nopaste nopreserveindent noprompt noreadonly noremap norevins norightleft nornu nors noruler nosc noscrollbind nosecure noshellslash noshiftround noshowcmd noshowmatch nosi nosmartcase nosmarttab nosn nospell nosplitright nosr nosta nostmp noswf notagbsearch notagstack notbidi notermbidi notextauto notf notildeop notitle notop nottimeout nottyfast noudf novb nowa nowb nowfh nowic nowildmenu nowinfixwidth nowmnu nowrapscan nowriteany nows
    7              0.000084 syn keyword vimOption contained	noakm noanti noarab noari noautoindent noautowriteall nobackup nobin nobioskey nobomb noci nocompatible noconskey nocrb nocscopeverbose nocsverb nocursorbind nodeco nodiff noeb noek noequalalways noet noexrc nofileignorecase nofoldenable noguipty nohk 
                            
                            " vimOptions: These are the invertible variants {{{2
    7              0.000462 syn keyword vimOption contained	invacd invallowrevins invantialias invarabic invarshape invautoread invaw invballooneval invbinary invbk invbuflisted invcin invconfirm invcopyindent invcscoperelative invcsre invcuc invcursorcolumn invdelcombine invdigraph inved invendofline inverrorbells invex invfen invfk invgd invhid invhkmap invhkp invhlsearch invicon invim invimcmdline invimdisable invinf invinsertmode invjoinspaces invlazyredraw invlinebreak invlist invlpl invma invmagic invml invmodeline invmodified invmousef invmousehide invnumber invopendevice invpi invpreviewwindow invpvw invrelativenumber invrestorescreen invri invrl invro invru invsb invscb invscs invsft invshelltemp invshortname invshowfulltag invshowmode invsm invsmartindent invsmd invsol invsplitbelow invspr invssl invstartofline invswapfile invta invtagrelative invtbi invtbs invterse invtextmode invtgst invtimeout invto invtr invttybuiltin invtx invundofile invvisualbell invwarn invweirdinvert invwfw invwildignorecase invwinfixheight invwiv inv    7              0.000202 syn keyword vimOption contained	invai invaltkeymap invar invarabicshape invautochdir invautowrite invawa invbeval invbiosk invbl invcf invcindent invconsk invcp invcscopetag invcst invcul invcursorline invdg invea invedcompatible inveol invesckeys invexpandtab invfic invfkmap invgdefault invhidden invhkmapp invhls invic invignorecase invimc invimd invincsearch invinfercase invis invjs invlbr invlisp invloadplugins invlz invmacatsui invmh invmod invmodifiable invmore invmousefocus invnu invodev invpaste invpreserveindent invprompt invreadonly invremap invrevins invrightleft invrnu invrs invruler invsc invscrollbind invsecure invshellslash invshiftround invshowcmd invshowmatch invsi invsmartcase invsmarttab invsn invspell invsplitright invsr invsta invstmp invswf invtagbsearch invtagstack invtbidi invtermbidi invtextauto invtf invtildeop invtitle invtop invttimeout invttyfast invudf invvb invwa invwb invwfh invwic invwildmenu invwinfixwidth invwmnu invwrapscan invwriteany invws
    7              0.000075 syn keyword vimOption contained	invakm invanti invarab invari invautoindent invautowriteall invbackup invbin invbioskey invbomb invci invcompatible invconskey invcrb invcscopeverbose invcsverb invcursorbind invdeco invdiff inveb invek invequalalways invet invexrc invfileignorecase invfoldenable invguipty invhk 
                            
                            " termcap codes (which can also be set) {{{2
    7              0.000192 syn keyword vimOption contained	t_AB t_al t_bc t_ce t_cl t_Co t_Cs t_CS t_CV t_da t_db t_dl t_DL t_EI t_F1 t_F2 t_F3 t_F4 t_F5 t_F6 t_F7 t_F8 t_F9 t_fs t_IE t_IS t_k1 t_K1 t_k2 t_k3 t_K3 t_k4 t_K4 t_k5 t_K5 t_k6 t_K6 t_k7 t_K7 t_k8 t_K8 t_k9 t_K9 t_KA t_kb t_kB t_KB t_KC t_kd t_kD t_KD t_ke t_KE t_KF t_KG t_kh t_KH t_kI t_KI t_KJ t_KK t_kl t_KL t_kN t_kP t_kr t_ks t_ku t_le t_mb t_md t_me t_mr t_ms t_nd t_op t_RI t_RV t_Sb t_se t_Sf t_SI t_so t_sr t_te t_ti t_ts t_u7 t_ue t_us t_ut t_vb t_ve t_vi t_vs t_WP t_WS t_xs t_ZH t_ZR
    7              0.000036 syn keyword vimOption contained	t_AF t_AL t_cd t_Ce t_cm t_cs 
    7              0.000040 syn match   vimOption contained	"t_%1"
    7              0.000035 syn match   vimOption contained	"t_#2"
    7              0.000033 syn match   vimOption contained	"t_#4"
    7              0.000031 syn match   vimOption contained	"t_@7"
    7              0.000033 syn match   vimOption contained	"t_*7"
    7              0.000030 syn match   vimOption contained	"t_&8"
    7              0.000030 syn match   vimOption contained	"t_%i"
    7              0.000032 syn match   vimOption contained	"t_k;"
                            
                            " unsupported settings: these are supported by vi but don't do anything in vim {{{2
    7              0.000035 syn keyword vimErrSetting contained	hardtabs ht w1200 w300 w9600 
                            
                            " AutoCmd Events {{{2
    7              0.000044 syn case ignore
    7              0.000387 syn keyword vimAutoEvent contained	BufAdd BufCreate BufDelete BufEnter BufFilePost BufFilePre BufHidden BufLeave BufNew BufNewFile BufRead BufReadCmd BufReadPost BufReadPre BufUnload BufWinEnter BufWinLeave BufWipeout BufWrite BufWriteCmd BufWritePost BufWritePre Cmd-event CmdwinEnter CmdwinLeave ColorScheme CompleteDone CursorHold CursorHoldI CursorMoved CursorMovedI EncodingChanged FileAppendCmd FileAppendPost FileAppendPre FileChangedRO FileChangedShell FileChangedShellPost FileEncoding FileReadCmd FileReadPost FileReadPre FileType FileWriteCmd FileWritePost FileWritePre FilterReadPost FilterReadPre FilterWritePost FilterWritePre FocusGained FocusLost FuncUndefined GUIEnter GUIFailed InsertChange InsertCharPre InsertEnter InsertLeave MenuPopup QuickFixCmdPost QuickFixCmdPre QuitPre RemoteReply SessionLoadPost ShellCmdPost ShellFilterPost SourceCmd SourcePre SpellFileMissing StdinReadPost StdinReadPre SwapExists Syntax TabEnter TabLeave TermChanged TermResponse TextChanged TextChangedI User UserGettingBored                            
                            " Highlight commonly used Groupnames {{{2
    7              0.000133 syn keyword vimGroup contained	Comment Constant String Character Number Boolean Float Identifier Function Statement Conditional Repeat Label Operator Keyword Exception PreProc Include Define Macro PreCondit Type StorageClass Structure Typedef Special SpecialChar Tag Delimiter SpecialComment Debug Underlined Ignore Error Todo 
                            
                            " Default highlighting groups {{{2
    7              0.000192 syn keyword vimHLGroup contained	ColorColumn Cursor CursorColumn CursorIM CursorLine CursorLineNr DiffAdd DiffChange DiffDelete DiffText Directory ErrorMsg FoldColumn Folded IncSearch LineNr MatchParen Menu ModeMsg MoreMsg NonText Normal Pmenu PmenuSbar PmenuSel PmenuThumb Question Scrollbar Search SignColumn SpecialKey SpellBad SpellCap SpellLocal SpellRare StatusLine StatusLineNC TabLine TabLineFill TabLineSel Title Tooltip VertSplit Visual VisualNOS WarningMsg WildMenu 
    7              0.000040 syn match vimHLGroup contained	"Conceal"
    7              0.000010 syn case match
                            
                            " Function Names {{{2
    7              0.000239 syn keyword vimFuncName contained	abs and argidx atan browsedir bufloaded bufwinnr byteidxcomp changenr clearmatches complete_add copy count deepcopy diff_filler escape executable expand feedkeys filter float2nr fnameescape foldclosedend foldtextresult garbagecollect getbufvar getcmdline getcwd getfsize getline getpid getreg gettabwinvar getwinvar has hasmapto histget hlID indent inputdialog inputsave invert items len line localtime luaeval mapcheck matcharg matchlist min mzeval or prevnonblank py3eval readfile remote_expr remote_read rename reverse screenchar search searchpairpos serverlist setcmdpos setloclist setpos setreg settabwinvar sha256 shiftwidth sin sort spellbadword split str2float strchars strftime string strpart strtrans submatch synconcealed synIDattr synstack tabpagebuflist tabpagewinnr taglist tanh tolower tr type undotree virtcol wildmenumode wincol winline winrestcmd winsaveview writefile
    7              0.000246 syn keyword vimFuncName contained	acos append argv atan2 bufexists bufname byte2line call char2nr col complete_check cos cscope_connection delete diff_hlID eval exists expr8 filereadable finddir floor fnamemodify foldlevel foreground get getchar getcmdpos getfontname getftime getloclist getpos getregtype getwinposx glob has_key histadd histnr hostname index inputlist inputsecret isdirectory join libcall line2byte log map match matchdelete matchstr mkdir nextnonblank pathshorten printf pyeval reltime remote_foreground remote_send repeat round screencol searchdecl searchpos setbufvar setline setmatches setqflist settabvar setwinvar shellescape simplify sinh soundfold spellsuggest sqrt str2nr strdisplaywidth stridx strlen strridx strwidth substitute synID synIDtrans system tabpagenr tagfiles tan tempname toupper trunc undofile values visualmode winbufnr winheight winnr winrestview winwidth xor
    7              0.000153 syn keyword vimFuncName contained	add argc asin browse buflisted bufnr byteidx ceil cindent complete confirm cosh cursor did_filetype empty eventhandler exp extend filewritable findfile fmod foldclosed foldtext function getbufline getcharmod getcmdtype getfperm getftype getmatches getqflist gettabvar getwinposy globpath haslocaldir histdel hlexists iconv input inputrestore insert islocked keys libcallnr lispindent log10 maparg matchadd matchend max mode nr2char pow pumvisible range reltimestr remote_peek remove resolve screenattr screenrow searchpair server2client 
                            
                            "--- syntax here and above generated by mkvimvim ---
                            " Special Vim Highlighting (not automatic) {{{1
                            
                            " commands not picked up by the generator (due to non-standard format)
    7              0.000034 syn keyword vimCommand contained	py3
                            
                            " Deprecated variable options {{{2
    7              0.000022 if exists("g:vim_minlines")
                             let g:vimsyn_minlines= g:vim_minlines
                            endif
    7              0.000014 if exists("g:vim_maxlines")
                             let g:vimsyn_maxlines= g:vim_maxlines
                            endif
    7              0.000016 if exists("g:vimsyntax_noerror")
                             let g:vimsyn_noerror= g:vimsyntax_noerror
                            endif
                            
                            " Numbers {{{2
                            " =======
    7              0.000176 syn match vimNumber	"\<\d\+\%(\.\d\+\%([eE][+-]\=\d\+\)\=\)\=" skipwhite nextgroup=vimGlobal,vimSubst,vimCommand
    7              0.000150 syn match vimNumber	"-\d\+\%(\.\d\+\%([eE][+-]\=\d\+\)\=\)\="  skipwhite nextgroup=vimGlobal,vimSubst,vimCommand
    7              0.000038 syn match vimNumber	"\<0[xX]\x\+"
    7              0.000046 syn match vimNumber	"#\x\{6}"
                            
                            " All vimCommands are contained by vimIsCommands. {{{2
    7              0.000360 syn match vimCmdSep	"[:|]\+"	skipwhite nextgroup=vimAddress,vimAutoCmd,vimCommand,vimExtCmd,vimFilter,vimLet,vimMap,vimMark,vimSet,vimSyntax,vimUserCmd
    7              0.000077 syn match vimIsCommand	"\<\h\w*\>"	contains=vimCommand
    7              0.000047 syn match vimVar        contained	"\<\h[a-zA-Z0-9#_]*\>"
    7              0.000044 syn match vimVar		"\<[bwglsav]:\h[a-zA-Z0-9#_]*\>"
    7              0.000044 syn match vimFBVar      contained   "\<[bwglsav]:\h[a-zA-Z0-9#_]*\>"
    7              0.000031 syn keyword vimCommand  contained	in
                            
                            " Insertions And Appends: insert append {{{2
                            " =======================
    7              0.000126 syn region vimInsert	matchgroup=vimCommand start="^[: \t]*\(\d\+\(,\d\+\)\=\)\=a\%[ppend]$"	matchgroup=vimCommand end="^\.$""
    7              0.000106 syn region vimInsert	matchgroup=vimCommand start="^[: \t]*\(\d\+\(,\d\+\)\=\)\=c\%[hange]$"	matchgroup=vimCommand end="^\.$""
    7              0.000099 syn region vimInsert	matchgroup=vimCommand start="^[: \t]*\(\d\+\(,\d\+\)\=\)\=i\%[nsert]$"	matchgroup=vimCommand end="^\.$""
                            
                            " Behave! {{{2
                            " =======
    7              0.000101 syn match   vimBehave	"\<be\%[have]\>" skipwhite nextgroup=vimBehaveModel,vimBehaveError
    7              0.000030 syn keyword vimBehaveModel contained	mswin	xterm
    7              0.000033 if !exists("g:vimsyn_noerror") && !exists("g:vimsyn_nobehaveerror")
    7              0.000041  syn match   vimBehaveError contained	"[^ ]\+"
    7              0.000007 endif
                            
                            " Filetypes {{{2
                            " =========
    7              0.000133 syn match   vimFiletype	"\<filet\%[ype]\(\s\+\I\i*\)*"	skipwhite contains=vimFTCmd,vimFTOption,vimFTError
    7              0.000028 if !exists("g:vimsyn_noerror") && !exists("g:vimsyn_vimFTError")
    7              0.000035  syn match   vimFTError  contained	"\I\i*"
    7              0.000006 endif
    7              0.000033 syn keyword vimFTCmd    contained	filet[ype]
    7              0.000035 syn keyword vimFTOption contained	detect indent off on plugin
                            
                            " Augroup : vimAugroupError removed because long augroups caused sync'ing problems. {{{2
                            " ======= : Trade-off: Increasing synclines with slower editing vs augroup END error checking.
    7              0.000889 syn cluster vimAugroupList	contains=vimIsCommand,vimCommand,vimUserCmd,vimExecute,vimNotFunc,vimFuncName,vimFunction,vimFunctionError,vimLineComment,vimSpecFile,vimOper,vimNumber,vimOperParen,vimComment,vimString,vimSubst,vimMark,vimRegister,vimAddress,vimFilter,vimCmplxRepeat,vimComment,vimLet,vimSet,vimAutoCmd,vimRegion,vimSynLine,vimNotation,vimCtrlChar,vimFuncVar,vimContinue
    7              0.000022 if exists("g:vimsyn_folding") && g:vimsyn_folding =~ 'a'
                             syn region  vimAugroup	fold start="\<aug\%[roup]\>\s\+\h\w*" end="\<aug\%[roup]\>\s\+[eE][nN][dD]\>"	contains=vimAugroupKey,vimAutoCmd,@vimAugroupList keepend
                            else
    7              0.000142  syn region  vimAugroup	start="\<aug\%[roup]\>\s\+\h\w*" end="\<aug\%[roup]\>\s\+[eE][nN][dD]\>"	contains=vimAugroupKey,vimAutoCmd,@vimAugroupList keepend
    7              0.000006 endif
    7              0.000067 syn match   vimAugroup	"aug\%[roup]!" contains=vimAugroupKey
    7              0.000028 if !exists("g:vimsyn_noerror") && !exists("g:vimsyn_noaugrouperror")
    7              0.000043  syn match   vimAugroupError	"\<aug\%[roup]\>\s\+[eE][nN][dD]\>"
    7              0.000006 endif
    7              0.000033 syn keyword vimAugroupKey contained	aug[roup]
                            
                            " Operators: {{{2
                            " =========
                            " COMBAK: vimOperParen used to have "oneline"
    7              0.000281 syn cluster	vimOperGroup	contains=vimEnvvar,vimFunc,vimFuncVar,vimOper,vimOperParen,vimNumber,vimString,vimRegister,vimContinue
    7              0.000116 syn match	vimOper	"\(==\|!=\|>=\|<=\|=\~\|!\~\|>\|<\|=\)[?#]\{0,2}"	skipwhite nextgroup=vimString,vimSpecFile
    7              0.000092 syn match	vimOper	"||\|&&\|[-+.]"	skipwhite nextgroup=vimString,vimSpecFile
    7              0.000076 syn region	vimOperParen 	matchgroup=vimParenSep	start="(" end=")" contains=@vimOperGroup
    7              0.000121 syn region	vimOperParen	matchgroup=vimSep	start="{" end="}" contains=@vimOperGroup nextgroup=vimVar,vimFuncVar
    7              0.000027 if !exists("g:vimsyn_noerror") && !exists("g:vimsyn_noopererror")
    7              0.000037  syn match	vimOperError	")"
    7              0.000007 endif
                            
                            " Functions : Tag is provided for those who wish to highlight tagged functions {{{2
                            " =========
    7              0.000182 syn cluster	vimFuncList	contains=vimCommand,vimFunctionError,vimFuncKey,Tag,vimFuncSID
    7              0.001078 syn cluster	vimFuncBodyList	contains=vimAbb,vimAddress,vimAugroupKey,vimAutoCmd,vimCmplxRepeat,vimComment,vimComment,vimContinue,vimCtrlChar,vimEcho,vimEchoHL,vimExecute,vimIf,vimIsCommand,vimFBVar,vimFunc,vimFunction,vimFuncVar,vimHighlight,vimIsCommand,vimLet,vimLineComment,vimMap,vimMark,vimNorm,vimNotation,vimNotFunc,vimNumber,vimOper,vimOperParen,vimRegion,vimRegister,vimSet,vimSpecFile,vimString,vimSubst,vimSynLine,vimUnmap,vimUserCommand
    7              0.000117 syn match	vimFunction	"\<fu\%[nction]!\=\s\+\%(<[sS][iI][dD]>\|[sSgGbBwWtTlL]:\)\=\%(\i\|[#.]\|{.\{-1,}}\)*\ze\s*("	contains=@vimFuncList nextgroup=vimFuncBody
                            
    7              0.000036 if exists("g:vimsyn_folding") && g:vimsyn_folding =~ 'f'
                             syn region	vimFuncBody  contained	fold start="\ze("	matchgroup=vimCommand end="\<\(endf\>\|endfu\%[nction]\>\)"		contains=@vimFuncBodyList
                            else
    7              0.000090  syn region	vimFuncBody  contained	start="\ze("	matchgroup=vimCommand end="\<\(endf\>\|endfu\%[nction]\>\)"		contains=@vimFuncBodyList
    7              0.000006 endif
    7              0.000041 syn match	vimFuncVar   contained	"a:\(\h\w*\|\d\+\)"
    7              0.000036 syn match	vimFuncSID   contained	"\c<sid>\|\<s:"
    7              0.000037 syn keyword	vimFuncKey   contained	fu[nction]
    7              0.000032 syn match	vimFuncBlank contained	"\s\+"
                            
    7              0.000030 syn keyword	vimPattern   contained	start	skip	end
                            
                            " Special Filenames, Modifiers, Extension Removal: {{{2
                            " ===============================================
    7              0.000099 syn match	vimSpecFile	"<c\(word\|WORD\)>"	nextgroup=vimSpecFileMod,vimSubst
    7              0.000103 syn match	vimSpecFile	"<\([acs]file\|amatch\|abuf\)>"	nextgroup=vimSpecFileMod,vimSubst
    7              0.000098 syn match	vimSpecFile	"\s%[ \t:]"ms=s+1,me=e-1	nextgroup=vimSpecFileMod,vimSubst
    7              0.000097 syn match	vimSpecFile	"\s%$"ms=s+1	nextgroup=vimSpecFileMod,vimSubst
    7              0.000090 syn match	vimSpecFile	"\s%<"ms=s+1,me=e-1	nextgroup=vimSpecFileMod,vimSubst
    7              0.000096 syn match	vimSpecFile	"#\d\+\|[#%]<\>"	nextgroup=vimSpecFileMod,vimSubst
    7              0.000042 syn match	vimSpecFileMod	"\(:[phtre]\)\+"	contained
                            
                            " User-Specified Commands: {{{2
                            " =======================
    7              0.000857 syn cluster	vimUserCmdList	contains=vimAddress,vimSyntax,vimHighlight,vimAutoCmd,vimCmplxRepeat,vimComment,vimCtrlChar,vimEscapeBrace,vimFilter,vimFunc,vimFuncName,vimFunction,vimFunctionError,vimIsCommand,vimMark,vimNotation,vimNumber,vimOper,vimRegion,vimRegister,vimLet,vimSet,vimSetEqual,vimSetString,vimSpecFile,vimString,vimSubst,vimSubstRep,vimSubstRange,vimSynLine
    7              0.000034 syn keyword	vimUserCommand	contained	com[mand]
    7              0.000106 syn match	vimUserCmd	"\<com\%[mand]!\=\>.*$"	contains=vimUserAttrb,vimUserCommand,@vimUserCmdList
    7              0.000099 syn match	vimUserAttrb	contained	"-n\%[args]=[01*?+]"	contains=vimUserAttrbKey,vimOper
    7              0.000148 syn match	vimUserAttrb	contained	"-com\%[plete]="	contains=vimUserAttrbKey,vimOper nextgroup=vimUserAttrbCmplt,vimUserCmdError
    7              0.000128 syn match	vimUserAttrb	contained	"-ra\%[nge]\(=%\|=\d\+\)\="	contains=vimNumber,vimOper,vimUserAttrbKey
    7              0.000120 syn match	vimUserAttrb	contained	"-cou\%[nt]=\d\+"	contains=vimNumber,vimOper,vimUserAttrbKey
    7              0.000093 syn match	vimUserAttrb	contained	"-bang\=\>"	contains=vimOper,vimUserAttrbKey
    7              0.000108 syn match	vimUserAttrb	contained	"-bar\>"	contains=vimOper,vimUserAttrbKey
    7              0.000095 syn match	vimUserAttrb	contained	"-re\%[gister]\>"	contains=vimOper,vimUserAttrbKey
    7              0.000033 if !exists("g:vimsyn_noerror") && !exists("g:vimsyn_nousercmderror")
    7              0.000035  syn match	vimUserCmdError	contained	"\S\+\>"
    7              0.000007 endif
    7              0.000009 syn case ignore
    7              0.000640 syn keyword	vimUserAttrbKey   contained	bar	ban[g]	cou[nt]	ra[nge] com[plete]	n[args]	re[gister]
    7              0.000224 syn keyword	vimUserAttrbCmplt contained	augroup buffer color command compiler cscope dir environment event expression file file_in_path filetype function help highlight locale mapping menu option shellcmd sign syntax tag tag_listfiles var
    7              0.000092 syn keyword	vimUserAttrbCmplt contained	custom customlist nextgroup=vimUserAttrbCmpltFunc,vimUserCmdError
    7              0.000099 syn match	vimUserAttrbCmpltFunc contained	",\%([sS]:\|<[sS][iI][dD]>\)\=\%(\h\w*\%(#\h\w*\)\+\|\h\w*\)"hs=s+1 nextgroup=vimUserCmdError
                            
    7              0.000008 syn case match
    7              0.000039 syn match	vimUserAttrbCmplt contained	"custom,\u\w*"
                            
                            " Lower Priority Comments: after some vim commands... {{{2
                            " =======================
    7              0.000082 syn match	vimComment	excludenl +\s"[^\-:.%#=*].*$+lc=1	contains=@vimCommentGroup,vimCommentString
    7              0.000073 syn match	vimComment	+\<endif\s\+".*$+lc=5	contains=@vimCommentGroup,vimCommentString
    7              0.000079 syn match	vimComment	+\<else\s\+".*$+lc=4	contains=@vimCommentGroup,vimCommentString
    7              0.000055 syn region	vimCommentString	contained oneline start='\S\s\+"'ms=e	end='"'
                            
                            " Environment Variables: {{{2
                            " =====================
    7              0.000044 syn match	vimEnvvar	"\$\I\i*"
    7              0.000037 syn match	vimEnvvar	"\${\I\i*}"
                            
                            " In-String Specials: {{{2
                            " Try to catch strings, if nothing else matches (therefore it must precede the others!)
                            "  vimEscapeBrace handles ["]  []"] (ie. "s don't terminate string inside [])
    7              0.000081 syn region	vimEscapeBrace	oneline   contained transparent start="[^\\]\(\\\\\)*\[\zs\^\=\]\=" skip="\\\\\|\\\]" end="]"me=e-1
    7              0.000035 syn match	vimPatSepErr	contained	"\\)"
    7              0.000032 syn match	vimPatSep	contained	"\\|"
    7              0.000118 syn region	vimPatSepZone	oneline   contained   matchgroup=vimPatSepZ start="\\%\=\ze(" skip="\\\\" end="\\)\|[^\]['"]"	contains=@vimStringGroup
    7              0.000078 syn region	vimPatRegion	contained transparent matchgroup=vimPatSepR start="\\[z%]\=(" end="\\)"	contains=@vimSubstList oneline
    7              0.000031 syn match	vimNotPatSep	contained	"\\\\"
    7              0.000153 syn cluster	vimStringGroup	contains=vimEscapeBrace,vimPatSep,vimNotPatSep,vimPatSepErr,vimPatSepZone,@Spell
    7              0.000080 syn region	vimString	oneline keepend	start=+[^:a-zA-Z>!\\@]"+lc=1 skip=+\\\\\|\\"+ end=+"+	contains=@vimStringGroup
    7              0.000055 syn region	vimString	oneline keepend	start=+[^:a-zA-Z>!\\@]'+lc=1 end=+'+
    7              0.000082 syn region	vimString	oneline	start=+=!+lc=1	skip=+\\\\\|\\!+ end=+!+	contains=@vimStringGroup
    7              0.000069 syn region	vimString	oneline	start="=+"lc=1	skip="\\\\\|\\+" end="+"	contains=@vimStringGroup
    7              0.000068 syn region	vimString	oneline	start="\s/\s*\A"lc=1 skip="\\\\\|\\+" end="/"	contains=@vimStringGroup
    7              0.000066 syn match	vimString	contained	+"[^"]*\\$+	skipnl nextgroup=vimStringCont
    7              0.000049 syn match	vimStringCont	contained	+\(\\\\\|.\)\{-}[^\\]"+
                            
                            " Substitutions: {{{2
                            " =============
    7              0.000172 syn cluster	vimSubstList	contains=vimPatSep,vimPatRegion,vimPatSepErr,vimSubstTwoBS,vimSubstRange,vimNotation
    7              0.000093 syn cluster	vimSubstRepList	contains=vimSubstSubstr,vimSubstTwoBS,vimNotation
    7              0.000048 syn cluster	vimSubstList	add=vimCollection
    7              0.000106 syn match	vimSubst	"\(:\+\s*\|^\s*\||\s*\)\<\%(s\%[ubstitute]\|sm\%[agic]\|sno\%[magic]\)[:[:alpha:]]\@!" nextgroup=vimSubstPat
    7              0.000070 syn match	vimSubst	"s\%[ubstitute][:#[:alpha:]]\@!"	nextgroup=vimSubstPat contained
    7              0.000067 syn match	vimSubst	"/\zss\%[ubstitute]\ze/"	nextgroup=vimSubstPat
    7              0.000061 syn match	vimSubst1       contained	"s\%[ubstitute]\>"	nextgroup=vimSubstPat
    7              0.000128 syn region	vimSubstPat     contained	matchgroup=vimSubstDelim start="\z([^a-zA-Z( \t[\]&]\)"rs=s+1 skip="\\\\\|\\\z1" end="\z1"re=e-1,me=e-1	 contains=@vimSubstList	nextgroup=vimSubstRep4	oneline
    7              0.000151 syn region	vimSubstRep4    contained	matchgroup=vimSubstDelim start="\z(.\)" skip="\\\\\|\\\z1" end="\z1" matchgroup=vimNotation end="<[cC][rR]>" contains=@vimSubstRepList	nextgroup=vimSubstFlagErr	oneline
    7              0.000095 syn region	vimCollection   contained transparent	start="\\\@<!\[" skip="\\\[" end="\]"	contains=vimCollClass
    7              0.000037 syn match	vimCollClassErr contained	"\[:.\{-\}:\]"
    7              0.000081 syn match	vimCollClass    contained transparent	"\[:\(alnum\|alpha\|blank\|cntrl\|digit\|graph\|lower\|print\|punct\|space\|upper\|xdigit\|return\|tab\|escape\|backspace\):\]"
    7              0.000031 syn match	vimSubstSubstr  contained	"\\z\=\d"
    7              0.000038 syn match	vimSubstTwoBS   contained	"\\\\"
    7              0.000069 syn match	vimSubstFlagErr contained	"[^< \t\r|]\+" contains=vimSubstFlags
    7              0.000036 syn match	vimSubstFlags   contained	"[&cegiIpr]\+"
                            
                            " 'String': {{{2
    7              0.000056 syn match	vimString	"[^(,]'[^']\{-}\zs'"
                            
                            " Marks, Registers, Addresses, Filters: {{{2
    7              0.000127 syn match	vimMark	"'[a-zA-Z0-9]\ze[-+,!]"	nextgroup=vimOper,vimMarkNumber,vimSubst
    7              0.000122 syn match	vimMark	"'[<>]\ze[-+,!]"		nextgroup=vimOper,vimMarkNumber,vimSubst
    7              0.000118 syn match	vimMark	",\zs'[<>]\ze"		nextgroup=vimOper,vimMarkNumber,vimSubst
    7              0.000117 syn match	vimMark	"[!,:]\zs'[a-zA-Z0-9]"	nextgroup=vimOper,vimMarkNumber,vimSubst
    7              0.000124 syn match	vimMark	"\<norm\%[al]\s\zs'[a-zA-Z0-9]"	nextgroup=vimOper,vimMarkNumber,vimSubst
    7              0.000091 syn match	vimMarkNumber	"[-+]\d\+"		nextgroup=vimSubst contained contains=vimOper
    7              0.000038 syn match	vimPlainMark contained	"'[a-zA-Z0-9]"
                            
    7              0.000049 syn match	vimRegister	'[^,;[{]\zs"[a-zA-Z0-9.%#:_\-/]\ze[^a-zA-Z_":0-9]'
    7              0.000043 syn match	vimRegister	'\<norm\s\+\zs"[a-zA-Z0-9]'
    7              0.000040 syn match	vimRegister	'\<normal\s\+\zs"[a-zA-Z0-9]'
    7              0.000031 syn match	vimRegister	'@"'
    7              0.000035 syn match	vimPlainRegister contained	'"[a-zA-Z0-9\-:.%#*+=]'
                            
    7              0.000059 syn match	vimAddress	",\zs[.$]"	skipwhite nextgroup=vimSubst1
    7              0.000085 syn match	vimAddress	"%\ze\a"	skipwhite nextgroup=vimString,vimSubst1
                            
    7              0.000070 syn match	vimFilter contained	"^!.\{-}\(|\|$\)"		contains=vimSpecFile
    7              0.000151 syn match	vimFilter contained	"\A!.\{-}\(|\|$\)"ms=s+1	contains=vimSpecFile,vimFunction,vimFuncName,vimOperParen
                            
                            " Complex repeats (:h complex-repeat) {{{2
    7              0.000055 syn match	vimCmplxRepeat	'[^a-zA-Z_/\\()]q[0-9a-zA-Z"]\>'lc=1
    7              0.000045 syn match	vimCmplxRepeat	'@[0-9a-z".=@:]\ze\($\|[^a-zA-Z]\>\)'
                            
                            " Set command and associated set-options (vimOptions) with comment {{{2
    7              0.000305 syn region	vimSet		matchgroup=vimCommand start="\<\%(setl\%[ocal]\|setg\%[lobal]\|se\%[t]\)\>" skip="\%(\\\\\)*\\." end="$" matchgroup=vimNotation end="<[cC][rR]>" keepend oneline contains=vimSetEqual,vimOption,vimErrSetting,vimComment,vimSetString,vimSetMod
    7              0.000184 syn region	vimSetEqual	contained	start="[=:]\|[-+^]=" skip="\\\\\|\\\s" end="[| \t]\|$"me=e-1 contains=vimCtrlChar,vimSetSep,vimNotation,vimEnvvar oneline
    7              0.000098 syn region	vimSetString	contained	start=+="+hs=s+1	skip=+\\\\\|\\"+  end=+"+	contains=vimCtrlChar
    7              0.000034 syn match	vimSetSep	contained	"[,:]"
    7              0.000056 syn match	vimSetMod	contained	"&vim\=\|[!&?<]\|all&"
                            
                            " Let {{{2
                            " ===
    7              0.000095 syn keyword	vimLet	let	unl[et]	skipwhite nextgroup=vimVar,vimFuncVar
                            
                            " Abbreviations {{{2
                            " =============
    7              0.000145 syn keyword vimAbb	ab[breviate] ca[bbrev] inorea[bbrev] cnorea[bbrev] norea[bbrev] ia[bbrev] skipwhite nextgroup=vimMapMod,vimMapLhs
                            
                            " Autocmd {{{2
                            " =======
    7              0.000105 syn match	vimAutoEventList	contained	"\(!\s\+\)\=\(\a\+,\)*\a\+"	contains=vimAutoEvent nextgroup=vimAutoCmdSpace
    7              0.000060 syn match	vimAutoCmdSpace	contained	"\s\+"	nextgroup=vimAutoCmdSfxList
    7              0.000029 syn match	vimAutoCmdSfxList	contained	"\S*"
    7              0.000085 syn keyword	vimAutoCmd	au[tocmd] do[autocmd] doautoa[ll]	skipwhite nextgroup=vimAutoEventList
                            
                            " Echo and Execute -- prefer strings! {{{2
                            " ================
    7              0.000213 syn region	vimEcho	oneline excludenl matchgroup=vimCommand start="\<ec\%[ho]\>" skip="\(\\\\\)*\\|" end="$\||" contains=vimFunc,vimFuncVar,vimString,vimVar
    7              0.000290 syn region	vimExecute	oneline excludenl matchgroup=vimCommand start="\<exe\%[cute]\>" skip="\(\\\\\)*\\|" end="$\||\|<[cC][rR]>" contains=vimFuncVar,vimIsCommand,vimOper,vimNotation,vimOperParen,vimString,vimVar
    7              0.000118 syn match	vimEchoHL	"echohl\="	skipwhite nextgroup=vimGroup,vimHLGroup,vimEchoHLNone
    7              0.000011 syn case ignore
    7              0.000023 syn keyword	vimEchoHLNone	none
    7              0.000011 syn case match
                            
                            " Maps {{{2
                            " ====
    7              0.000092 syn match	vimMap		"\<map\>!\=\ze\s*[^(]" skipwhite nextgroup=vimMapMod,vimMapLhs
    7              0.000231 syn keyword	vimMap		cm[ap] cno[remap] im[ap] ino[remap] lm[ap] ln[oremap] nm[ap] nn[oremap] no[remap] om[ap] ono[remap] smap snor[emap] vm[ap] vn[oremap] xm[ap] xn[oremap] skipwhite nextgroup=vimMapBang,vimMapMod,vimMapLhs
    7              0.000040 syn keyword	vimMap		mapc[lear] smapc[lear]
    7              0.000173 syn keyword	vimUnmap		cu[nmap] iu[nmap] lu[nmap] nun[map] ou[nmap] sunm[ap] unm[ap] unm[ap] vu[nmap] xu[nmap] skipwhite nextgroup=vimMapBang,vimMapMod,vimMapLhs
    7              0.000130 syn match	vimMapLhs	contained	"\S\+"			contains=vimNotation,vimCtrlChar skipwhite nextgroup=vimMapRhs
    7              0.000078 syn match	vimMapBang	contained	"!"			skipwhite nextgroup=vimMapMod,vimMapLhs
    7              0.000183 syn match	vimMapMod	contained	"\c<\(buffer\|expr\|\(local\)\=leader\|plug\|script\|sid\|unique\|silent\)\+>" contains=vimMapModKey,vimMapModErr skipwhite nextgroup=vimMapMod,vimMapLhs
    7              0.000136 syn match	vimMapRhs	contained	".*" contains=vimNotation,vimCtrlChar	skipnl nextgroup=vimMapRhsExtend
    7              0.000150 syn match	vimMapRhsExtend	contained	"^\s*\\.*$"			contains=vimNotation,vimCtrlChar,vimContinue	skipnl nextgroup=vimMapRhsExtend
    7              0.000008 syn case ignore
    7              0.000052 syn keyword	vimMapModKey	contained	buffer	expr	leader	localleader	plug	script	sid	silent	unique
    7              0.000011 syn case match
                            
                            " Menus {{{2
                            " =====
    7              0.000120 syn cluster	vimMenuList contains=vimMenuBang,vimMenuPriority,vimMenuName,vimMenuMod
    7              0.000173 syn keyword	vimCommand	am[enu] an[oremenu] aun[menu] cme[nu] cnoreme[nu] cunme[nu] ime[nu] inoreme[nu] iunme[nu] me[nu] nme[nu] nnoreme[nu] noreme[nu] nunme[nu] ome[nu] onoreme[nu] ounme[nu] unme[nu] vme[nu] vnoreme[nu] vunme[nu] skipwhite nextgroup=@vimMenuList
    7              0.000093 syn match	vimMenuName	"[^ \t\\<]\+"	contained nextgroup=vimMenuNameMore,vimMenuMap
    7              0.000064 syn match	vimMenuPriority	"\d\+\(\.\d\+\)*"	contained skipwhite nextgroup=vimMenuName
    7              0.000121 syn match	vimMenuNameMore	"\c\\\s\|<tab>\|\\\."	contained nextgroup=vimMenuName,vimMenuNameMore contains=vimNotation
    7              0.000104 syn match	vimMenuMod    contained	"\c<\(script\|silent\)\+>"  skipwhite contains=vimMapModKey,vimMapModErr nextgroup=@vimMenuList
    7              0.000054 syn match	vimMenuMap	"\s"	contained skipwhite nextgroup=vimMenuRhs
    7              0.000117 syn match	vimMenuRhs	".*$"	contained contains=vimString,vimComment,vimIsCommand
    7              0.000038 syn match	vimMenuBang	"!"	contained skipwhite nextgroup=@vimMenuList
                            
                            " Angle-Bracket Notation (tnx to Michael Geddes) {{{2
                            " ======================
    7              0.000013 syn case ignore
    7              0.000192 syn match	vimNotation	"\(\\\|<lt>\)\=<\([scamd]-\)\{0,4}x\=\(f\d\{1,2}\|[^ \t:]\|cr\|lf\|linefeed\|return\|k\=del\%[ete]\|bs\|backspace\|tab\|esc\|right\|left\|help\|undo\|insert\|ins\|k\=home\|k\=end\|kplus\|kminus\|kdivide\|kmultiply\|kenter\|kpoint\|space\|k\=\(page\)\=\(\|down\|up\|k\d\>\)\)>" contains=vimBracket
    7              0.000105 syn match	vimNotation	"\(\\\|<lt>\)\=<\([scam2-4]-\)\{0,4}\(right\|left\|middle\)\(mouse\)\=\(drag\|release\)\=>"	contains=vimBracket
    7              0.000076 syn match	vimNotation	"\(\\\|<lt>\)\=<\(bslash\|plug\|sid\|space\|bar\|nop\|nul\|lt\)>"		contains=vimBracket
    7              0.000069 syn match	vimNotation	'\(\\\|<lt>\)\=<C-R>[0-9a-z"%#:.\-=]'he=e-1			contains=vimBracket
    7              0.000083 syn match	vimNotation	'\(\\\|<lt>\)\=<\%(q-\)\=\(line[12]\|count\|bang\|reg\|args\|f-args\|lt\)>'	contains=vimBracket
    7              0.000077 syn match	vimNotation	"\(\\\|<lt>\)\=<\([cas]file\|abuf\|amatch\|cword\|cWORD\|client\)>"		contains=vimBracket
    7              0.000032 syn match	vimBracket contained	"[\\<>]"
    7              0.000010 syn case match
                            
                            " User Function Highlighting {{{2
                            " (following Gautam Iyer's suggestion)
                            " ==========================
    7              0.000155 syn match vimFunc		"\%(\%([sSgGbBwWtTlL]:\|<[sS][iI][dD]>\)\=\%([a-zA-Z0-9_]\+\.\)*\I[a-zA-Z0-9_.]*\)\ze\s*("		contains=vimFuncName,vimUserFunc,vimExecute
    7              0.000101 syn match vimUserFunc contained	"\%(\%([sSgGbBwWtTlL]:\|<[sS][iI][dD]>\)\=\%([a-zA-Z0-9_]\+\.\)*\I[a-zA-Z0-9_.]*\)\|\<\u[a-zA-Z0-9.]*\>\|\<if\>"	contains=vimNotation
    7              0.000051 syn match vimNotFunc	"\<if\>\|\<el\%[seif]\>\|\<return\>\|\<while\>"
                            
                            " Errors And Warnings: {{{2
                            " ====================
    7              0.000039 if !exists("g:vimsyn_noerror") && !exists("g:vimsyn_novimfunctionerror")
    7              0.000111  syn match	vimFunctionError	"\s\zs[a-z0-9]\i\{-}\ze\s*("			contained contains=vimFuncKey,vimFuncBlank
                            " syn match	vimFunctionError	"\s\zs\%(<[sS][iI][dD]>\|[sSgGbBwWtTlL]:\)[0-9]\i\{-}\ze\s*("	contained contains=vimFuncKey,vimFuncBlank
    7              0.000040  syn match	vimElseIfErr	"\<else\s\+if\>"
    7              0.000043  syn match	vimBufnrWarn	/\<bufnr\s*(\s*["']\.['"]\s*)/
    7              0.000006 endif
                            
                            " Norm {{{2
                            " ====
    7              0.000062 syn match	vimNorm		"\<norm\%[al]!\=" skipwhite nextgroup=vimNormCmds
    7              0.000032 syn match	vimNormCmds contained	".*$"
                            
                            " Syntax {{{2
                            "=======
    7              0.000087 syn match	vimGroupList	contained	"@\=[^ \t,]*"	contains=vimGroupSpecial,vimPatSep
    7              0.000109 syn match	vimGroupList	contained	"@\=[^ \t,]*,"	nextgroup=vimGroupList contains=vimGroupSpecial,vimPatSep
    7              0.000032 syn keyword	vimGroupSpecial	contained	ALL	ALLBUT	CONTAINED	TOP
    7              0.000027 if !exists("g:vimsyn_noerror") && !exists("g:vimsyn_novimsynerror")
    7              0.000031  syn match	vimSynError	contained	"\i\+"
    7              0.000054  syn match	vimSynError	contained	"\i\+="	nextgroup=vimGroupList
    7              0.000007 endif
    7              0.000068 syn match	vimSynContains	contained	"\<contain\(s\|edin\)="	nextgroup=vimGroupList
    7              0.000075 syn match	vimSynKeyContainedin	contained	"\<containedin="	nextgroup=vimGroupList
    7              0.000057 syn match	vimSynNextgroup	contained	"nextgroup="	nextgroup=vimGroupList
                            
    7              0.000133 syn match	vimSyntax	"\<sy\%[ntax]\>"	contains=vimCommand skipwhite nextgroup=vimSynType,vimComment
    7              0.000124 syn match	vimAuSyntax	contained	"\s+sy\%[ntax]"	contains=vimCommand skipwhite nextgroup=vimSynType,vimComment
    7              0.000074 syn cluster vimFuncBodyList add=vimSyntax
                            
                            " Syntax: case {{{2
    7              0.000075 syn keyword	vimSynType	contained	case	skipwhite nextgroup=vimSynCase,vimSynCaseError
    7              0.000030 if !exists("g:vimsyn_noerror") && !exists("g:vimsyn_novimsyncaseerror")
    7              0.000033  syn match	vimSynCaseError	contained	"\i\+"
    7              0.000007 endif
    7              0.000026 syn keyword	vimSynCase	contained	ignore	match
                            
                            " Syntax: clear {{{2
    7              0.000050 syn keyword	vimSynType	contained	clear	skipwhite nextgroup=vimGroupList
                            
                            " Syntax: cluster {{{2
    7              0.000051 syn keyword	vimSynType	contained	cluster	skipwhite nextgroup=vimClusterName
    7              0.000192 syn region	vimClusterName	contained	matchgroup=vimGroupName start="\h\w*" skip="\\\\\|\\|" matchgroup=vimSep end="$\||" contains=vimGroupAdd,vimGroupRem,vimSynContains,vimSynError
    7              0.000055 syn match	vimGroupAdd	contained	"add="	nextgroup=vimGroupList
    7              0.000056 syn match	vimGroupRem	contained	"remove="	nextgroup=vimGroupList
    7              0.000092 syn cluster vimFuncBodyList add=vimSynType,vimGroupAdd,vimGroupRem
                            
                            " Syntax: include {{{2
    7              0.000049 syn keyword	vimSynType	contained	include	skipwhite nextgroup=vimGroupList
    7              0.000046 syn cluster vimFuncBodyList add=vimSynType
                            
                            " Syntax: keyword {{{2
    7              0.000088 syn cluster	vimSynKeyGroup	contains=vimSynNextgroup,vimSynKeyOpt,vimSynKeyContainedin
    7              0.000049 syn keyword	vimSynType	contained	keyword	skipwhite nextgroup=vimSynKeyRegion
    7              0.000108 syn region	vimSynKeyRegion	contained oneline keepend	matchgroup=vimGroupName start="\h\w*" skip="\\\\\|\\|" matchgroup=vimSep end="|\|$" contains=@vimSynKeyGroup
    7              0.000072 syn match	vimSynKeyOpt	contained	"\<\(conceal\|contained\|transparent\|skipempty\|skipwhite\|skipnl\)\>"
    7              0.000045 syn cluster vimFuncBodyList add=vimSynType
                            
                            " Syntax: match {{{2
    7              0.000179 syn cluster	vimSynMtchGroup	contains=vimMtchComment,vimSynContains,vimSynError,vimSynMtchOpt,vimSynNextgroup,vimSynRegPat,vimNotation
    7              0.000052 syn keyword	vimSynType	contained	match	skipwhite nextgroup=vimSynMatchRegion
    7              0.000087 syn region	vimSynMatchRegion	contained keepend	matchgroup=vimGroupName start="\h\w*" matchgroup=vimSep end="|\|$" contains=@vimSynMtchGroup
    7              0.000067 syn match	vimSynMtchOpt	contained	"\<\(conceal\|transparent\|contained\|excludenl\|skipempty\|skipwhite\|display\|extend\|skipnl\|fold\)\>"
    7              0.000021 if has("conceal")
    7              0.000057  syn match	vimSynMtchOpt	contained	"\<cchar="	nextgroup=vimSynMtchCchar
    7              0.000029  syn match	vimSynMtchCchar	contained	"\S"
    7              0.000005 endif
    7              0.000045 syn cluster vimFuncBodyList add=vimSynMtchGroup
                            
                            " Syntax: off and on {{{2
    7              0.000034 syn keyword	vimSynType	contained	enable	list	manual	off	on	reset
                            
                            " Syntax: region {{{2
    7              0.000218 syn cluster	vimSynRegPatGroup	contains=vimPatSep,vimNotPatSep,vimSynPatRange,vimSynNotPatRange,vimSubstSubstr,vimPatRegion,vimPatSepErr,vimNotation
    7              0.000124 syn cluster	vimSynRegGroup	contains=vimSynContains,vimSynNextgroup,vimSynRegOpt,vimSynReg,vimSynMtchGrp
    7              0.000047 syn keyword	vimSynType	contained	region	skipwhite nextgroup=vimSynRegion
    7              0.000083 syn region	vimSynRegion	contained keepend	matchgroup=vimGroupName start="\h\w*" skip="\\\\\|\\|" end="|\|$" contains=@vimSynRegGroup
    7              0.000077 syn match	vimSynRegOpt	contained	"\<\(conceal\(ends\)\=\|transparent\|contained\|excludenl\|skipempty\|skipwhite\|display\|keepend\|oneline\|extend\|skipnl\|fold\)\>"
    7              0.000063 syn match	vimSynReg	contained	"\(start\|skip\|end\)="he=e-1	nextgroup=vimSynRegPat
    7              0.000101 syn match	vimSynMtchGrp	contained	"matchgroup="	nextgroup=vimGroup,vimHLGroup
    7              0.000129 syn region	vimSynRegPat	contained extend	start="\z([-`~!@#$%^&*_=+;:'",./?]\)"  skip="\\\\\|\\\z1"  end="\z1"  contains=@vimSynRegPatGroup skipwhite nextgroup=vimSynPatMod,vimSynReg
    7              0.000051 syn match	vimSynPatMod	contained	"\(hs\|ms\|me\|hs\|he\|rs\|re\)=[se]\([-+]\d\+\)\="
    7              0.000077 syn match	vimSynPatMod	contained	"\(hs\|ms\|me\|hs\|he\|rs\|re\)=[se]\([-+]\d\+\)\=," nextgroup=vimSynPatMod
    7              0.000031 syn match	vimSynPatMod	contained	"lc=\d\+"
    7              0.000053 syn match	vimSynPatMod	contained	"lc=\d\+," nextgroup=vimSynPatMod
    7              0.000062 syn region	vimSynPatRange	contained	start="\["	skip="\\\\\|\\]"   end="]"
    7              0.000033 syn match	vimSynNotPatRange	contained	"\\\\\|\\\["
    7              0.000051 syn match	vimMtchComment	contained	'"[^"]\+$'
    7              0.000048 syn cluster vimFuncBodyList add=vimSynType
                            
                            " Syntax: sync {{{2
                            " ============
    7              0.000179 syn keyword vimSynType	contained	sync	skipwhite	nextgroup=vimSyncC,vimSyncLines,vimSyncMatch,vimSyncError,vimSyncLinebreak,vimSyncLinecont,vimSyncRegion
    7              0.000034 if !exists("g:vimsyn_noerror") && !exists("g:vimsyn_novimsyncerror")
    7              0.000032  syn match	vimSyncError	contained	"\i\+"
    7              0.000007 endif
    7              0.000030 syn keyword	vimSyncC	contained	ccomment	clear	fromstart
    7              0.000049 syn keyword	vimSyncMatch	contained	match	skipwhite	nextgroup=vimSyncGroupName
    7              0.000046 syn keyword	vimSyncRegion	contained	region	skipwhite	nextgroup=vimSynReg
    7              0.000069 syn match	vimSyncLinebreak	contained	"\<linebreaks="	skipwhite	nextgroup=vimNumber
    7              0.000047 syn keyword	vimSyncLinecont	contained	linecont	skipwhite	nextgroup=vimSynRegPat
    7              0.000069 syn match	vimSyncLines	contained	"\(min\|max\)\=lines="	nextgroup=vimNumber
    7              0.000053 syn match	vimSyncGroupName	contained	"\h\w*"	skipwhite	nextgroup=vimSyncKey
    7              0.000065 syn match	vimSyncKey	contained	"\<groupthere\|grouphere\>"	skipwhite nextgroup=vimSyncGroup
    7              0.000070 syn match	vimSyncGroup	contained	"\h\w*"	skipwhite	nextgroup=vimSynRegPat,vimSyncNone
    7              0.000023 syn keyword	vimSyncNone	contained	NONE
                            
                            " Additional IsCommand, here by reasons of precedence {{{2
                            " ====================
    7              0.000107 syn match	vimIsCommand	"<Bar>\s*\a\+"	transparent contains=vimCommand,vimNotation
                            
                            " Highlighting {{{2
                            " ============
    7              0.000104 syn cluster	vimHighlightCluster		contains=vimHiLink,vimHiClear,vimHiKeyList,vimComment
    7              0.000028 if !exists("g:vimsyn_noerror") && !exists("g:vimsyn_novimhictermerror")
    7              0.000033  syn match	vimHiCtermError	contained	"[^0-9]\i*"
    7              0.000006 endif
    7              0.000077 syn match	vimHighlight	"\<hi\%[ghlight]\>"	skipwhite nextgroup=vimHiBang,@vimHighlightCluster
    7              0.000041 syn match	vimHiBang	contained	"!"	skipwhite nextgroup=@vimHighlightCluster
                            
    7              0.000029 syn match	vimHiGroup	contained	"\i\+"
    7              0.000011 syn case ignore
    7              0.000044 syn keyword	vimHiAttrib	contained	none bold inverse italic reverse standout underline undercurl
    7              0.000035 syn keyword	vimFgBgAttrib	contained	none bg background fg foreground
    7              0.000007 syn case match
    7              0.000047 syn match	vimHiAttribList	contained	"\i\+"	contains=vimHiAttrib
    7              0.000074 syn match	vimHiAttribList	contained	"\i\+,"he=e-1	contains=vimHiAttrib nextgroup=vimHiAttribList
    7              0.000014 syn case ignore
    7              0.000093 syn keyword	vimHiCtermColor	contained	black blue brown cyan darkblue darkcyan darkgray darkgreen darkgrey darkmagenta darkred darkyellow gray green grey lightblue lightcyan lightgray lightgreen lightgrey lightmagenta lightred magenta red white yellow
    7              0.000039 syn match	vimHiCtermColor	contained	"\<color\d\{1,3}\>"
                            
    7              0.000008 syn case match
    7              0.000039 syn match	vimHiFontname	contained	"[a-zA-Z\-*]\+"
    7              0.000038 syn match	vimHiGuiFontname	contained	"'[a-zA-Z\-* ]\+'"
    7              0.000034 syn match	vimHiGuiRgb	contained	"#\x\{6}"
                            
                            " Highlighting: hi group key=arg ... {{{2
    7              0.000250 syn cluster	vimHiCluster contains=vimGroup,vimHiGroup,vimHiTerm,vimHiCTerm,vimHiStartStop,vimHiCtermFgBg,vimHiGui,vimHiGuiFont,vimHiGuiFgBg,vimHiKeyError,vimNotation
    7              0.000077 syn region	vimHiKeyList	contained oneline start="\i\+" skip="\\\\\|\\|" end="$\||"	contains=@vimHiCluster
    7              0.000032 if !exists("g:vimsyn_noerror") && !exists("g:vimsyn_vimhikeyerror")
    7              0.000032  syn match	vimHiKeyError	contained	"\i\+="he=e-1
    7              0.000007 endif
    7              0.000052 syn match	vimHiTerm	contained	"\cterm="he=e-1		nextgroup=vimHiAttribList
    7              0.000087 syn match	vimHiStartStop	contained	"\c\(start\|stop\)="he=e-1	nextgroup=vimHiTermcap,vimOption
    7              0.000052 syn match	vimHiCTerm	contained	"\ccterm="he=e-1		nextgroup=vimHiAttribList
    7              0.000115 syn match	vimHiCtermFgBg	contained	"\ccterm[fb]g="he=e-1	nextgroup=vimHiNmbr,vimHiCtermColor,vimFgBgAttrib,vimHiCtermError
    7              0.000050 syn match	vimHiGui	contained	"\cgui="he=e-1		nextgroup=vimHiAttribList
    7              0.000049 syn match	vimHiGuiFont	contained	"\cfont="he=e-1		nextgroup=vimHiFontname
    7              0.000122 syn match	vimHiGuiFgBg	contained	"\cgui\%([fb]g\|sp\)="he=e-1	nextgroup=vimHiGroup,vimHiGuiFontname,vimHiGuiRgb,vimFgBgAttrib
    7              0.000061 syn match	vimHiTermcap	contained	"\S\+"		contains=vimNotation
    7              0.000026 syn match	vimHiNmbr	contained	'\d\+'
                            
                            " Highlight: clear {{{2
    7              0.000047 syn keyword	vimHiClear	contained	clear	nextgroup=vimHiGroup
                            
                            " Highlight: link {{{2
    7              0.000218 syn region	vimHiLink	contained oneline matchgroup=vimCommand start="\(\<hi\%[ghlight]\s\+\)\@<=\(\(def\%[ault]\s\+\)\=link\>\|\<def\>\)" end="$"	contains=vimHiGroup,vimGroup,vimHLGroup,vimNotation
    7              0.000044 syn cluster vimFuncBodyList add=vimHiLink
                            
                            " Control Characters {{{2
                            " ==================
    7              0.000039 syn match	vimCtrlChar	"[--]"
                            
                            " Beginners - Patterns that involve ^ {{{2
                            " =========
    7              0.000102 syn match	vimLineComment	+^[ \t:]*".*$+	contains=@vimCommentGroup,vimCommentString,vimCommentTitle
    7              0.000119 syn match	vimCommentTitle	'"\s*\%([sS]:\|\h\w*#\)\=\u\w*\(\s\+\u\w*\)*:'hs=s+1	contained contains=vimCommentTitleLeader,vimTodo,@vimCommentGroup
    7              0.000033 syn match	vimContinue	"^\s*\\"
    7              0.000116 syn region	vimString	start="^\s*\\\z(['"]\)" skip='\\\\\|\\\z1' end="\z1" oneline keepend contains=@vimStringGroup,vimContinue
    7              0.000032 syn match	vimCommentTitleLeader	'"\s\+'ms=s+1	contained
                            
                            " Searches And Globals: {{{2
                            " ====================
    7              0.000074 syn match	vimSearch	'^\s*[/?].*'		contains=vimSearchDelim
    7              0.000037 syn match	vimSearchDelim	'^\s*\zs[/?]\|[/?]$'	contained
    7              0.000127 syn region	vimGlobal	matchgroup=Statement start='\<g\%[lobal]!\=/'  skip='\\.' end='/'	skipwhite nextgroup=vimSubst
    7              0.000123 syn region	vimGlobal	matchgroup=Statement start='\<v\%[global]!\=/' skip='\\.' end='/'	skipwhite nextgroup=vimSubst
                            
                            " Scripts  : perl,ruby : Benoit Cerrina {{{2
                            " =======    python,tcl: Johannes Zellner
                            "            lua
                            
                            " Allows users to specify the type of embedded script highlighting
                            " they want:  (perl/python/ruby/tcl support)
                            "   g:vimsyn_embed == 0   : don't embed any scripts
                            "   g:vimsyn_embed ~= 'l' : embed lua      (but only if vim supports it)
                            "   g:vimsyn_embed ~= 'm' : embed mzscheme (but only if vim supports it)
                            "   g:vimsyn_embed ~= 'p' : embed perl     (but only if vim supports it)
                            "   g:vimsyn_embed ~= 'P' : embed python   (but only if vim supports it)
                            "   g:vimsyn_embed ~= 'r' : embed ruby     (but only if vim supports it)
                            "   g:vimsyn_embed ~= 't' : embed tcl      (but only if vim supports it)
    7              0.000026 if !exists("g:vimsyn_embed")
                             let g:vimsyn_embed= "lmpPr"
                            endif
                            
                            " [-- lua --] {{{3
    7              0.000155 let s:luapath= fnameescape(expand("<sfile>:p:h")."/lua.vim")
    7              0.000096 if !filereadable(s:luapath)
                             for s:luapath in split(globpath(&rtp,"syntax/lua.vim"),"\n")
                              if filereadable(fnameescape(s:luapath))
                               let s:luapath= fnameescape(s:luapath)
                               break
                              endif
                             endfor
                            endif
    7              0.000098 if (g:vimsyn_embed =~ 'l' && has("lua")) && filereadable(s:luapath)
    7              0.000014  unlet! b:current_syntax
    7              0.000328  exe "syn include @vimLuaScript ".s:luapath
    7              0.000031  if exists("g:vimsyn_folding") && g:vimsyn_folding =~ 'l'
                              syn region vimLuaRegion fold matchgroup=vimScriptDelim start=+lua\s*<<\s*\z(.*\)$+ end=+^\z1$+	contains=@vimLuaScript
                              syn region vimLuaRegion fold matchgroup=vimScriptDelim start=+lua\s*<<\s*$+ end=+\.$+		contains=@vimLuaScript
                             else
    7              0.000076   syn region vimLuaRegion matchgroup=vimScriptDelim start=+lua\s*<<\s*\z(.*\)$+ end=+^\z1$+	contains=@vimLuaScript
    7              0.000070   syn region vimLuaRegion matchgroup=vimScriptDelim start=+lua\s*<<\s*$+ end=+\.$+		contains=@vimLuaScript
    7              0.000006  endif
    7              0.000048  syn cluster vimFuncBodyList	add=vimLuaRegion
    7              0.000005 else
                             syn region vimEmbedError start=+lua\s*<<\s*\z(.*\)$+ end=+^\z1$+
                             syn region vimEmbedError start=+lua\s*<<\s*$+ end=+\.$+
                            endif
    7              0.000012 unlet s:luapath
                            
                            " [-- perl --] {{{3
    7              0.000159 let s:perlpath= fnameescape(expand("<sfile>:p:h")."/perl.vim")
    7              0.000093 if !filereadable(s:perlpath)
                             for s:perlpath in split(globpath(&rtp,"syntax/perl.vim"),"\n")
                              if filereadable(fnameescape(s:perlpath))
                               let s:perlpath= fnameescape(s:perlpath)
                               break
                              endif
                             endfor
                            endif
    7              0.000060 if (g:vimsyn_embed =~ 'p' && has("perl")) && filereadable(s:perlpath)
                             unlet! b:current_syntax
                             exe "syn include @vimPerlScript ".s:perlpath
                             if exists("g:vimsyn_folding") && g:vimsyn_folding =~ 'p'
                              syn region vimPerlRegion fold matchgroup=vimScriptDelim start=+pe\%[rl]\s*<<\s*\z(.*\)$+ end=+^\z1$+	contains=@vimPerlScript
                              syn region vimPerlRegion fold matchgroup=vimScriptDelim start=+pe\%[rl]\s*<<\s*$+ end=+\.$+	contains=@vimPerlScript
                             else
                              syn region vimPerlRegion matchgroup=vimScriptDelim start=+pe\%[rl]\s*<<\s*\z(.*\)$+ end=+^\z1$+	contains=@vimPerlScript
                              syn region vimPerlRegion matchgroup=vimScriptDelim start=+pe\%[rl]\s*<<\s*$+ end=+\.$+		contains=@vimPerlScript
                             endif
                             syn cluster vimFuncBodyList	add=vimPerlRegion
                            else
    7              0.000054  syn region vimEmbedError start=+pe\%[rl]\s*<<\s*\z(.*\)$+ end=+^\z1$+
    7              0.000054  syn region vimEmbedError start=+pe\%[rl]\s*<<\s*$+ end=+\.$+
    7              0.000006 endif
    7              0.000013 unlet s:perlpath
                            
                            " [-- ruby --] {{{3
    7              0.000134 let s:rubypath= fnameescape(expand("<sfile>:p:h")."/ruby.vim")
    7              0.000074 if !filereadable(s:rubypath)
                             for s:rubypath in split(globpath(&rtp,"syntax/ruby.vim"),"\n")
                              if filereadable(fnameescape(s:rubypath))
                               let s:rubypath= fnameescape(s:rubypath)
                               break
                              endif
                             endfor
                            endif
    7              0.000102 if (g:vimsyn_embed =~ 'r' && has("ruby")) && filereadable(s:rubypath)
    7              0.000015  unlet! b:current_syntax
    7              0.000355  exe "syn include @vimRubyScript ".s:rubypath
    7              0.000027  if exists("g:vimsyn_folding") && g:vimsyn_folding =~ 'r'
                              syn region vimRubyRegion fold matchgroup=vimScriptDelim start=+rub[y]\s*<<\s*\z(.*\)$+ end=+^\z1$+	contains=@vimRubyScript
                             else
    7              0.000070   syn region vimRubyRegion matchgroup=vimScriptDelim start=+rub[y]\s*<<\s*\z(.*\)$+ end=+^\z1$+	contains=@vimRubyScript
    7              0.000007  endif
    7              0.000069  syn region vimRubyRegion matchgroup=vimScriptDelim start=+rub[y]\s*<<\s*$+ end=+\.$+		contains=@vimRubyScript
    7              0.000041  syn cluster vimFuncBodyList	add=vimRubyRegion
    7              0.000005 else
                             syn region vimEmbedError start=+rub[y]\s*<<\s*\z(.*\)$+ end=+^\z1$+
                             syn region vimEmbedError start=+rub[y]\s*<<\s*$+ end=+\.$+
                            endif
    7              0.000013 unlet s:rubypath
                            
                            " [-- python --] {{{3
    7              0.000158 let s:pythonpath= fnameescape(expand("<sfile>:p:h")."/python.vim")
    7              0.000084 if !filereadable(s:pythonpath)
                             for s:pythonpath in split(globpath(&rtp,"syntax/python.vim"),"\n")
                              if filereadable(fnameescape(s:pythonpath))
                               let s:pythonpath= fnameescape(s:pythonpath)
                               break
                              endif
                             endfor
                            endif
    7              0.000105 if g:vimsyn_embed =~ 'P' && (has("python") || has("python3")) && filereadable(s:pythonpath)
    7              0.000014  unlet! b:current_syntax
    7              0.000357  exe "syn include @vimPythonScript ".s:pythonpath
    7              0.000025  if exists("g:vimsyn_folding") && g:vimsyn_folding =~ 'P'
                              syn region vimPythonRegion fold matchgroup=vimScriptDelim start=+py\%[thon]3\=\s*<<\s*\z(.*\)$+ end=+^\z1$+	contains=@vimPythonScript
                              syn region vimPythonRegion fold matchgroup=vimScriptDelim start=+py\%[thon]3\=\s*<<\s*$+ end=+\.$+		contains=@vimPythonScript
                             else
    7              0.000075   syn region vimPythonRegion matchgroup=vimScriptDelim start=+py\%[thon]3\=\s*<<\s*\z(.*\)$+ end=+^\z1$+		contains=@vimPythonScript
    7              0.000062   syn region vimPythonRegion matchgroup=vimScriptDelim start=+py\%[thon]3\=\s*<<\s*$+ end=+\.$+		contains=@vimPythonScript
    7              0.000006  endif
    7              0.000041  syn cluster vimFuncBodyList	add=vimPythonRegion
    7              0.000007 else
                             syn region vimEmbedError start=+py\%[thon]3\=\s*<<\s*\z(.*\)$+ end=+^\z1$+
                             syn region vimEmbedError start=+py\%[thon]3\=\s*<<\s*$+ end=+\.$+
                            endif
    7              0.000010 unlet s:pythonpath
                            
                            " [-- tcl --] {{{3
    7              0.000069 if has("win32") || has("win95") || has("win64") || has("win16")
                             " apparently has("tcl") has been hanging vim on some windows systems with cygwin
                             let s:trytcl= (&shell !~ '\<\%(bash\>\|4[nN][tT]\|\<zsh\)\>\%(\.exe\)\=$')
                            else
    7              0.000031  let s:trytcl= 1
    7              0.000006 endif
    7              0.000008 if s:trytcl
    7              0.000137  let s:tclpath= fnameescape(expand("<sfile>:p:h")."/tcl.vim")
    7              0.000081  if !filereadable(s:tclpath)
                              for s:tclpath in split(globpath(&rtp,"syntax/tcl.vim"),"\n")
                               if filereadable(fnameescape(s:tclpath))
                                let s:tclpath= fnameescape(s:tclpath)
                                break
                               endif
                              endfor
                             endif
    7              0.000039  if (g:vimsyn_embed =~ 't' && has("tcl")) && filereadable(s:tclpath)
                              unlet! b:current_syntax
                              exe "syn include @vimTclScript ".s:tclpath
                              if exists("g:vimsyn_folding") && g:vimsyn_folding =~ 't'
                               syn region vimTclRegion fold matchgroup=vimScriptDelim start=+tc[l]\=\s*<<\s*\z(.*\)$+ end=+^\z1$+	contains=@vimTclScript
                               syn region vimTclRegion fold matchgroup=vimScriptDelim start=+tc[l]\=\s*<<\s*$+ end=+\.$+	contains=@vimTclScript
                              else
                               syn region vimTclRegion matchgroup=vimScriptDelim start=+tc[l]\=\s*<<\s*\z(.*\)$+ end=+^\z1$+	contains=@vimTclScript
                               syn region vimTclRegion matchgroup=vimScriptDelim start=+tc[l]\=\s*<<\s*$+ end=+\.$+		contains=@vimTclScript
                              endif
                              syn cluster vimFuncBodyList	add=vimTclScript
                             else
    7              0.000049   syn region vimEmbedError start=+tc[l]\=\s*<<\s*\z(.*\)$+ end=+^\z1$+
    7              0.000046   syn region vimEmbedError start=+tc[l]\=\s*<<\s*$+ end=+\.$+
    7              0.000006  endif
    7              0.000010  unlet s:tclpath
    7              0.000005 else
                             syn region vimEmbedError start=+tc[l]\=\s*<<\s*\z(.*\)$+ end=+^\z1$+
                             syn region vimEmbedError start=+tc[l]\=\s*<<\s*$+ end=+\.$+
                            endif
    7              0.000024 unlet s:trytcl
                            
                            " [-- mzscheme --] {{{3
    7              0.000126 let s:mzschemepath= fnameescape(expand("<sfile>:p:h")."/scheme.vim")
    7              0.000071 if !filereadable(s:mzschemepath)
                             for s:mzschemepath in split(globpath(&rtp,"syntax/mzscheme.vim"),"\n")
                              if filereadable(fnameescape(s:mzschemepath))
                               let s:mzschemepath= fnameescape(s:mzschemepath)
                               break
                              endif
                             endfor
                            endif
    7              0.000053 if (g:vimsyn_embed =~ 'm' && has("mzscheme")) && filereadable(s:mzschemepath)
                             unlet! b:current_syntax
                             let iskKeep= &isk
                             exe "syn include @vimMzSchemeScript ".s:mzschemepath
                             let &isk= iskKeep
                             if exists("g:vimsyn_folding") && g:vimsyn_folding =~ 'm'
                              syn region vimMzSchemeRegion fold matchgroup=vimScriptDelim start=+mz\%[scheme]\s*<<\s*\z(.*\)$+ end=+^\z1$+	contains=@vimMzSchemeScript
                              syn region vimMzSchemeRegion fold matchgroup=vimScriptDelim start=+mz\%[scheme]\s*<<\s*$+ end=+\.$+		contains=@vimMzSchemeScript
                             else
                              syn region vimMzSchemeRegion matchgroup=vimScriptDelim start=+mz\%[scheme]\s*<<\s*\z(.*\)$+ end=+^\z1$+		contains=@vimMzSchemeScript
                              syn region vimMzSchemeRegion matchgroup=vimScriptDelim start=+mz\%[scheme]\s*<<\s*$+ end=+\.$+		contains=@vimMzSchemeScript
                             endif
                             syn cluster vimFuncBodyList	add=vimMzSchemeRegion
                            else
    7              0.000047  syn region vimEmbedError start=+mz\%[scheme]\s*<<\s*\z(.*\)$+ end=+^\z1$+
    7              0.000049  syn region vimEmbedError start=+mz\%[scheme]\s*<<\s*$+ end=+\.$+
    7              0.000006 endif
    7              0.000013 unlet s:mzschemepath
                            
                            " Synchronize (speed) {{{2
                            "============
    7              0.000019 if exists("g:vimsyn_minlines")
                             exe "syn sync minlines=".g:vimsyn_minlines
                            endif
    7              0.000015 if exists("g:vimsyn_maxlines")
                             exe "syn sync maxlines=".g:vimsyn_maxlines
                            else
    7              0.000017  syn sync maxlines=60
    7              0.000005 endif
    7              0.000027 syn sync linecont	"^\s\+\\"
    7              0.000047 syn sync match vimAugroupSyncA	groupthere NONE	"\<aug\%[roup]\>\s\+[eE][nN][dD]"
                            
                            " ====================
                            " Highlighting Settings {{{2
                            " ====================
                            
                            
    7              0.000016 if !exists("g:vimsyn_noerror")
    7              0.000034  hi def link vimBehaveError	vimError
    7              0.000023  hi def link vimCollClassErr	vimError
    7              0.000024  hi def link vimErrSetting	vimError
    7              0.000017  hi def link vimEmbedError	vimError
    7              0.000024  hi def link vimFTError	vimError
    7              0.000025  hi def link vimFunctionError	vimError
    7              0.000025  hi def link vimFunc         	vimError
    7              0.000018  hi def link vimHiAttribList	vimError
    7              0.000020  hi def link vimHiCtermError	vimError
    7              0.000017  hi def link vimHiKeyError	vimError
    7              0.000014  hi def link vimKeyCodeError	vimError
    7              0.000023  hi def link vimMapModErr	vimError
    7              0.000021  hi def link vimSubstFlagErr	vimError
    7              0.000018  hi def link vimSynCaseError	vimError
    7              0.000034  hi def link vimBufnrWarn	vimWarn
    7              0.000006 endif
                            
    7              0.000039 hi def link vimAbb	vimCommand
    7              0.000033 hi def link vimAddress	vimMark
    7              0.000037 hi def link vimAugroupKey	vimCommand
    7              0.000023 hi def link vimAuHighlight	vimHighlight
    7              0.000025 hi def link vimAutoCmdOpt	vimOption
    7              0.000039 hi def link vimAutoCmd	vimCommand
    7              0.000038 hi def link vimAutoEvent	Type
    7              0.000029 hi def link vimAutoSet	vimCommand
    7              0.000034 hi def link vimBehaveModel	vimBehave
    7              0.000036 hi def link vimBehave	vimCommand
    7              0.000035 hi def link vimBracket	Delimiter
    7              0.000037 hi def link vimCmplxRepeat	SpecialChar
    7              0.000045 hi def link vimCommand	Statement
    7              0.000038 hi def link vimComment	Comment
    7              0.000031 hi def link vimCommentString	vimString
    7              0.000035 hi def link vimCommentTitle	PreProc
    7              0.000029 hi def link vimCondHL	vimCommand
    7              0.000037 hi def link vimContinue	Special
    7              0.000038 hi def link vimCtrlChar	SpecialChar
    7              0.000033 hi def link vimEchoHLNone	vimGroup
    7              0.000036 hi def link vimEchoHL	vimCommand
    7              0.000034 hi def link vimElseIfErr	Error
    7              0.000013 hi def link vimElseif	vimCondHL
    7              0.000038 hi def link vimEnvvar	PreProc
    7              0.000029 hi def link vimError	Error
    7              0.000032 hi def link vimFBVar	vimVar
    7              0.000025 hi def link vimFgBgAttrib	vimHiAttrib
    7              0.000033 hi def link vimFold	Folded
    7              0.000036 hi def link vimFTCmd	vimCommand
    7              0.000042 hi def link vimFTOption	vimSynType
    7              0.000038 hi def link vimFuncKey	vimCommand
    7              0.000037 hi def link vimFuncName	Function
    7              0.000037 hi def link vimFuncSID	Special
    7              0.000037 hi def link vimFuncVar	Identifier
    7              0.000020 hi def link vimGroupAdd	vimSynOption
    7              0.000029 hi def link vimGroupName	vimGroup
    7              0.000019 hi def link vimGroupRem	vimSynOption
    7              0.000036 hi def link vimGroupSpecial	Special
    7              0.000037 hi def link vimGroup	Type
    7              0.000035 hi def link vimHiAttrib	PreProc
    7              0.000027 hi def link vimHiClear	vimHighlight
    7              0.000024 hi def link vimHiCtermFgBg	vimHiTerm
    7              0.000023 hi def link vimHiCTerm	vimHiTerm
    7              0.000036 hi def link vimHighlight	vimCommand
    7              0.000022 hi def link vimHiGroup	vimGroupName
    7              0.000023 hi def link vimHiGuiFgBg	vimHiTerm
    7              0.000022 hi def link vimHiGuiFont	vimHiTerm
    7              0.000027 hi def link vimHiGuiRgb	vimNumber
    7              0.000023 hi def link vimHiGui	vimHiTerm
    7              0.000034 hi def link vimHiNmbr	Number
    7              0.000023 hi def link vimHiStartStop	vimHiTerm
    7              0.000031 hi def link vimHiTerm	Type
    7              0.000037 hi def link vimHLGroup	vimGroup
    7              0.000028 hi def link vimHLMod	PreProc
    7              0.000031 hi def link vimInsert	vimString
    7              0.000023 hi def link vimKeyCode	vimSpecFile
    7              0.000030 hi def link vimKeyword	Statement
    7              0.000036 hi def link vimLet	vimCommand
    7              0.000033 hi def link vimLineComment	vimComment
    7              0.000036 hi def link vimMapBang	vimCommand
    7              0.000046 hi def link vimMapModKey	vimFuncSID
    7              0.000038 hi def link vimMapMod	vimBracket
    7              0.000037 hi def link vimMap	vimCommand
    7              0.000037 hi def link vimMark	Number
    7              0.000031 hi def link vimMarkNumber	vimNumber
    7              0.000027 hi def link vimMenuMod	vimMapMod
    7              0.000028 hi def link vimMenuNameMore	vimMenuName
    7              0.000035 hi def link vimMenuName	PreProc
    7              0.000026 hi def link vimMtchComment	vimComment
    7              0.000035 hi def link vimNorm	vimCommand
    7              0.000040 hi def link vimNotation	Special
    7              0.000038 hi def link vimNotFunc	vimCommand
    7              0.000030 hi def link vimNotPatSep	vimString
    7              0.000036 hi def link vimNumber	Number
    7              0.000038 hi def link vimOperError	Error
    7              0.000038 hi def link vimOper	Operator
    7              0.000039 hi def link vimOption	PreProc
    7              0.000036 hi def link vimParenSep	Delimiter
    7              0.000029 hi def link vimPatSepErr	vimPatSep
    7              0.000028 hi def link vimPatSepR	vimPatSep
    7              0.000036 hi def link vimPatSep	SpecialChar
    7              0.000030 hi def link vimPatSepZone	vimString
    7              0.000028 hi def link vimPatSepZ	vimPatSep
    7              0.000035 hi def link vimPattern	Type
    7              0.000030 hi def link vimPlainMark	vimMark
    7              0.000033 hi def link vimPlainRegister	vimRegister
    7              0.000038 hi def link vimRegister	SpecialChar
    7              0.000031 hi def link vimScriptDelim	Comment
    7              0.000034 hi def link vimSearchDelim	Statement
    7              0.000026 hi def link vimSearch	vimString
    7              0.000037 hi def link vimSep	Delimiter
    7              0.000033 hi def link vimSetMod	vimOption
    7              0.000033 hi def link vimSetSep	Statement
    7              0.000042 hi def link vimSetString	vimString
    7              0.000039 hi def link vimSpecFile	Identifier
    7              0.000031 hi def link vimSpecFileMod	vimSpecFile
    7              0.000028 hi def link vimSpecial	Type
    7              0.000030 hi def link vimStatement	Statement
    7              0.000029 hi def link vimStringCont	vimString
    7              0.000038 hi def link vimString	String
    7              0.000031 hi def link vimSubst1	vimSubst
    7              0.000035 hi def link vimSubstDelim	Delimiter
    7              0.000037 hi def link vimSubstFlags	Special
    7              0.000036 hi def link vimSubstSubstr	SpecialChar
    7              0.000031 hi def link vimSubstTwoBS	vimString
    7              0.000038 hi def link vimSubst	vimCommand
    7              0.000036 hi def link vimSynCaseError	Error
    7              0.000034 hi def link vimSynCase	Type
    7              0.000032 hi def link vimSyncC	Type
    7              0.000036 hi def link vimSyncError	Error
    7              0.000027 hi def link vimSyncGroupName	vimGroupName
    7              0.000024 hi def link vimSyncGroup	vimGroupName
    7              0.000033 hi def link vimSyncKey	Type
    7              0.000033 hi def link vimSyncNone	Type
    7              0.000022 hi def link vimSynContains	vimSynOption
    7              0.000035 hi def link vimSynError	Error
    7              0.000028 hi def link vimSynKeyContainedin	vimSynContains
    7              0.000016 hi def link vimSynKeyOpt	vimSynOption
    7              0.000018 hi def link vimSynMtchGrp	vimSynOption
    7              0.000019 hi def link vimSynMtchOpt	vimSynOption
    7              0.000018 hi def link vimSynNextgroup	vimSynOption
    7              0.000027 hi def link vimSynNotPatRange	vimSynRegPat
    7              0.000031 hi def link vimSynOption	Special
    7              0.000029 hi def link vimSynPatRange	vimString
    7              0.000016 hi def link vimSynRegOpt	vimSynOption
    7              0.000039 hi def link vimSynRegPat	vimString
    7              0.000034 hi def link vimSynReg	Type
    7              0.000037 hi def link vimSyntax	vimCommand
    7              0.000019 hi def link vimSynType	vimSpecial
    7              0.000038 hi def link vimTodo	Todo
    7              0.000030 hi def link vimUnmap	vimMap
    7              0.000041 hi def link vimUserAttrbCmpltFunc	Special
    7              0.000025 hi def link vimUserAttrbCmplt	vimSpecial
    7              0.000029 hi def link vimUserAttrbKey	vimOption
    7              0.000022 hi def link vimUserAttrb	vimSpecial
    7              0.000036 hi def link vimUserCmdError	Error
    7              0.000038 hi def link vimUserCommand	vimCommand
    7              0.000035 hi def link vimUserFunc	Normal
    7              0.000037 hi def link vimVar	Identifier
    7              0.000029 hi def link vimWarn	WarningMsg
                            
                            " Current Syntax Variable: {{{2
    7              0.000021 let b:current_syntax = "vim"
                            
                            " ---------------------------------------------------------------------
                            " Cleanup: {{{1
    7              0.000036 let &cpo = s:keepcpo
    7              0.000013 unlet s:keepcpo
                            " vim:ts=18  fdm=marker

SCRIPT  /usr/local/Cellar/vim/7.4.335/share/vim/vim74/syntax/lua.vim
Sourced 7 times
Total time:   0.011768
 Self time:   0.011768

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:	Lua 4.0, Lua 5.0, Lua 5.1 and Lua 5.2
                            " Maintainer:	Marcus Aurelius Farias <masserahguard-lua 'at' yahoo com>
                            " First Author:	Carlos Augusto Teixeira Mendes <cmendes 'at' inf puc-rio br>
                            " Last Change:	2012 Aug 12
                            " Options:	lua_version = 4 or 5
                            "		lua_subversion = 0 (4.0, 5.0) or 1 (5.1) or 2 (5.2)
                            "		default 5.2
                            
                            " For version 5.x: Clear all syntax items
                            " For version 6.x: Quit when a syntax file was already loaded
    7              0.000018 if version < 600
                              syntax clear
                            elseif exists("b:current_syntax")
                              finish
                            endif
                            
    7              0.000048 let s:cpo_save = &cpo
    7              0.000048 set cpo&vim
                            
    7              0.000024 if !exists("lua_version")
                              " Default is lua 5.2
                              let lua_version = 5
                              let lua_subversion = 2
                            elseif !exists("lua_subversion")
                              " lua_version exists, but lua_subversion doesn't. So, set it to 0
                              let lua_subversion = 0
                            endif
                            
    7              0.000015 syn case match
                            
                            " syncing method
    7              0.000023 syn sync minlines=100
                            
                            " Comments
    7              0.000066 syn keyword luaTodo            contained TODO FIXME XXX
    7              0.000082 syn match   luaComment         "--.*$" contains=luaTodo,@Spell
    7              0.000017 if lua_version == 5 && lua_subversion == 0
                              syn region luaComment        matchgroup=luaComment start="--\[\[" end="\]\]" contains=luaTodo,luaInnerComment,@Spell
                              syn region luaInnerComment   contained transparent start="\[\[" end="\]\]"
                            elseif lua_version > 5 || (lua_version == 5 && lua_subversion >= 1)
                              " Comments in Lua 5.1: --[[ ... ]], [=[ ... ]=], [===[ ... ]===], etc.
    7              0.000107   syn region luaComment        matchgroup=luaComment start="--\[\z(=*\)\[" end="\]\z1\]" contains=luaTodo,@Spell
    7              0.000007 endif
                            
                            " First line may start with #!
    7              0.000039 syn match luaComment "\%^#!.*"
                            
                            " catch errors caused by wrong parenthesis and wrong curly brackets or
                            " keywords placed outside their respective blocks
    7              0.000299 syn region luaParen      transparent                     start='(' end=')' contains=ALLBUT,luaParenError,luaTodo,luaSpecial,luaIfThen,luaElseifThen,luaElse,luaThenEnd,luaBlock,luaLoopBlock,luaIn,luaStatement
    7              0.000302 syn region luaTableBlock transparent matchgroup=luaTable start="{" end="}" contains=ALLBUT,luaBraceError,luaTodo,luaSpecial,luaIfThen,luaElseifThen,luaElse,luaThenEnd,luaBlock,luaLoopBlock,luaIn,luaStatement
                            
    7              0.000033 syn match  luaParenError ")"
    7              0.000030 syn match  luaBraceError "}"
    7              0.000055 syn match  luaError "\<\%(end\|else\|elseif\|then\|until\|in\)\>"
                            
                            " function ... end
    7              0.000187 syn region luaFunctionBlock transparent matchgroup=luaFunction start="\<function\>" end="\<end\>" contains=ALLBUT,luaTodo,luaSpecial,luaElseifThen,luaElse,luaThenEnd,luaIn
                            
                            " if ... then
    7              0.000202 syn region luaIfThen transparent matchgroup=luaCond start="\<if\>" end="\<then\>"me=e-4           contains=ALLBUT,luaTodo,luaSpecial,luaElseifThen,luaElse,luaIn nextgroup=luaThenEnd skipwhite skipempty
                            
                            " then ... end
    7              0.000155 syn region luaThenEnd contained transparent matchgroup=luaCond start="\<then\>" end="\<end\>" contains=ALLBUT,luaTodo,luaSpecial,luaThenEnd,luaIn
                            
                            " elseif ... then
    7              0.000189 syn region luaElseifThen contained transparent matchgroup=luaCond start="\<elseif\>" end="\<then\>" contains=ALLBUT,luaTodo,luaSpecial,luaElseifThen,luaElse,luaThenEnd,luaIn
                            
                            " else
    7              0.000029 syn keyword luaElse contained else
                            
                            " do ... end
    7              0.000190 syn region luaBlock transparent matchgroup=luaStatement start="\<do\>" end="\<end\>"          contains=ALLBUT,luaTodo,luaSpecial,luaElseifThen,luaElse,luaThenEnd,luaIn
                            
                            " repeat ... until
    7              0.000191 syn region luaLoopBlock transparent matchgroup=luaRepeat start="\<repeat\>" end="\<until\>"   contains=ALLBUT,luaTodo,luaSpecial,luaElseifThen,luaElse,luaThenEnd,luaIn
                            
                            " while ... do
    7              0.000234 syn region luaLoopBlock transparent matchgroup=luaRepeat start="\<while\>" end="\<do\>"me=e-2 contains=ALLBUT,luaTodo,luaSpecial,luaIfThen,luaElseifThen,luaElse,luaThenEnd,luaIn nextgroup=luaBlock skipwhite skipempty
                            
                            " for ... do and for ... in ... do
    7              0.000213 syn region luaLoopBlock transparent matchgroup=luaRepeat start="\<for\>" end="\<do\>"me=e-2   contains=ALLBUT,luaTodo,luaSpecial,luaIfThen,luaElseifThen,luaElse,luaThenEnd nextgroup=luaBlock skipwhite skipempty
                            
    7              0.000023 syn keyword luaIn contained in
                            
                            " other keywords
    7              0.000042 syn keyword luaStatement return local break
    7              0.000021 if lua_version > 5 || (lua_version == 5 && lua_subversion >= 2)
    7              0.000039   syn keyword luaStatement goto
    7              0.000044   syn match luaLabel "::\I\i*::"
    7              0.000030 endif
    7              0.000034 syn keyword luaOperator and or not
    7              0.000024 syn keyword luaConstant nil
    7              0.000014 if lua_version > 4
    7              0.000046   syn keyword luaConstant true false
    7              0.000005 endif
                            
                            " Strings
    7              0.000010 if lua_version < 5
                              syn match  luaSpecial contained "\\[\\abfnrtv\'\"]\|\\[[:digit:]]\{,3}"
                            elseif lua_version == 5
    7              0.000010   if lua_subversion == 0
                                syn match  luaSpecial contained #\\[\\abfnrtv'"[\]]\|\\[[:digit:]]\{,3}#
                                syn region luaString2 matchgroup=luaString start=+\[\[+ end=+\]\]+ contains=luaString2,@Spell
                              else
    7              0.000011     if lua_subversion == 1
                                  syn match  luaSpecial contained #\\[\\abfnrtv'"]\|\\[[:digit:]]\{,3}#
                                else " Lua 5.2
    7              0.000061       syn match  luaSpecial contained #\\[\\abfnrtvz'"]\|\\x[[:xdigit:]]\{2}\|\\[[:digit:]]\{,3}#
    7              0.000008     endif
    7              0.000078     syn region luaString2 matchgroup=luaString start="\[\z(=*\)\[" end="\]\z1\]" contains=@Spell
    7              0.000007   endif
    7              0.000005 endif
    7              0.000109 syn region luaString  start=+'+ end=+'+ skip=+\\\\\|\\'+ contains=luaSpecial,@Spell
    7              0.000095 syn region luaString  start=+"+ end=+"+ skip=+\\\\\|\\"+ contains=luaSpecial,@Spell
                            
                            " integer number
    7              0.000038 syn match luaNumber "\<\d\+\>"
                            " floating point number, with dot, optional exponent
    7              0.000053 syn match luaNumber  "\<\d\+\.\d*\%([eE][-+]\=\d\+\)\=\>"
                            " floating point number, starting with a dot, optional exponent
    7              0.000044 syn match luaNumber  "\.\d\+\%([eE][-+]\=\d\+\)\=\>"
                            " floating point number, without dot, with exponent
    7              0.000040 syn match luaNumber  "\<\d\+[eE][-+]\=\d\+\>"
                            
                            " hex numbers
    7              0.000026 if lua_version >= 5
    7              0.000009   if lua_subversion == 1
                                syn match luaNumber "\<0[xX]\x\+\>"
                              elseif lua_subversion >= 2
    7              0.000057     syn match luaNumber "\<0[xX][[:xdigit:].]\+\%([pP][-+]\=\d\+\)\=\>"
    7              0.000008   endif
    7              0.000006 endif
                            
    7              0.000039 syn keyword luaFunc assert collectgarbage dofile error next
    7              0.000040 syn keyword luaFunc print rawget rawset tonumber tostring type _VERSION
                            
    7              0.000009 if lua_version == 4
                              syn keyword luaFunc _ALERT _ERRORMESSAGE gcinfo
                              syn keyword luaFunc call copytagmethods dostring
                              syn keyword luaFunc foreach foreachi getglobal getn
                              syn keyword luaFunc gettagmethod globals newtag
                              syn keyword luaFunc setglobal settag settagmethod sort
                              syn keyword luaFunc tag tinsert tremove
                              syn keyword luaFunc _INPUT _OUTPUT _STDIN _STDOUT _STDERR
                              syn keyword luaFunc openfile closefile flush seek
                              syn keyword luaFunc setlocale execute remove rename tmpname
                              syn keyword luaFunc getenv date clock exit
                              syn keyword luaFunc readfrom writeto appendto read write
                              syn keyword luaFunc PI abs sin cos tan asin
                              syn keyword luaFunc acos atan atan2 ceil floor
                              syn keyword luaFunc mod frexp ldexp sqrt min max log
                              syn keyword luaFunc log10 exp deg rad random
                              syn keyword luaFunc randomseed strlen strsub strlower strupper
                              syn keyword luaFunc strchar strrep ascii strbyte
                              syn keyword luaFunc format strfind gsub
                              syn keyword luaFunc getinfo getlocal setlocal setcallhook setlinehook
                            elseif lua_version == 5
    7              0.000043   syn keyword luaFunc getmetatable setmetatable
    7              0.000030   syn keyword luaFunc ipairs pairs
    7              0.000027   syn keyword luaFunc pcall xpcall
    7              0.000031   syn keyword luaFunc _G loadfile rawequal require
    7              0.000009   if lua_subversion == 0
                                syn keyword luaFunc getfenv setfenv
                                syn keyword luaFunc loadstring unpack
                                syn keyword luaFunc gcinfo loadlib LUA_PATH _LOADED _REQUIREDNAME
                              else
    7              0.000027     syn keyword luaFunc load select
    7              0.000043     syn match   luaFunc /\<package\.cpath\>/
    7              0.000035     syn match   luaFunc /\<package\.loaded\>/
    7              0.000039     syn match   luaFunc /\<package\.loadlib\>/
    7              0.000036     syn match   luaFunc /\<package\.path\>/
    7              0.000012     if lua_subversion == 1
                                  syn keyword luaFunc getfenv setfenv
                                  syn keyword luaFunc loadstring module unpack
                                  syn match   luaFunc /\<package\.loaders\>/
                                  syn match   luaFunc /\<package\.preload\>/
                                  syn match   luaFunc /\<package\.seeall\>/
                                elseif lua_subversion == 2
    7              0.000028       syn keyword luaFunc _ENV rawlen
    7              0.000034       syn match   luaFunc /\<package\.config\>/
    7              0.000035       syn match   luaFunc /\<package\.preload\>/
    7              0.000037       syn match   luaFunc /\<package\.searchers\>/
    7              0.000040       syn match   luaFunc /\<package\.searchpath\>/
    7              0.000039       syn match   luaFunc /\<bit32\.arshift\>/
    7              0.000038       syn match   luaFunc /\<bit32\.band\>/
    7              0.000033       syn match   luaFunc /\<bit32\.bnot\>/
    7              0.000032       syn match   luaFunc /\<bit32\.bor\>/
    7              0.000059       syn match   luaFunc /\<bit32\.btest\>/
    7              0.000039       syn match   luaFunc /\<bit32\.bxor\>/
    7              0.000052       syn match   luaFunc /\<bit32\.extract\>/
    7              0.000033       syn match   luaFunc /\<bit32\.lrotate\>/
    7              0.000035       syn match   luaFunc /\<bit32\.lshift\>/
    7              0.000038       syn match   luaFunc /\<bit32\.replace\>/
    7              0.000036       syn match   luaFunc /\<bit32\.rrotate\>/
    7              0.000039       syn match   luaFunc /\<bit32\.rshift\>/
    7              0.000008     endif
    7              0.000035     syn match luaFunc /\<coroutine\.running\>/
    7              0.000008   endif
    7              0.000038   syn match   luaFunc /\<coroutine\.create\>/
    7              0.000036   syn match   luaFunc /\<coroutine\.resume\>/
    7              0.000038   syn match   luaFunc /\<coroutine\.status\>/
    7              0.000035   syn match   luaFunc /\<coroutine\.wrap\>/
    7              0.000036   syn match   luaFunc /\<coroutine\.yield\>/
    7              0.000034   syn match   luaFunc /\<string\.byte\>/
    7              0.000035   syn match   luaFunc /\<string\.char\>/
    7              0.000035   syn match   luaFunc /\<string\.dump\>/
    7              0.000036   syn match   luaFunc /\<string\.find\>/
    7              0.000032   syn match   luaFunc /\<string\.format\>/
    7              0.000034   syn match   luaFunc /\<string\.gsub\>/
    7              0.000032   syn match   luaFunc /\<string\.len\>/
    7              0.000037   syn match   luaFunc /\<string\.lower\>/
    7              0.000036   syn match   luaFunc /\<string\.rep\>/
    7              0.000032   syn match   luaFunc /\<string\.sub\>/
    7              0.000032   syn match   luaFunc /\<string\.upper\>/
    7              0.000010   if lua_subversion == 0
                                syn match luaFunc /\<string\.gfind\>/
                              else
    7              0.000037     syn match luaFunc /\<string\.gmatch\>/
    7              0.000032     syn match luaFunc /\<string\.match\>/
    7              0.000039     syn match luaFunc /\<string\.reverse\>/
    7              0.000006   endif
    7              0.000022   if lua_subversion == 0
                                syn match luaFunc /\<table\.getn\>/
                                syn match luaFunc /\<table\.setn\>/
                                syn match luaFunc /\<table\.foreach\>/
                                syn match luaFunc /\<table\.foreachi\>/
                              elseif lua_subversion == 1
                                syn match luaFunc /\<table\.maxn\>/
                              elseif lua_subversion == 2
    7              0.000036     syn match luaFunc /\<table\.pack\>/
    7              0.000034     syn match luaFunc /\<table\.unpack\>/
    7              0.000005   endif
    7              0.000034   syn match   luaFunc /\<table\.concat\>/
    7              0.000035   syn match   luaFunc /\<table\.sort\>/
    7              0.000037   syn match   luaFunc /\<table\.insert\>/
    7              0.000035   syn match   luaFunc /\<table\.remove\>/
    7              0.000037   syn match   luaFunc /\<math\.abs\>/
    7              0.000032   syn match   luaFunc /\<math\.acos\>/
    7              0.000032   syn match   luaFunc /\<math\.asin\>/
    7              0.000035   syn match   luaFunc /\<math\.atan\>/
    7              0.000035   syn match   luaFunc /\<math\.atan2\>/
    7              0.000035   syn match   luaFunc /\<math\.ceil\>/
    7              0.000033   syn match   luaFunc /\<math\.sin\>/
    7              0.000032   syn match   luaFunc /\<math\.cos\>/
    7              0.000032   syn match   luaFunc /\<math\.tan\>/
    7              0.000032   syn match   luaFunc /\<math\.deg\>/
    7              0.000032   syn match   luaFunc /\<math\.exp\>/
    7              0.000034   syn match   luaFunc /\<math\.floor\>/
    7              0.000034   syn match   luaFunc /\<math\.log\>/
    7              0.000035   syn match   luaFunc /\<math\.max\>/
    7              0.000033   syn match   luaFunc /\<math\.min\>/
    7              0.000008   if lua_subversion == 0
                                syn match luaFunc /\<math\.mod\>/
                                syn match luaFunc /\<math\.log10\>/
                              else
    7              0.000009     if lua_subversion == 1
                                  syn match luaFunc /\<math\.log10\>/
                                endif
    7              0.000035     syn match luaFunc /\<math\.huge\>/
    7              0.000033     syn match luaFunc /\<math\.fmod\>/
    7              0.000031     syn match luaFunc /\<math\.modf\>/
    7              0.000037     syn match luaFunc /\<math\.cosh\>/
    7              0.000033     syn match luaFunc /\<math\.sinh\>/
    7              0.000032     syn match luaFunc /\<math\.tanh\>/
    7              0.000005   endif
    7              0.000033   syn match   luaFunc /\<math\.pow\>/
    7              0.000032   syn match   luaFunc /\<math\.rad\>/
    7              0.000035   syn match   luaFunc /\<math\.sqrt\>/
    7              0.000034   syn match   luaFunc /\<math\.frexp\>/
    7              0.000035   syn match   luaFunc /\<math\.ldexp\>/
    7              0.000034   syn match   luaFunc /\<math\.random\>/
    7              0.000037   syn match   luaFunc /\<math\.randomseed\>/
    7              0.000033   syn match   luaFunc /\<math\.pi\>/
    7              0.000035   syn match   luaFunc /\<io\.close\>/
    7              0.000032   syn match   luaFunc /\<io\.flush\>/
    7              0.000032   syn match   luaFunc /\<io\.input\>/
    7              0.000031   syn match   luaFunc /\<io\.lines\>/
    7              0.000038   syn match   luaFunc /\<io\.open\>/
    7              0.000033   syn match   luaFunc /\<io\.output\>/
    7              0.000032   syn match   luaFunc /\<io\.popen\>/
    7              0.000033   syn match   luaFunc /\<io\.read\>/
    7              0.000035   syn match   luaFunc /\<io\.stderr\>/
    7              0.000035   syn match   luaFunc /\<io\.stdin\>/
    7              0.000031   syn match   luaFunc /\<io\.stdout\>/
    7              0.000035   syn match   luaFunc /\<io\.tmpfile\>/
    7              0.000043   syn match   luaFunc /\<io\.type\>/
    7              0.000033   syn match   luaFunc /\<io\.write\>/
    7              0.000036   syn match   luaFunc /\<os\.clock\>/
    7              0.000033   syn match   luaFunc /\<os\.date\>/
    7              0.000037   syn match   luaFunc /\<os\.difftime\>/
    7              0.000032   syn match   luaFunc /\<os\.execute\>/
    7              0.000032   syn match   luaFunc /\<os\.exit\>/
    7              0.000032   syn match   luaFunc /\<os\.getenv\>/
    7              0.000033   syn match   luaFunc /\<os\.remove\>/
    7              0.000035   syn match   luaFunc /\<os\.rename\>/
    7              0.000036   syn match   luaFunc /\<os\.setlocale\>/
    7              0.000032   syn match   luaFunc /\<os\.time\>/
    7              0.000052   syn match   luaFunc /\<os\.tmpname\>/
    7              0.000036   syn match   luaFunc /\<debug\.debug\>/
    7              0.000039   syn match   luaFunc /\<debug\.gethook\>/
    7              0.000038   syn match   luaFunc /\<debug\.getinfo\>/
    7              0.000035   syn match   luaFunc /\<debug\.getlocal\>/
    7              0.000035   syn match   luaFunc /\<debug\.getupvalue\>/
    7              0.000038   syn match   luaFunc /\<debug\.setlocal\>/
    7              0.000038   syn match   luaFunc /\<debug\.setupvalue\>/
    7              0.000036   syn match   luaFunc /\<debug\.sethook\>/
    7              0.000034   syn match   luaFunc /\<debug\.traceback\>/
    7              0.000012   if lua_subversion == 1
                                syn match luaFunc /\<debug\.getfenv\>/
                                syn match luaFunc /\<debug\.setfenv\>/
                                syn match luaFunc /\<debug\.getmetatable\>/
                                syn match luaFunc /\<debug\.setmetatable\>/
                                syn match luaFunc /\<debug\.getregistry\>/
                              elseif lua_subversion == 2
    7              0.000040     syn match luaFunc /\<debug\.getmetatable\>/
    7              0.000036     syn match luaFunc /\<debug\.setmetatable\>/
    7              0.000037     syn match luaFunc /\<debug\.getregistry\>/
    7              0.000050     syn match luaFunc /\<debug\.getuservalue\>/
    7              0.000040     syn match luaFunc /\<debug\.setuservalue\>/
    7              0.000036     syn match luaFunc /\<debug\.upvalueid\>/
    7              0.000038     syn match luaFunc /\<debug\.upvaluejoin\>/
    7              0.000006   endif
    7              0.000006 endif
                            
                            " Define the default highlighting.
                            " For version 5.7 and earlier: only when not done already
                            " For version 5.8 and later: only when an item doesn't have highlighting yet
    7              0.000020 if version >= 508 || !exists("did_lua_syntax_inits")
    7              0.000008   if version < 508
                                let did_lua_syntax_inits = 1
                                command -nargs=+ HiLink hi link <args>
                              else
    7              0.000074     command -nargs=+ HiLink hi def link <args>
    7              0.000006   endif
                            
    7              0.000091   HiLink luaStatement		Statement
    7              0.000064   HiLink luaRepeat		Repeat
    7              0.000051   HiLink luaFor			Repeat
    7              0.000048   HiLink luaString		String
    7              0.000048   HiLink luaString2		String
    7              0.000046   HiLink luaNumber		Number
    7              0.000048   HiLink luaOperator		Operator
    7              0.000047   HiLink luaIn			Operator
    7              0.000049   HiLink luaConstant		Constant
    7              0.000056   HiLink luaCond		Conditional
    7              0.000048   HiLink luaElse		Conditional
    7              0.000046   HiLink luaFunction		Function
    7              0.000047   HiLink luaComment		Comment
    7              0.000051   HiLink luaTodo		Todo
    7              0.000065   HiLink luaTable		Structure
    7              0.000046   HiLink luaError		Error
    7              0.000048   HiLink luaParenError		Error
    7              0.000047   HiLink luaBraceError		Error
    7              0.000048   HiLink luaSpecial		SpecialChar
    7              0.000047   HiLink luaFunc		Identifier
    7              0.000046   HiLink luaLabel		Label
                            
    7              0.000015   delcommand HiLink
    7              0.000008 endif
                            
    7              0.000022 let b:current_syntax = "lua"
                            
    7              0.000041 let &cpo = s:cpo_save
    7              0.000019 unlet s:cpo_save
                            " vim: et ts=8 sw=2

SCRIPT  /usr/local/Cellar/vim/7.4.335/share/vim/vim74/syntax/ruby.vim
Sourced 7 times
Total time:   0.018627
 Self time:   0.018627

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:		Ruby
                            " Maintainer:		Doug Kearns <dougkearns@gmail.com>
                            " URL:			https://github.com/vim-ruby/vim-ruby
                            " Release Coordinator:	Doug Kearns <dougkearns@gmail.com>
                            " ----------------------------------------------------------------------------
                            "
                            " Previous Maintainer:	Mirko Nasato
                            " Thanks to perl.vim authors, and to Reimer Behrends. :-) (MN)
                            " ----------------------------------------------------------------------------
                            
    7              0.000028 if exists("b:current_syntax")
                              finish
                            endif
                            
    7              0.000028 if has("folding") && exists("ruby_fold")
                              setlocal foldmethod=syntax
                            endif
                            
    7              0.000175 syn cluster rubyNotTop contains=@rubyExtendedStringSpecial,@rubyRegexpSpecial,@rubyDeclaration,rubyConditional,rubyExceptional,rubyMethodExceptional,rubyTodo
                            
    7              0.000021 if exists("ruby_space_errors")
                              if !exists("ruby_no_trail_space_error")
                                syn match rubySpaceError display excludenl "\s\+$"
                              endif
                              if !exists("ruby_no_tab_space_error")
                                syn match rubySpaceError display " \+\t"me=e-1
                              endif
                            endif
                            
                            " Operators
    7              0.000018 if exists("ruby_operators")
                              syn match  rubyOperator "[~!^&|*/%+-]\|\%(class\s*\)\@<!<<\|<=>\|<=\|\%(<\|\<class\s\+\u\w*\s*\)\@<!<[^<]\@=\|===\|==\|=\~\|>>\|>=\|=\@<!>\|\*\*\|\.\.\.\|\.\.\|::"
                              syn match  rubyOperator "->\|-=\|/=\|\*\*=\|\*=\|&&=\|&=\|&&\|||=\||=\|||\|%=\|+=\|!\~\|!="
                              syn region rubyBracketOperator matchgroup=rubyOperator start="\%(\w[?!]\=\|[]})]\)\@<=\[\s*" end="\s*]" contains=ALLBUT,@rubyNotTop
                            endif
                            
                            " Expression Substitution and Backslash Notation
    7              0.000067 syn match rubyStringEscape "\\\\\|\\[abefnrstv]\|\\\o\{1,3}\|\\x\x\{1,2}"						    contained display
    7              0.000079 syn match rubyStringEscape "\%(\\M-\\C-\|\\C-\\M-\|\\M-\\c\|\\c\\M-\|\\c\|\\C-\|\\M-\)\%(\\\o\{1,3}\|\\x\x\{1,2}\|\\\=\S\)" contained display
    7              0.000035 syn match rubyQuoteEscape  "\\[\\']"											    contained display
                            
    7              0.000108 syn region rubyInterpolation	      matchgroup=rubyInterpolationDelimiter start="#{" end="}" contained contains=ALLBUT,@rubyNotTop
    7              0.000170 syn match  rubyInterpolation	      "#\%(\$\|@@\=\)\w\+"    display contained contains=rubyInterpolationDelimiter,rubyInstanceVariable,rubyClassVariable,rubyGlobalVariable,rubyPredefinedVariable
    7              0.000055 syn match  rubyInterpolationDelimiter "#\ze\%(\$\|@@\=\)\w\+" display contained
    7              0.000128 syn match  rubyInterpolation	      "#\$\%(-\w\|\W\)"       display contained contains=rubyInterpolationDelimiter,rubyPredefinedVariable,rubyInvalidVariable
    7              0.000051 syn match  rubyInterpolationDelimiter "#\ze\$\%(-\w\|\W\)"    display contained
    7              0.000051 syn region rubyNoInterpolation	      start="\\#{" end="}"            contained
    7              0.000029 syn match  rubyNoInterpolation	      "\\#{"		      display contained
    7              0.000036 syn match  rubyNoInterpolation	      "\\#\%(\$\|@@\=\)\w\+"  display contained
    7              0.000034 syn match  rubyNoInterpolation	      "\\#\$\W"		      display contained
                            
    7              0.000062 syn match rubyDelimEscape	"\\[(<{\[)>}\]]" transparent display contained contains=NONE
                            
    7              0.000077 syn region rubyNestedParentheses    start="("  skip="\\\\\|\\)"  matchgroup=rubyString end=")"	transparent contained
    7              0.000070 syn region rubyNestedCurlyBraces    start="{"  skip="\\\\\|\\}"  matchgroup=rubyString end="}"	transparent contained
    7              0.000070 syn region rubyNestedAngleBrackets  start="<"  skip="\\\\\|\\>"  matchgroup=rubyString end=">"	transparent contained
    7              0.000067 syn region rubyNestedSquareBrackets start="\[" skip="\\\\\|\\\]" matchgroup=rubyString end="\]"	transparent contained
                            
                            " These are mostly Oniguruma ready
    7              0.000072 syn region rubyRegexpComment	matchgroup=rubyRegexpSpecial   start="(?#"								  skip="\\)"  end=")"  contained
    7              0.000131 syn region rubyRegexpParens	matchgroup=rubyRegexpSpecial   start="(\(?:\|?<\=[=!]\|?>\|?<[a-z_]\w*>\|?[imx]*-[imx]*:\=\|\%(?#\)\@!\)" skip="\\)"  end=")"  contained transparent contains=@rubyRegexpSpecial
    7              0.000128 syn region rubyRegexpBrackets	matchgroup=rubyRegexpCharClass start="\[\^\="								  skip="\\\]" end="\]" contained transparent contains=rubyStringEscape,rubyRegexpEscape,rubyRegexpCharClass oneline
    7              0.000033 syn match  rubyRegexpCharClass	"\\[DdHhSsWw]"	       contained display
    7              0.000094 syn match  rubyRegexpCharClass	"\[:\^\=\%(alnum\|alpha\|ascii\|blank\|cntrl\|digit\|graph\|lower\|print\|punct\|space\|upper\|xdigit\):\]" contained
    7              0.000037 syn match  rubyRegexpEscape	"\\[].*?+^$|\\/(){}[]" contained
    7              0.000038 syn match  rubyRegexpQuantifier	"[*?+][?+]\="	       contained display
    7              0.000043 syn match  rubyRegexpQuantifier	"{\d\+\%(,\d*\)\=}?\=" contained display
    7              0.000053 syn match  rubyRegexpAnchor	"[$^]\|\\[ABbGZz]"     contained display
    7              0.000026 syn match  rubyRegexpDot	"\."		       contained display
    7              0.000026 syn match  rubyRegexpSpecial	"|"		       contained display
    7              0.000037 syn match  rubyRegexpSpecial	"\\[1-9]\d\=\d\@!"     contained display
    7              0.000051 syn match  rubyRegexpSpecial	"\\k<\%([a-z_]\w*\|-\=\d\+\)\%([+-]\d\+\)\=>" contained display
    7              0.000043 syn match  rubyRegexpSpecial	"\\k'\%([a-z_]\w*\|-\=\d\+\)\%([+-]\d\+\)\='" contained display
    7              0.000041 syn match  rubyRegexpSpecial	"\\g<\%([a-z_]\w*\|-\=\d\+\)>" contained display
    7              0.000037 syn match  rubyRegexpSpecial	"\\g'\%([a-z_]\w*\|-\=\d\+\)'" contained display
                            
    7              0.000078 syn cluster rubyStringSpecial	      contains=rubyInterpolation,rubyNoInterpolation,rubyStringEscape
    7              0.000108 syn cluster rubyExtendedStringSpecial contains=@rubyStringSpecial,rubyNestedParentheses,rubyNestedCurlyBraces,rubyNestedAngleBrackets,rubyNestedSquareBrackets
    7              0.000235 syn cluster rubyRegexpSpecial	      contains=rubyInterpolation,rubyNoInterpolation,rubyStringEscape,rubyRegexpSpecial,rubyRegexpEscape,rubyRegexpBrackets,rubyRegexpCharClass,rubyRegexpDot,rubyRegexpQuantifier,rubyRegexpAnchor,rubyRegexpParens,rubyRegexpComment
                            
                            " Numbers and ASCII Codes
    7              0.000096 syn match rubyASCIICode	"\%(\w\|[]})\"'/]\)\@<!\%(?\%(\\M-\\C-\|\\C-\\M-\|\\M-\\c\|\\c\\M-\|\\c\|\\C-\|\\M-\)\=\%(\\\o\{1,3}\|\\x\x\{1,2}\|\\\=\S\)\)"
    7              0.000069 syn match rubyInteger	"\%(\%(\w\|[]})\"']\s*\)\@<!-\)\=\<0[xX]\x\+\%(_\x\+\)*\>"								display
    7              0.000064 syn match rubyInteger	"\%(\%(\w\|[]})\"']\s*\)\@<!-\)\=\<\%(0[dD]\)\=\%(0\|[1-9]\d*\%(_\d\+\)*\)\>"						display
    7              0.000052 syn match rubyInteger	"\%(\%(\w\|[]})\"']\s*\)\@<!-\)\=\<0[oO]\=\o\+\%(_\o\+\)*\>"								display
    7              0.000054 syn match rubyInteger	"\%(\%(\w\|[]})\"']\s*\)\@<!-\)\=\<0[bB][01]\+\%(_[01]\+\)*\>"								display
    7              0.000061 syn match rubyFloat	"\%(\%(\w\|[]})\"']\s*\)\@<!-\)\=\<\%(0\|[1-9]\d*\%(_\d\+\)*\)\.\d\+\%(_\d\+\)*\>"					display
    7              0.000072 syn match rubyFloat	"\%(\%(\w\|[]})\"']\s*\)\@<!-\)\=\<\%(0\|[1-9]\d*\%(_\d\+\)*\)\%(\.\d\+\%(_\d\+\)*\)\=\%([eE][-+]\=\d\+\%(_\d\+\)*\)\>"	display
                            
                            " Identifiers
    7              0.000101 syn match rubyLocalVariableOrMethod "\<[_[:lower:]][_[:alnum:]]*[?!=]\=" contains=NONE display transparent
    7              0.000055 syn match rubyBlockArgument	    "&[_[:lower:]][_[:alnum:]]"		 contains=NONE display transparent
                            
    7              0.000074 syn match  rubyConstant		"\%(\%([.@$]\@<!\.\)\@<!\<\|::\)\_s*\zs\u\w*\%(\>\|::\)\@=\%(\s*(\)\@!"
    7              0.000052 syn match  rubyClassVariable	"@@\%(\h\|[^\x00-\x7F]\)\%(\w\|[^\x00-\x7F]\)*" display
    7              0.000061 syn match  rubyInstanceVariable "@\%(\h\|[^\x00-\x7F]\)\%(\w\|[^\x00-\x7F]\)*"  display
    7              0.000052 syn match  rubyGlobalVariable	"$\%(\%(\h\|[^\x00-\x7F]\)\%(\w\|[^\x00-\x7F]\)*\|-.\)"
    7              0.000098 syn match  rubySymbol		"[]})\"':]\@<!:\%(\^\|\~\|<<\|<=>\|<=\|<\|===\|[=!]=\|[=!]\~\|!\|>>\|>=\|>\||\|-@\|-\|/\|\[]=\|\[]\|\*\*\|\*\|&\|%\|+@\|+\|`\)"
    7              0.000065 syn match  rubySymbol		"[]})\"':]\@<!:\$\%(-.\|[`~<=>_,;:!?/.'"@$*\&+0]\)"
    7              0.000091 syn match  rubySymbol		"[]})\"':]\@<!:\%(\$\|@@\=\)\=\%(\h\|[^\x00-\x7F]\)\%(\w\|[^\x00-\x7F]\)*"
    7              0.000067 syn match  rubySymbol		"[]})\"':]\@<!:\%(\h\|[^\x00-\x7F]\)\%(\w\|[^\x00-\x7F]\)*\%([?!=]>\@!\)\="
    7              0.000058 syn match  rubySymbol		"\%([{(,]\_s*\)\@<=\l\w*[!?]\=::\@!"he=e-1
    7              0.000063 syn match  rubySymbol		"[]})\"':]\@<!\%(\h\|[^\x00-\x7F]\)\%(\w\|[^\x00-\x7F]\)*[!?]\=:\s\@="he=e-1
    7              0.000063 syn match  rubySymbol		"\%([{(,]\_s*\)\@<=[[:space:],{]\l\w*[!?]\=::\@!"hs=s+1,he=e-1
    7              0.000060 syn match  rubySymbol		"[[:space:],{]\%(\h\|[^\x00-\x7F]\)\%(\w\|[^\x00-\x7F]\)*[!?]\=:\s\@="hs=s+1,he=e-1
    7              0.000124 syn region rubySymbol		start="[]})\"':]\@<!:'"  end="'"  skip="\\\\\|\\'"  contains=rubyQuoteEscape fold
    7              0.000089 syn region rubySymbol		start="[]})\"':]\@<!:\"" end="\"" skip="\\\\\|\\\"" contains=@rubyStringSpecial fold
                            
    7              0.000049 syn match  rubyBlockParameter	  "\%(\h\|[^\x00-\x7F]\)\%(\w\|[^\x00-\x7F]\)*" contained
    7              0.000077 syn region rubyBlockParameterList start="\%(\%(\<do\>\|{\)\s*\)\@<=|" end="|" oneline display contains=rubyBlockParameter
                            
    7              0.000036 syn match rubyInvalidVariable	 "$[^ A-Za-z_-]"
    7              0.000040 syn match rubyPredefinedVariable #$[!$&"'*+,./0:;<=>?@\`~]#
    7              0.000054 syn match rubyPredefinedVariable "$\d\+"										   display
    7              0.000029 syn match rubyPredefinedVariable "$_\>"											   display
    7              0.000037 syn match rubyPredefinedVariable "$-[0FIKadilpvw]\>"									   display
    7              0.000048 syn match rubyPredefinedVariable "$\%(deferr\|defout\|stderr\|stdin\|stdout\)\>"					   display
    7              0.000058 syn match rubyPredefinedVariable "$\%(DEBUG\|FILENAME\|KCODE\|LOADED_FEATURES\|LOAD_PATH\|PROGRAM_NAME\|SAFE\|VERBOSE\)\>" display
    7              0.000063 syn match rubyPredefinedConstant "\%(\%(\.\@<!\.\)\@<!\|::\)\_s*\zs\%(MatchingData\|ARGF\|ARGV\|ENV\)\>\%(\s*(\)\@!"
    7              0.000049 syn match rubyPredefinedConstant "\%(\%(\.\@<!\.\)\@<!\|::\)\_s*\zs\%(DATA\|FALSE\|NIL\)\>\%(\s*(\)\@!"
    7              0.000058 syn match rubyPredefinedConstant "\%(\%(\.\@<!\.\)\@<!\|::\)\_s*\zs\%(STDERR\|STDIN\|STDOUT\|TOPLEVEL_BINDING\|TRUE\)\>\%(\s*(\)\@!"
    7              0.000075 syn match rubyPredefinedConstant "\%(\%(\.\@<!\.\)\@<!\|::\)\_s*\zs\%(RUBY_\%(VERSION\|RELEASE_DATE\|PLATFORM\|PATCHLEVEL\|REVISION\|DESCRIPTION\|COPYRIGHT\|ENGINE\)\)\>\%(\s*(\)\@!"
                            
                            " Normal Regular Expression
    7              0.000158 syn region rubyRegexp matchgroup=rubyRegexpDelimiter start="\%(\%(^\|\<\%(and\|or\|while\|until\|unless\|if\|elsif\|when\|not\|then\|else\)\|[;\~=!|&(,[<>?:*+-]\)\s*\)\@<=/" end="/[iomxneus]*" skip="\\\\\|\\/" contains=@rubyRegexpSpecial fold
    7              0.000094 syn region rubyRegexp matchgroup=rubyRegexpDelimiter start="\%(\h\k*\s\+\)\@<=/[ \t=]\@!" end="/[iomxneus]*" skip="\\\\\|\\/" contains=@rubyRegexpSpecial fold
                            
                            " Generalized Regular Expression
    7              0.000097 syn region rubyRegexp matchgroup=rubyRegexpDelimiter start="%r\z([~`!@#$%^&*_\-+=|\:;"',.? /]\)" end="\z1[iomxneus]*" skip="\\\\\|\\\z1" contains=@rubyRegexpSpecial fold
    7              0.000086 syn region rubyRegexp matchgroup=rubyRegexpDelimiter start="%r{"				 end="}[iomxneus]*"   skip="\\\\\|\\}"	 contains=@rubyRegexpSpecial fold
    7              0.000110 syn region rubyRegexp matchgroup=rubyRegexpDelimiter start="%r<"				 end=">[iomxneus]*"   skip="\\\\\|\\>"	 contains=@rubyRegexpSpecial,rubyNestedAngleBrackets,rubyDelimEscape fold
    7              0.000096 syn region rubyRegexp matchgroup=rubyRegexpDelimiter start="%r\["				 end="\][iomxneus]*"  skip="\\\\\|\\\]"	 contains=@rubyRegexpSpecial fold
    7              0.000078 syn region rubyRegexp matchgroup=rubyRegexpDelimiter start="%r("				 end=")[iomxneus]*"   skip="\\\\\|\\)"	 contains=@rubyRegexpSpecial fold
                            
                            " Normal String and Shell Command Output
    7              0.000099 syn region rubyString matchgroup=rubyStringDelimiter start="\"" end="\"" skip="\\\\\|\\\"" contains=@rubyStringSpecial,@Spell fold
    7              0.000106 syn region rubyString matchgroup=rubyStringDelimiter start="'"	end="'"  skip="\\\\\|\\'"  contains=rubyQuoteEscape,@Spell    fold
    7              0.000086 syn region rubyString matchgroup=rubyStringDelimiter start="`"	end="`"  skip="\\\\\|\\`"  contains=@rubyStringSpecial fold
                            
                            " Generalized Single Quoted String, Symbol and Array of Strings
    7              0.000093 syn region rubyString matchgroup=rubyStringDelimiter start="%[qwi]\z([~`!@#$%^&*_\-+=|\:;"',.?/]\)" end="\z1" skip="\\\\\|\\\z1" fold
    7              0.000116 syn region rubyString matchgroup=rubyStringDelimiter start="%[qwi]{"				   end="}"   skip="\\\\\|\\}"	fold contains=rubyNestedCurlyBraces,rubyDelimEscape
    7              0.000113 syn region rubyString matchgroup=rubyStringDelimiter start="%[qwi]<"				   end=">"   skip="\\\\\|\\>"	fold contains=rubyNestedAngleBrackets,rubyDelimEscape
    7              0.000115 syn region rubyString matchgroup=rubyStringDelimiter start="%[qwi]\["				   end="\]"  skip="\\\\\|\\\]"	fold contains=rubyNestedSquareBrackets,rubyDelimEscape
    7              0.000107 syn region rubyString matchgroup=rubyStringDelimiter start="%[qwi]("				   end=")"   skip="\\\\\|\\)"	fold contains=rubyNestedParentheses,rubyDelimEscape
    7              0.000072 syn region rubyString matchgroup=rubyStringDelimiter start="%q "				   end=" "   skip="\\\\\|\\)"	fold
    7              0.000092 syn region rubySymbol matchgroup=rubySymbolDelimiter start="%s\z([~`!@#$%^&*_\-+=|\:;"',.? /]\)"   end="\z1" skip="\\\\\|\\\z1" fold
    7              0.000113 syn region rubySymbol matchgroup=rubySymbolDelimiter start="%s{"				   end="}"   skip="\\\\\|\\}"	fold contains=rubyNestedCurlyBraces,rubyDelimEscape
    7              0.000110 syn region rubySymbol matchgroup=rubySymbolDelimiter start="%s<"				   end=">"   skip="\\\\\|\\>"	fold contains=rubyNestedAngleBrackets,rubyDelimEscape
    7              0.000128 syn region rubySymbol matchgroup=rubySymbolDelimiter start="%s\["				   end="\]"  skip="\\\\\|\\\]"	fold contains=rubyNestedSquareBrackets,rubyDelimEscape
    7              0.000109 syn region rubySymbol matchgroup=rubySymbolDelimiter start="%s("				   end=")"   skip="\\\\\|\\)"	fold contains=rubyNestedParentheses,rubyDelimEscape
                            
                            " Generalized Double Quoted String and Array of Strings and Shell Command Output
                            " Note: %= is not matched here as the beginning of a double quoted string
    7              0.000135 syn region rubyString matchgroup=rubyStringDelimiter start="%\z([~`!@#$%^&*_\-+|\:;"',.?/]\)"	    end="\z1" skip="\\\\\|\\\z1" contains=@rubyStringSpecial fold
    7              0.000099 syn region rubyString matchgroup=rubyStringDelimiter start="%[QWIx]\z([~`!@#$%^&*_\-+=|\:;"',.?/]\)" end="\z1" skip="\\\\\|\\\z1" contains=@rubyStringSpecial fold
    7              0.000120 syn region rubyString matchgroup=rubyStringDelimiter start="%[QWIx]\={"				    end="}"   skip="\\\\\|\\}"	 contains=@rubyStringSpecial,rubyNestedCurlyBraces,rubyDelimEscape    fold
    7              0.000121 syn region rubyString matchgroup=rubyStringDelimiter start="%[QWIx]\=<"				    end=">"   skip="\\\\\|\\>"	 contains=@rubyStringSpecial,rubyNestedAngleBrackets,rubyDelimEscape  fold
    7              0.000122 syn region rubyString matchgroup=rubyStringDelimiter start="%[QWIx]\=\["				    end="\]"  skip="\\\\\|\\\]"	 contains=@rubyStringSpecial,rubyNestedSquareBrackets,rubyDelimEscape fold
    7              0.000117 syn region rubyString matchgroup=rubyStringDelimiter start="%[QWIx]\=("				    end=")"   skip="\\\\\|\\)"	 contains=@rubyStringSpecial,rubyNestedParentheses,rubyDelimEscape    fold
    7              0.000083 syn region rubyString matchgroup=rubyStringDelimiter start="%[Qx] "				    end=" "   skip="\\\\\|\\)"   contains=@rubyStringSpecial fold
                            
                            " Here Document
    7              0.000157 syn region rubyHeredocStart matchgroup=rubyStringDelimiter start=+\%(\%(class\s*\|\%([]})"'.]\|::\)\)\_s*\|\w\)\@<!<<-\=\zs\%(\%(\h\|[^\x00-\x7F]\)\%(\w\|[^\x00-\x7F]\)*\)+	 end=+$+ oneline contains=ALLBUT,@rubyNotTop
    7              0.000115 syn region rubyHeredocStart matchgroup=rubyStringDelimiter start=+\%(\%(class\s*\|\%([]})"'.]\|::\)\)\_s*\|\w\)\@<!<<-\=\zs"\%([^"]*\)"+ end=+$+ oneline contains=ALLBUT,@rubyNotTop
    7              0.000102 syn region rubyHeredocStart matchgroup=rubyStringDelimiter start=+\%(\%(class\s*\|\%([]})"'.]\|::\)\)\_s*\|\w\)\@<!<<-\=\zs'\%([^']*\)'+ end=+$+ oneline contains=ALLBUT,@rubyNotTop
    7              0.000102 syn region rubyHeredocStart matchgroup=rubyStringDelimiter start=+\%(\%(class\s*\|\%([]})"'.]\|::\)\)\_s*\|\w\)\@<!<<-\=\zs`\%([^`]*\)`+ end=+$+ oneline contains=ALLBUT,@rubyNotTop
                            
    7              0.000177 syn region rubyString start=+\%(\%(class\|::\)\_s*\|\%([]})"'.]\)\s\|\w\)\@<!<<\z(\%(\h\|[^\x00-\x7F]\)\%(\w\|[^\x00-\x7F]\)*\)\ze\%(.*<<-\=['`"]\=\h\)\@!+hs=s+2	matchgroup=rubyStringDelimiter end=+^\z1$+ contains=rubyHeredocStart,rubyHeredoc,@rubyStringSpecial fold keepend
    7              0.000146 syn region rubyString start=+\%(\%(class\|::\)\_s*\|\%([]})"'.]\)\s\|\w\)\@<!<<"\z([^"]*\)"\ze\%(.*<<-\=['`"]\=\h\)\@!+hs=s+2	matchgroup=rubyStringDelimiter end=+^\z1$+ contains=rubyHeredocStart,rubyHeredoc,@rubyStringSpecial fold keepend
    7              0.000132 syn region rubyString start=+\%(\%(class\|::\)\_s*\|\%([]})"'.]\)\s\|\w\)\@<!<<'\z([^']*\)'\ze\%(.*<<-\=['`"]\=\h\)\@!+hs=s+2	matchgroup=rubyStringDelimiter end=+^\z1$+ contains=rubyHeredocStart,rubyHeredoc			fold keepend
    7              0.000138 syn region rubyString start=+\%(\%(class\|::\)\_s*\|\%([]})"'.]\)\s\|\w\)\@<!<<`\z([^`]*\)`\ze\%(.*<<-\=['`"]\=\h\)\@!+hs=s+2	matchgroup=rubyStringDelimiter end=+^\z1$+ contains=rubyHeredocStart,rubyHeredoc,@rubyStringSpecial fold keepend
                            
    7              0.000221 syn region rubyString start=+\%(\%(class\|::\)\_s*\|\%([]}).]\)\s\|\w\)\@<!<<-\z(\%(\h\|[^\x00-\x7F]\)\%(\w\|[^\x00-\x7F]\)*\)\ze\%(.*<<-\=['`"]\=\h\)\@!+hs=s+3    matchgroup=rubyStringDelimiter end=+^\s*\zs\z1$+ contains=rubyHeredocStart,@rubyStringSpecial fold keepend
    7              0.000132 syn region rubyString start=+\%(\%(class\|::\)\_s*\|\%([]}).]\)\s\|\w\)\@<!<<-"\z([^"]*\)"\ze\%(.*<<-\=['`"]\=\h\)\@!+hs=s+3  matchgroup=rubyStringDelimiter end=+^\s*\zs\z1$+ contains=rubyHeredocStart,@rubyStringSpecial fold keepend
    7              0.000137 syn region rubyString start=+\%(\%(class\|::\)\_s*\|\%([]}).]\)\s\|\w\)\@<!<<-'\z([^']*\)'\ze\%(.*<<-\=['`"]\=\h\)\@!+hs=s+3  matchgroup=rubyStringDelimiter end=+^\s*\zs\z1$+ contains=rubyHeredocStart		     fold keepend
    7              0.000119 syn region rubyString start=+\%(\%(class\|::\)\_s*\|\%([]}).]\)\s\|\w\)\@<!<<-`\z([^`]*\)`\ze\%(.*<<-\=['`"]\=\h\)\@!+hs=s+3  matchgroup=rubyStringDelimiter end=+^\s*\zs\z1$+ contains=rubyHeredocStart,@rubyStringSpecial fold keepend
                            
    7              0.000029 if exists('main_syntax') && main_syntax == 'eruby'
                              let b:ruby_no_expensive = 1
                            end
                            
    7              0.000149 syn match  rubyAliasDeclaration    "[^[:space:];#.()]\+" contained contains=rubySymbol,rubyGlobalVariable,rubyPredefinedVariable nextgroup=rubyAliasDeclaration2 skipwhite
    7              0.000114 syn match  rubyAliasDeclaration2   "[^[:space:];#.()]\+" contained contains=rubySymbol,rubyGlobalVariable,rubyPredefinedVariable
    7              0.000311 syn match  rubyMethodDeclaration   "[^[:space:];#(]\+"	 contained contains=rubyConstant,rubyBoolean,rubyPseudoVariable,rubyInstanceVariable,rubyClassVariable,rubyGlobalVariable
    7              0.000093 syn match  rubyClassDeclaration    "[^[:space:];#<]\+"	 contained contains=rubyConstant,rubyOperator
    7              0.000088 syn match  rubyModuleDeclaration   "[^[:space:];#<]\+"	 contained contains=rubyConstant,rubyOperator
    7              0.000070 syn match  rubyFunction "\<[_[:alpha:]][_[:alnum:]]*[?!=]\=[[:alnum:]_.:?!=]\@!" contained containedin=rubyMethodDeclaration
    7              0.000084 syn match  rubyFunction "\%(\s\|^\)\@<=[_[:alpha:]][_[:alnum:]]*[?!=]\=\%(\s\|$\)\@=" contained containedin=rubyAliasDeclaration,rubyAliasDeclaration2
    7              0.000146 syn match  rubyFunction "\%([[:space:].]\|^\)\@<=\%(\[\]=\=\|\*\*\|[+-]@\=\|[*/%|&^~]\|<<\|>>\|[<>]=\=\|<=>\|===\|[=!]=\|[=!]\~\|!\|`\)\%([[:space:];#(]\|$\)\@=" contained containedin=rubyAliasDeclaration,rubyAliasDeclaration2,rubyMethodDeclaration
                            
    7              0.000165 syn cluster rubyDeclaration contains=rubyAliasDeclaration,rubyAliasDeclaration2,rubyMethodDeclaration,rubyModuleDeclaration,rubyClassDeclaration,rubyFunction,rubyBlockParameter
                            
                            " Keywords
                            " Note: the following keywords have already been defined:
                            " begin case class def do end for if module unless until while
    7              0.000090 syn match   rubyControl	       "\<\%(and\|break\|in\|next\|not\|or\|redo\|rescue\|retry\|return\)\>[?!]\@!"
    7              0.000036 syn match   rubyOperator       "\<defined?" display
    7              0.000039 syn match   rubyKeyword	       "\<\%(super\|yield\)\>[?!]\@!"
    7              0.000037 syn match   rubyBoolean	       "\<\%(true\|false\)\>[?!]\@!"
    7              0.000269 syn match   rubyPseudoVariable "\<\%(nil\|self\|__ENCODING__\|__FILE__\|__LINE__\|__callee__\|__method__\)\>[?!]\@!" " TODO: reorganise
    7              0.000044 syn match   rubyBeginEnd       "\<\%(BEGIN\|END\)\>[?!]\@!"
                            
                            " Expensive Mode - match 'end' with the appropriate opening keyword for syntax
                            " based folding and special highlighting of module/class/method definitions
    7              0.000039 if !exists("b:ruby_no_expensive") && !exists("ruby_no_expensive")
    7              0.000056   syn match  rubyDefine "\<alias\>"  nextgroup=rubyAliasDeclaration  skipwhite skipnl
    7              0.000052   syn match  rubyDefine "\<def\>"    nextgroup=rubyMethodDeclaration skipwhite skipnl
    7              0.000047   syn match  rubyDefine "\<undef\>"  nextgroup=rubyFunction	     skipwhite skipnl
    7              0.000047   syn match  rubyClass	"\<class\>"  nextgroup=rubyClassDeclaration  skipwhite skipnl
    7              0.000047   syn match  rubyModule "\<module\>" nextgroup=rubyModuleDeclaration skipwhite skipnl
                            
    7              0.000108   syn region rubyMethodBlock start="\<def\>"	matchgroup=rubyDefine end="\%(\<def\_s\+\)\@<!\<end\>" contains=ALLBUT,@rubyNotTop fold
    7              0.000137   syn region rubyBlock	     start="\<class\>"	matchgroup=rubyClass  end="\<end\>"		       contains=ALLBUT,@rubyNotTop fold
    7              0.000065   syn region rubyBlock	     start="\<module\>" matchgroup=rubyModule end="\<end\>"		       contains=ALLBUT,@rubyNotTop fold
                            
                              " modifiers
    7              0.000036   syn match rubyConditionalModifier "\<\%(if\|unless\)\>"    display
    7              0.000039   syn match rubyRepeatModifier	     "\<\%(while\|until\)\>" display
                            
    7              0.000088   syn region rubyDoBlock      matchgroup=rubyControl start="\<do\>" end="\<end\>"                 contains=ALLBUT,@rubyNotTop fold
                              " curly bracket block or hash literal
    7              0.000077   syn region rubyCurlyBlock	matchgroup=rubyCurlyBlockDelimiter  start="{" end="}"				contains=ALLBUT,@rubyNotTop fold
    7              0.000088   syn region rubyArrayLiteral	matchgroup=rubyArrayDelimiter	    start="\%(\w\|[\]})]\)\@<!\[" end="]"	contains=ALLBUT,@rubyNotTop fold
                            
                              " statements without 'do'
    7              0.000080   syn region rubyBlockExpression       matchgroup=rubyControl	  start="\<begin\>" end="\<end\>" contains=ALLBUT,@rubyNotTop fold
    7              0.000132   syn region rubyCaseExpression	       matchgroup=rubyConditional start="\<case\>"  end="\<end\>" contains=ALLBUT,@rubyNotTop fold
    7              0.000156   syn region rubyConditionalExpression matchgroup=rubyConditional start="\%(\%(^\|\.\.\.\=\|[{:,;([<>~\*/%&^|+=-]\|\%(\<[_[:lower:]][_[:alnum:]]*\)\@<![?!]\)\s*\)\@<=\%(if\|unless\)\>" end="\%(\%(\%(\.\@<!\.\)\|::\)\s*\)\@<!\<end\>" contains=ALLBUT,@rubyNotTop fold
                            
    7              0.000072   syn match rubyConditional "\<\%(then\|else\|when\)\>[?!]\@!"	contained containedin=rubyCaseExpression
    7              0.000067   syn match rubyConditional "\<\%(then\|else\|elsif\)\>[?!]\@!" contained containedin=rubyConditionalExpression
                            
    7              0.000076   syn match rubyExceptional	  "\<\%(\%(\%(;\|^\)\s*\)\@<=rescue\|else\|ensure\)\>[?!]\@!" contained containedin=rubyBlockExpression
    7              0.000061   syn match rubyMethodExceptional "\<\%(\%(\%(;\|^\)\s*\)\@<=rescue\|else\|ensure\)\>[?!]\@!" contained containedin=rubyMethodBlock
                            
                              " statements with optional 'do'
    7              0.000173   syn region rubyOptionalDoLine   matchgroup=rubyRepeat start="\<for\>[?!]\@!" start="\%(\%(^\|\.\.\.\=\|[{:,;([<>~\*/%&^|+-]\|\%(\<[_[:lower:]][_[:alnum:]]*\)\@<![!=?]\)\s*\)\@<=\<\%(until\|while\)\>" matchgroup=rubyOptionalDo end="\%(\<do\>\)" end="\ze\%(;\|$\)" oneline contains=ALLBUT,@rubyNotTop
    7              0.000152   syn region rubyRepeatExpression start="\<for\>[?!]\@!" start="\%(\%(^\|\.\.\.\=\|[{:,;([<>~\*/%&^|+-]\|\%(\<[_[:lower:]][_[:alnum:]]*\)\@<![!=?]\)\s*\)\@<=\<\%(until\|while\)\>" matchgroup=rubyRepeat end="\<end\>" contains=ALLBUT,@rubyNotTop nextgroup=rubyOptionalDoLine fold
                            
    7              0.000025   if !exists("ruby_minlines")
                                let ruby_minlines = 500
                              endif
    7              0.000052   exec "syn sync minlines=" . ruby_minlines
                            
    7              0.000006 else
                              syn match rubyControl "\<def\>[?!]\@!"    nextgroup=rubyMethodDeclaration skipwhite skipnl
                              syn match rubyControl "\<class\>[?!]\@!"  nextgroup=rubyClassDeclaration  skipwhite skipnl
                              syn match rubyControl "\<module\>[?!]\@!" nextgroup=rubyModuleDeclaration skipwhite skipnl
                              syn match rubyControl "\<\%(case\|begin\|do\|for\|if\|unless\|while\|until\|else\|elsif\|ensure\|then\|when\|end\)\>[?!]\@!"
                              syn match rubyKeyword "\<\%(alias\|undef\)\>[?!]\@!"
                            endif
                            
                            " Special Methods
    7              0.000020 if !exists("ruby_no_special_methods")
    7              0.000066   syn keyword rubyAccess    public protected private public_class_method private_class_method public_constant private_constant module_function
                              " attr is a common variable name
    7              0.000074   syn match   rubyAttribute "\%(\%(^\|;\)\s*\)\@<=attr\>\(\s*[.=]\)\@!"
    7              0.000048   syn keyword rubyAttribute attr_accessor attr_reader attr_writer
    7              0.000107   syn match   rubyControl   "\<\%(exit!\|\%(abort\|at_exit\|exit\|fork\|loop\|trap\)\>[?!]\@!\)"
    7              0.000036   syn keyword rubyEval	    eval class_eval instance_eval module_eval
    7              0.000047   syn keyword rubyException raise fail catch throw
                              " false positive with 'include?'
    7              0.000050   syn match   rubyInclude   "\<include\>[?!]\@!"
    7              0.000049   syn keyword rubyInclude   autoload extend load prepend require require_relative
    7              0.000032   syn keyword rubyKeyword   callcc caller lambda proc
    7              0.000005 endif
                            
                            " Comments and Documentation
    7              0.000034 syn match   rubySharpBang "\%^#!.*" display
    7              0.000035 syn keyword rubyTodo	  FIXME NOTE TODO OPTIMIZE XXX todo contained
    7              0.000096 syn match   rubyComment   "#.*" contains=rubySharpBang,rubySpaceError,rubyTodo,@Spell
    7              0.000023 if !exists("ruby_no_comment_fold")
    7              0.000122   syn region rubyMultilineComment start="\%(\%(^\s*#.*\n\)\@<!\%(^\s*#.*\n\)\)\%(\(^\s*#.*\n\)\{1,}\)\@=" end="\%(^\s*#.*\n\)\@<=\%(^\s*#.*\n\)\%(^\s*#\)\@!" contains=rubyComment transparent fold keepend
    7              0.000117   syn region rubyDocumentation	  start="^=begin\ze\%(\s.*\)\=$" end="^=end\%(\s.*\)\=$" contains=rubySpaceError,rubyTodo,@Spell fold
    7              0.000007 else
                              syn region rubyDocumentation	  start="^=begin\s*$" end="^=end\s*$" contains=rubySpaceError,rubyTodo,@Spell
                            endif
                            
                            " Note: this is a hack to prevent 'keywords' being highlighted as such when called as methods with an explicit receiver
    7              0.000094 syn match rubyKeywordAsMethod "\%(\%(\.\@<!\.\)\|::\)\_s*\%(alias\|and\|begin\|break\|case\|class\|def\|defined\|do\|else\)\>"		  transparent contains=NONE
    7              0.000080 syn match rubyKeywordAsMethod "\%(\%(\.\@<!\.\)\|::\)\_s*\%(elsif\|end\|ensure\|false\|for\|if\|in\|module\|next\|nil\)\>"		  transparent contains=NONE
    7              0.000105 syn match rubyKeywordAsMethod "\%(\%(\.\@<!\.\)\|::\)\_s*\%(not\|or\|redo\|rescue\|retry\|return\|self\|super\|then\|true\)\>"		  transparent contains=NONE
    7              0.000081 syn match rubyKeywordAsMethod "\%(\%(\.\@<!\.\)\|::\)\_s*\%(undef\|unless\|until\|when\|while\|yield\|BEGIN\|END\|__FILE__\|__LINE__\)\>" transparent contains=NONE
                            
    7              0.000065 syn match rubyKeywordAsMethod "\<\%(alias\|begin\|case\|class\|def\|do\|end\)[?!]" transparent contains=NONE
    7              0.000064 syn match rubyKeywordAsMethod "\<\%(if\|module\|undef\|unless\|until\|while\)[?!]" transparent contains=NONE
                            
    7              0.000073 syn match rubyKeywordAsMethod "\%(\%(\.\@<!\.\)\|::\)\_s*\%(abort\|at_exit\|attr\|attr_accessor\|attr_reader\)\>"	transparent contains=NONE
    7              0.000076 syn match rubyKeywordAsMethod "\%(\%(\.\@<!\.\)\|::\)\_s*\%(attr_writer\|autoload\|callcc\|catch\|caller\)\>"		transparent contains=NONE
    7              0.000078 syn match rubyKeywordAsMethod "\%(\%(\.\@<!\.\)\|::\)\_s*\%(eval\|class_eval\|instance_eval\|module_eval\|exit\)\>"	transparent contains=NONE
    7              0.000089 syn match rubyKeywordAsMethod "\%(\%(\.\@<!\.\)\|::\)\_s*\%(extend\|fail\|fork\|include\|lambda\)\>"			transparent contains=NONE
    7              0.000071 syn match rubyKeywordAsMethod "\%(\%(\.\@<!\.\)\|::\)\_s*\%(load\|loop\|prepend\|private\|proc\|protected\)\>"		transparent contains=NONE
    7              0.000075 syn match rubyKeywordAsMethod "\%(\%(\.\@<!\.\)\|::\)\_s*\%(public\|require\|require_relative\|raise\|throw\|trap\)\>"	transparent contains=NONE
                            
                            " __END__ Directive
    7              0.000062 syn region rubyData matchgroup=rubyDataDirective start="^__END__$" end="\%$" fold
                            
    7              0.000026 hi def link rubyClass			rubyDefine
    7              0.000017 hi def link rubyModule			rubyDefine
    7              0.000021 hi def link rubyMethodExceptional	rubyDefine
    7              0.000036 hi def link rubyDefine			Define
    7              0.000032 hi def link rubyFunction		Function
    7              0.000042 hi def link rubyConditional		Conditional
    7              0.000030 hi def link rubyConditionalModifier	rubyConditional
    7              0.000033 hi def link rubyExceptional		rubyConditional
    7              0.000040 hi def link rubyRepeat			Repeat
    7              0.000030 hi def link rubyRepeatModifier		rubyRepeat
    7              0.000029 hi def link rubyOptionalDo		rubyRepeat
    7              0.000044 hi def link rubyControl			Statement
    7              0.000043 hi def link rubyInclude			Include
    7              0.000029 hi def link rubyInteger			Number
    7              0.000034 hi def link rubyASCIICode		Character
    7              0.000029 hi def link rubyFloat			Float
    7              0.000030 hi def link rubyBoolean			Boolean
    7              0.000042 hi def link rubyException		Exception
    7              0.000023 if !exists("ruby_no_identifiers")
    7              0.000034   hi def link rubyIdentifier		Identifier
    7              0.000005 else
                              hi def link rubyIdentifier		NONE
                            endif
    7              0.000024 hi def link rubyClassVariable		rubyIdentifier
    7              0.000043 hi def link rubyConstant		Type
    7              0.000033 hi def link rubyGlobalVariable		rubyIdentifier
    7              0.000021 hi def link rubyBlockParameter		rubyIdentifier
    7              0.000017 hi def link rubyInstanceVariable	rubyIdentifier
    7              0.000020 hi def link rubyPredefinedIdentifier	rubyIdentifier
    7              0.000017 hi def link rubyPredefinedConstant	rubyPredefinedIdentifier
    7              0.000020 hi def link rubyPredefinedVariable	rubyPredefinedIdentifier
    7              0.000043 hi def link rubySymbol			Constant
    7              0.000030 hi def link rubyKeyword			Keyword
    7              0.000032 hi def link rubyOperator		Operator
    7              0.000031 hi def link rubyBeginEnd		Statement
    7              0.000043 hi def link rubyAccess			Statement
    7              0.000043 hi def link rubyAttribute		Statement
    7              0.000029 hi def link rubyEval			Statement
    7              0.000030 hi def link rubyPseudoVariable		Constant
                            
    7              0.000029 hi def link rubyComment			Comment
    7              0.000029 hi def link rubyData			Comment
    7              0.000032 hi def link rubyDataDirective		Delimiter
    7              0.000031 hi def link rubyDocumentation		Comment
    7              0.000031 hi def link rubyTodo			Todo
                            
    7              0.000021 hi def link rubyQuoteEscape		rubyStringEscape
    7              0.000032 hi def link rubyStringEscape		Special
    7              0.000046 hi def link rubyInterpolationDelimiter	Delimiter
    7              0.000020 hi def link rubyNoInterpolation		rubyString
    7              0.000030 hi def link rubySharpBang		PreProc
    7              0.000032 hi def link rubyRegexpDelimiter		rubyStringDelimiter
    7              0.000030 hi def link rubySymbolDelimiter		rubyStringDelimiter
    7              0.000041 hi def link rubyStringDelimiter		Delimiter
    7              0.000020 hi def link rubyHeredoc			rubyString
    7              0.000033 hi def link rubyString			String
    7              0.000020 hi def link rubyRegexpEscape		rubyRegexpSpecial
    7              0.000032 hi def link rubyRegexpQuantifier	rubyRegexpSpecial
    7              0.000018 hi def link rubyRegexpAnchor		rubyRegexpSpecial
    7              0.000021 hi def link rubyRegexpDot		rubyRegexpCharClass
    7              0.000018 hi def link rubyRegexpCharClass		rubyRegexpSpecial
    7              0.000033 hi def link rubyRegexpSpecial		Special
    7              0.000030 hi def link rubyRegexpComment		Comment
    7              0.000021 hi def link rubyRegexp			rubyString
                            
    7              0.000034 hi def link rubyInvalidVariable		Error
    7              0.000030 hi def link rubyError			Error
    7              0.000015 hi def link rubySpaceError		rubyError
                            
    7              0.000021 let b:current_syntax = "ruby"
                            
                            " vim: nowrap sw=2 sts=2 ts=8 noet:

SCRIPT  /usr/local/Cellar/vim/7.4.335/share/vim/vim74/syntax/python.vim
Sourced 7 times
Total time:   0.005533
 Self time:   0.005533

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:	Python
                            " Maintainer:	Neil Schemenauer <nas@python.ca>
                            " Last Change:	2013 Feb 26
                            " Credits:	Zvezdan Petkovic <zpetkovic@acm.org>
                            "		Neil Schemenauer <nas@python.ca>
                            "		Dmitry Vasiliev
                            "
                            "		This version is a major rewrite by Zvezdan Petkovic.
                            "
                            "		- introduced highlighting of doctests
                            "		- updated keywords, built-ins, and exceptions
                            "		- corrected regular expressions for
                            "
                            "		  * functions
                            "		  * decorators
                            "		  * strings
                            "		  * escapes
                            "		  * numbers
                            "		  * space error
                            "
                            "		- corrected synchronization
                            "		- more highlighting is ON by default, except
                            "		- space error highlighting is OFF by default
                            "
                            " Optional highlighting can be controlled using these variables.
                            "
                            "   let python_no_builtin_highlight = 1
                            "   let python_no_doctest_code_highlight = 1
                            "   let python_no_doctest_highlight = 1
                            "   let python_no_exception_highlight = 1
                            "   let python_no_number_highlight = 1
                            "   let python_space_error_highlight = 1
                            "
                            " All the options above can be switched on together.
                            "
                            "   let python_highlight_all = 1
                            "
                            
                            " For version 5.x: Clear all syntax items.
                            " For version 6.x: Quit when a syntax file was already loaded.
    7              0.000016 if version < 600
                              syntax clear
                            elseif exists("b:current_syntax")
                              finish
                            endif
                            
                            " We need nocompatible mode in order to continue lines with backslashes.
                            " Original setting will be restored.
    7              0.000037 let s:cpo_save = &cpo
    7              0.000035 set cpo&vim
                            
                            " Keep Python keywords in alphabetical order inside groups for easy
                            " comparison with the table in the 'Python Language Reference'
                            " http://docs.python.org/reference/lexical_analysis.html#keywords.
                            " Groups are in the order presented in NAMING CONVENTIONS in syntax.txt.
                            " Exceptions come last at the end of each group (class and def below).
                            "
                            " Keywords 'with' and 'as' are new in Python 2.6
                            " (use 'from __future__ import with_statement' in Python 2.5).
                            "
                            " Some compromises had to be made to support both Python 3.0 and 2.6.
                            " We include Python 3.0 features, but when a definition is duplicated,
                            " the last definition takes precedence.
                            "
                            " - 'False', 'None', and 'True' are keywords in Python 3.0 but they are
                            "   built-ins in 2.6 and will be highlighted as built-ins below.
                            " - 'exec' is a built-in in Python 3.0 and will be highlighted as
                            "   built-in below.
                            " - 'nonlocal' is a keyword in Python 3.0 and will be highlighted.
                            " - 'print' is a built-in in Python 3.0 and will be highlighted as
                            "   built-in below (use 'from __future__ import print_function' in 2.6)
                            "
    7              0.000054 syn keyword pythonStatement	False, None, True
    7              0.000052 syn keyword pythonStatement	as assert break continue del exec global
    7              0.000046 syn keyword pythonStatement	lambda nonlocal pass print return with yield
    7              0.000084 syn keyword pythonStatement	class def nextgroup=pythonFunction skipwhite
    7              0.000038 syn keyword pythonConditional	elif else if
    7              0.000036 syn keyword pythonRepeat	for while
    7              0.000027 syn keyword pythonOperator	and in is not or
    7              0.000042 syn keyword pythonException	except finally raise try
    7              0.000036 syn keyword pythonInclude	from import
                            
                            " Decorators (new in Python 2.4)
    7              0.000083 syn match   pythonDecorator	"@" display nextgroup=pythonFunction skipwhite
                            " The zero-length non-grouping match before the function name is
                            " extremely important in pythonFunction.  Without it, everything is
                            " interpreted as a function inside the contained environment of
                            " doctests.
                            " A dot must be allowed because of @MyClass.myfunc decorators.
    7              0.000096 syn match   pythonFunction
                                  \ "\%(\%(def\s\|class\s\|@\)\s*\)\@<=\h\%(\w\|\.\)*" contained
                            
    7              0.000061 syn match   pythonComment	"#.*$" contains=pythonTodo,@Spell
    7              0.000032 syn keyword pythonTodo		FIXME NOTE NOTES TODO XXX contained
                            
                            " Triple-quoted strings can contain doctests.
    7              0.000137 syn region  pythonString
                                  \ start=+[uU]\=\z(['"]\)+ end="\z1" skip="\\\\\|\\\z1"
                                  \ contains=pythonEscape,@Spell
    7              0.000153 syn region  pythonString
                                  \ start=+[uU]\=\z('''\|"""\)+ end="\z1" keepend
                                  \ contains=pythonEscape,pythonSpaceError,pythonDoctest,@Spell
    7              0.000080 syn region  pythonRawString
                                  \ start=+[uU]\=[rR]\z(['"]\)+ end="\z1" skip="\\\\\|\\\z1"
                                  \ contains=@Spell
    7              0.000101 syn region  pythonRawString
                                  \ start=+[uU]\=[rR]\z('''\|"""\)+ end="\z1" keepend
                                  \ contains=pythonSpaceError,pythonDoctest,@Spell
                            
    7              0.000137 syn match   pythonEscape	+\\[abfnrtv'"\\]+ contained
    7              0.000038 syn match   pythonEscape	"\\\o\{1,3}" contained
    7              0.000030 syn match   pythonEscape	"\\x\x\{2}" contained
    7              0.000042 syn match   pythonEscape	"\%(\\u\x\{4}\|\\U\x\{8}\)" contained
                            " Python allows case-insensitive Unicode IDs: http://www.unicode.org/charts/
    7              0.000037 syn match   pythonEscape	"\\N{\a\+\%(\s\a\+\)*}" contained
    7              0.000028 syn match   pythonEscape	"\\$"
                            
    7              0.000026 if exists("python_highlight_all")
                              if exists("python_no_builtin_highlight")
                                unlet python_no_builtin_highlight
                              endif
                              if exists("python_no_doctest_code_highlight")
                                unlet python_no_doctest_code_highlight
                              endif
                              if exists("python_no_doctest_highlight")
                                unlet python_no_doctest_highlight
                              endif
                              if exists("python_no_exception_highlight")
                                unlet python_no_exception_highlight
                              endif
                              if exists("python_no_number_highlight")
                                unlet python_no_number_highlight
                              endif
                              let python_space_error_highlight = 1
                            endif
                            
                            " It is very important to understand all details before changing the
                            " regular expressions below or their order.
                            " The word boundaries are *not* the floating-point number boundaries
                            " because of a possible leading or trailing decimal point.
                            " The expressions below ensure that all valid number literals are
                            " highlighted, and invalid number literals are not.  For example,
                            "
                            " - a decimal point in '4.' at the end of a line is highlighted,
                            " - a second dot in 1.0.0 is not highlighted,
                            " - 08 is not highlighted,
                            " - 08e0 or 08j are highlighted,
                            "
                            " and so on, as specified in the 'Python Language Reference'.
                            " http://docs.python.org/reference/lexical_analysis.html#numeric-literals
    7              0.000017 if !exists("python_no_number_highlight")
                              " numbers (including longs and complex)
    7              0.000045   syn match   pythonNumber	"\<0[oO]\=\o\+[Ll]\=\>"
    7              0.000037   syn match   pythonNumber	"\<0[xX]\x\+[Ll]\=\>"
    7              0.000032   syn match   pythonNumber	"\<0[bB][01]\+[Ll]\=\>"
    7              0.000038   syn match   pythonNumber	"\<\%([1-9]\d*\|0\)[Ll]\=\>"
    7              0.000037   syn match   pythonNumber	"\<\d\+[jJ]\>"
    7              0.000035   syn match   pythonNumber	"\<\d\+[eE][+-]\=\d\+[jJ]\=\>"
    7              0.000051   syn match   pythonNumber
                            	\ "\<\d\+\.\%([eE][+-]\=\d\+\)\=[jJ]\=\%(\W\|$\)\@="
    7              0.000063   syn match   pythonNumber
                            	\ "\%(^\|\W\)\@<=\d*\.\d\+\%([eE][+-]\=\d\+\)\=[jJ]\=\>"
    7              0.000004 endif
                            
                            " Group the built-ins in the order in the 'Python Library Reference' for
                            " easier comparison.
                            " http://docs.python.org/library/constants.html
                            " http://docs.python.org/library/functions.html
                            " http://docs.python.org/library/functions.html#non-essential-built-in-functions
                            " Python built-in functions are in alphabetical order.
    7              0.000044 if !exists("python_no_builtin_highlight")
                              " built-in constants
                              " 'False', 'True', and 'None' are also reserved words in Python 3.0
    7              0.000034   syn keyword pythonBuiltin	False True None
    7              0.000029   syn keyword pythonBuiltin	NotImplemented Ellipsis __debug__
                              " built-in functions
    7              0.000036   syn keyword pythonBuiltin	abs all any bin bool chr classmethod
    7              0.000035   syn keyword pythonBuiltin	compile complex delattr dict dir divmod
    7              0.000030   syn keyword pythonBuiltin	enumerate eval filter float format
    7              0.000029   syn keyword pythonBuiltin	frozenset getattr globals hasattr hash
    7              0.000030   syn keyword pythonBuiltin	help hex id input int isinstance
    7              0.000030   syn keyword pythonBuiltin	issubclass iter len list locals map max
    7              0.000036   syn keyword pythonBuiltin	min next object oct open ord pow print
    7              0.000030   syn keyword pythonBuiltin	property range repr reversed round set
    7              0.000031   syn keyword pythonBuiltin	setattr slice sorted staticmethod str
    7              0.000031   syn keyword pythonBuiltin	sum super tuple type vars zip __import__
                              " Python 2.6 only
    7              0.000029   syn keyword pythonBuiltin	basestring callable cmp execfile file
    7              0.000026   syn keyword pythonBuiltin	long raw_input reduce reload unichr
    7              0.000024   syn keyword pythonBuiltin	unicode xrange
                              " Python 3.0 only
    7              0.000028   syn keyword pythonBuiltin	ascii bytearray bytes exec memoryview
                              " non-essential built-in functions; Python 2.6 only
    7              0.000029   syn keyword pythonBuiltin	apply buffer coerce intern
    7              0.000006 endif
                            
                            " From the 'Python Library Reference' class hierarchy at the bottom.
                            " http://docs.python.org/library/exceptions.html
    7              0.000021 if !exists("python_no_exception_highlight")
                              " builtin base exceptions (only used as base classes for other exceptions)
    7              0.000025   syn keyword pythonExceptions	BaseException Exception
    7              0.000024   syn keyword pythonExceptions	ArithmeticError EnvironmentError
    7              0.000020   syn keyword pythonExceptions	LookupError
                              " builtin base exception removed in Python 3.0
    7              0.000022   syn keyword pythonExceptions	StandardError
                              " builtin exceptions (actually raised)
    7              0.000025   syn keyword pythonExceptions	AssertionError AttributeError BufferError
    7              0.000029   syn keyword pythonExceptions	EOFError FloatingPointError GeneratorExit
    7              0.000022   syn keyword pythonExceptions	IOError ImportError IndentationError
    7              0.000025   syn keyword pythonExceptions	IndexError KeyError KeyboardInterrupt
    7              0.000025   syn keyword pythonExceptions	MemoryError NameError NotImplementedError
    7              0.000024   syn keyword pythonExceptions	OSError OverflowError ReferenceError
    7              0.000023   syn keyword pythonExceptions	RuntimeError StopIteration SyntaxError
    7              0.000027   syn keyword pythonExceptions	SystemError SystemExit TabError TypeError
    7              0.000026   syn keyword pythonExceptions	UnboundLocalError UnicodeError
    7              0.000022   syn keyword pythonExceptions	UnicodeDecodeError UnicodeEncodeError
    7              0.000024   syn keyword pythonExceptions	UnicodeTranslateError ValueError VMSError
    7              0.000022   syn keyword pythonExceptions	WindowsError ZeroDivisionError
                              " builtin warnings
    7              0.000026   syn keyword pythonExceptions	BytesWarning DeprecationWarning FutureWarning
    7              0.000022   syn keyword pythonExceptions	ImportWarning PendingDeprecationWarning
    7              0.000028   syn keyword pythonExceptions	RuntimeWarning SyntaxWarning UnicodeWarning
    7              0.000021   syn keyword pythonExceptions	UserWarning Warning
    7              0.000005 endif
                            
    7              0.000020 if exists("python_space_error_highlight")
                              " trailing whitespace
                              syn match   pythonSpaceError	display excludenl "\s\+$"
                              " mixed tabs and spaces
                              syn match   pythonSpaceError	display " \+\t"
                              syn match   pythonSpaceError	display "\t\+ "
                            endif
                            
                            " Do not spell doctests inside strings.
                            " Notice that the end of a string, either ''', or """, will end the contained
                            " doctest too.  Thus, we do *not* need to have it as an end pattern.
    7              0.000017 if !exists("python_no_doctest_highlight")
    7              0.000019   if !exists("python_no_doctest_code_highlight")
    7              0.000094     syn region pythonDoctest
                            	  \ start="^\s*>>>\s" end="^\s*$"
                            	  \ contained contains=ALLBUT,pythonDoctest,@Spell
    7              0.000071     syn region pythonDoctestValue
                            	  \ start=+^\s*\%(>>>\s\|\.\.\.\s\|"""\|'''\)\@!\S\++ end="$"
                            	  \ contained
    7              0.000007   else
                                syn region pythonDoctest
                            	  \ start="^\s*>>>" end="^\s*$"
                            	  \ contained contains=@NoSpell
                              endif
    7              0.000007 endif
                            
                            " Sync at the beginning of class, function, or method definition.
    7              0.000051 syn sync match pythonSync grouphere NONE "^\s*\%(def\|class\)\s\+\h\w*\s*("
                            
    7              0.000016 if version >= 508 || !exists("did_python_syn_inits")
    7              0.000011   if version <= 508
                                let did_python_syn_inits = 1
                                command -nargs=+ HiLink hi link <args>
                              else
    7              0.000061     command -nargs=+ HiLink hi def link <args>
    7              0.000006   endif
                            
                              " The default highlight links.  Can be overridden later.
    7              0.000081   HiLink pythonStatement	Statement
    7              0.000060   HiLink pythonConditional	Conditional
    7              0.000056   HiLink pythonRepeat		Repeat
    7              0.000043   HiLink pythonOperator		Operator
    7              0.000055   HiLink pythonException	Exception
    7              0.000054   HiLink pythonInclude		Include
    7              0.000040   HiLink pythonDecorator	Define
    7              0.000053   HiLink pythonFunction		Function
    7              0.000041   HiLink pythonComment		Comment
    7              0.000043   HiLink pythonTodo		Todo
    7              0.000042   HiLink pythonString		String
    7              0.000039   HiLink pythonRawString	String
    7              0.000042   HiLink pythonEscape		Special
    7              0.000022   if !exists("python_no_number_highlight")
    7              0.000045     HiLink pythonNumber		Number
    7              0.000007   endif
    7              0.000016   if !exists("python_no_builtin_highlight")
    7              0.000043     HiLink pythonBuiltin	Function
    7              0.000004   endif
    7              0.000015   if !exists("python_no_exception_highlight")
    7              0.000042     HiLink pythonExceptions	Structure
    7              0.000005   endif
    7              0.000018   if exists("python_space_error_highlight")
                                HiLink pythonSpaceError	Error
                              endif
    7              0.000031   if !exists("python_no_doctest_highlight")
    7              0.000044     HiLink pythonDoctest	Special
    7              0.000041     HiLink pythonDoctestValue	Define
    7              0.000006   endif
                            
    7              0.000012   delcommand HiLink
    7              0.000005 endif
                            
    7              0.000018 let b:current_syntax = "python"
                            
    7              0.000041 let &cpo = s:cpo_save
    7              0.000013 unlet s:cpo_save
                            
                            " vim:set sw=2 sts=2 ts=8 noet:

SCRIPT  /usr/local/Cellar/vim/7.4.335/share/vim/vim74/syntax/nosyntax.vim
Sourced 7 times
Total time:   0.011316
 Self time:   0.004703

count  total (s)   self (s)
                            " Vim syntax support file
                            " Maintainer:	Bram Moolenaar <Bram@vim.org>
                            " Last Change:	2006 Apr 16
                            
                            " This file is used for ":syntax off".
                            " It removes the autocommands and stops highlighting for all buffers.
                            
    7              0.000030 if !has("syntax")
                              finish
                            endif
                            
                            " Remove all autocommands for the Syntax event.  This also avoids that
                            " "syntax=foo" in a modeline triggers the SynSet() function of synload.vim.
    7              0.000044 au! Syntax
                            
                            " remove all syntax autocommands and remove the syntax for each buffer
    7              0.000011 augroup syntaxset
    7              0.002541   au!
    7              0.000056   au BufEnter * syn clear
    7              0.000017   au BufEnter * if exists("b:current_syntax") | unlet b:current_syntax | endif
    7   0.006730   0.000117   doautoall syntaxset BufEnter *
    7              0.001706   au!
    7              0.000011 augroup END
                            
    7              0.000020 if exists("syntax_on")
    7              0.000015   unlet syntax_on
    7              0.000007 endif
    7              0.000014 if exists("syntax_manual")
                              unlet syntax_manual
                            endif

SCRIPT  /Users/jjcall/Src/dotfiles/vim/bundle/syntastic/syntax_checkers/vim/vimlint.vim
Sourced 1 time
Total time:   0.000470
 Self time:   0.000239

count  total (s)   self (s)
                            "============================================================================
                            "File:        vimlint.vim
                            "Description: Syntax checking plugin for syntastic.vim
                            "Maintainer:  LCD 47 <lcd047 at gmail dot com>
                            "License:     This program is free software. It comes without any warranty,
                            "             to the extent permitted by applicable law. You can redistribute
                            "             it and/or modify it under the terms of the Do What The Fuck You
                            "             Want To Public License, Version 2, as published by Sam Hocevar.
                            "             See http://sam.zoy.org/wtfpl/COPYING for more details.
                            "
                            "============================================================================
                            
    1              0.000016 if exists("g:loaded_syntastic_vim_vimlint_checker")
                                finish
                            endif
    1              0.000007 let g:loaded_syntastic_vim_vimlint_checker = 1
                            
    1              0.000011 let s:save_cpo = &cpo
    1              0.000011 set cpo&vim
                            
    1              0.000006 function! SyntaxCheckers_vim_vimlint_GetHighlightRegex(item)
                                let term = matchstr(a:item['text'], '\m `\zs[^`]\+\ze`')
                                if term != ''
                                    let col = get(a:item, 'col', 0)
                            
                                    if col && term[0:1] ==# 'l:'
                                        if getline(a:item.lnum)[col-1:col] !=# 'l:'
                                            let term = term[2:]
                                        endif
                                    endif
                            
                                    return col ? '\%>' . (col - 1) . 'c\%<' . (col + strlen(term)) . 'c' : '\V' . escape(term, '\')
                                endif
                            
                                return ''
                            endfunction
                            
    1              0.000003 function! SyntaxCheckers_vim_vimlint_IsAvailable() dict
                                return
                                    \ globpath(&runtimepath, 'autoload/vimlparser.vim') != '' &&
                                    \ globpath(&runtimepath, 'autoload/vimlint.vim') != ''
                            endfunction
                            
    1              0.000003 function! SyntaxCheckers_vim_vimlint_GetLocList() dict
                                " EVL102: unused variable v
                                " EVL103: unused argument v
                                " EVL104: variable may not be initialized on some execution path: v
                                " EVL105: global variable v is defined without g:
                                " EVL106: local variable v is used without l:
                                " EVL201: unreachable code
                                " EVL204: constant in conditional context
                                " EVL205: missing scriptencoding
                                " value 3: the message is a warning
                                "
                                " References: :help vimlint-errorcode and :help vimlint-variables
                                let param = {
                                    \ 'output': function('s:vimlintOutput'),
                                    \ 'quiet':  1,
                                    \ 'EVL102': 3,
                                    \ 'EVL103': 3,
                                    \ 'EVL104': 3,
                                    \ 'EVL105': 3,
                                    \ 'EVL106': 3,
                                    \ 'EVL201': 3,
                                    \ 'EVL204': 3,
                                    \ 'EVL205': 3 }
                            
                                if exists('g:syntastic_vimlint_options')
                                    if type(g:syntastic_vimlint_options) == type({})
                                        let options = filter(copy(g:syntastic_vimlint_options), 'v:key =~# "\\m^EVL"')
                                        call extend(param, options, 'force')
                                    endif
                                endif
                            
                                return vimlint#vimlint(expand('%'), param)
                            endfunction
                            
                            " @vimlint(EVL103, 1, a:filename)
    1              0.000011 function! s:vimlintOutput(filename, pos, ev, eid, mes, obj)
                                call add(a:obj.error, {
                                    \ 'bufnr': bufnr(''),
                                    \ 'lnum': a:pos.lnum,
                                    \ 'col': a:pos.col,
                                    \ 'vcol': 0,
                                    \ 'type': a:ev[0],
                                    \ 'text': '[' . a:eid . '] ' . a:mes,
                                    \ 'valid': a:pos.lnum > 0 })
                            endfunction
                            " @vimlint(EVL103, 0, a:filename)
                            
    1   0.000258   0.000027 call g:SyntasticRegistry.CreateAndRegisterChecker({
                                \ 'filetype': 'vim',
                                \ 'name': 'vimlint',
                                \ 'exec': 'vim' })
                            
    1              0.000009 let &cpo = s:save_cpo
    1              0.000003 unlet s:save_cpo
                            
                            " vim: set et sts=4 sw=4:

FUNCTION  <SNR>55_repo_head_ref()
Called 9 times
Total time:   0.001022
 Self time:   0.000850

count  total (s)   self (s)
    9   0.000547   0.000451   if !filereadable(self.dir('HEAD'))
                                return ''
                              endif
    9   0.000432   0.000356   return readfile(self.dir('HEAD'))[0]

FUNCTION  1()
Called 273 times
Total time:   0.005310
 Self time:   0.001524

count  total (s)   self (s)
  273   0.005201   0.001415   return s:expand_path(g:bundle_dir.'/'.self.name)

FUNCTION  delimitMate#GetCurrentSyntaxRegion()
Called 1 time
Total time:   0.000370
 Self time:   0.000027

count  total (s)   self (s)
    1              0.000005 	let col = col('.')
    1              0.000004 	if  col == col('$')
    1              0.000003 		let col = col - 1
    1              0.000001 	endif
    1   0.000356   0.000013 	return delimitMate#GetSyntaxRegion(line('.'), col)

FUNCTION  <SNR>76_ClearCache()
Called 3 times
Total time:   0.000858
 Self time:   0.000079

count  total (s)   self (s)
    3   0.000666   0.000026     call s:notifiers.reset(g:SyntasticLoclist.current())
    3   0.000190   0.000051     call b:syntastic_loclist.destroy()

FUNCTION  <SNR>76_CacheErrors()
Called 3 times
Total time:   0.013365
 Self time:   0.000720

count  total (s)   self (s)
    3   0.000870   0.000012     call s:ClearCache()
    3   0.000109   0.000016     let newLoclist = g:SyntasticLoclist.New([])
                            
    3   0.000188   0.000017     if !s:skipFile()
                                    " debug logging {{{3
    3   0.000043   0.000019         call syntastic#log#debugShowVariables(g:SyntasticDebugTrace, 'version')
    3   0.000035   0.000016         call syntastic#log#debugShowOptions(g:SyntasticDebugTrace, s:debug_dump_options)
    3   0.000030   0.000012         call syntastic#log#debugDump(g:SyntasticDebugVariables)
    3   0.000028   0.000011         call syntastic#log#debugShowVariables(g:SyntasticDebugTrace, 'aggregate_errors')
    3   0.000058   0.000039         call syntastic#log#debug(g:SyntasticDebugTrace, 'getcwd() = ' . getcwd())
                                    " }}}3
                            
    3   0.000045   0.000015         let filetypes = s:resolveFiletypes()
    3   0.000048   0.000020         let aggregate_errors = syntastic#util#var('aggregate_errors') || len(filetypes) > 1
    3              0.000009         let decorate_errors = aggregate_errors && syntastic#util#var('id_checkers')
    3              0.000007         let sort_aggregated_errors = aggregate_errors && syntastic#util#var('sort_aggregated_errors')
                            
    3              0.000003         let clist = []
    6              0.000008         for type in filetypes
    3   0.009886   0.000025             call extend(clist, s:registry.getCheckers(type, a:checker_names))
    3              0.000003         endfor
                            
    3              0.000004         let names = []
    3              0.000006         let unavailable_checkers = 0
    6              0.000010         for checker in clist
    3   0.000036   0.000025             let cname = checker.getFiletype() . '/' . checker.getName()
    3   0.001185   0.000013             if !checker.isAvailable()
    3   0.000056   0.000027                 call syntastic#log#debug(g:SyntasticDebugTrace, 'CacheErrors: Checker ' . cname . ' is not available')
    3              0.000008                 let unavailable_checkers += 1
    3              0.000004                 continue
                                        endif
                            
                                        call syntastic#log#debug(g:SyntasticDebugTrace, 'CacheErrors: Invoking checker: ' . cname)
                            
                                        let loclist = checker.getLocList()
                            
                                        if !loclist.isEmpty()
                                            if decorate_errors
                                                call loclist.decorate(cname)
                                            endif
                                            call add(names, cname)
                                            if checker.getWantSort() && !sort_aggregated_errors
                                                call loclist.sort()
                                                call syntastic#log#debug(g:SyntasticDebugLoclist, 'sorted:', loclist)
                                            endif
                            
                                            let newLoclist = newLoclist.extend(loclist)
                            
                                            if !aggregate_errors
                                                break
                                            endif
                                        endif
                                    endfor
                            
                                    " set names {{{3
    3              0.000006         if !empty(names)
                                        if len(syntastic#util#unique(map( copy(names), 'substitute(v:val, "\\m/.*", "", "")' ))) == 1
                                            let type = substitute(names[0], '\m/.*', '', '')
                                            let name = join(map( names, 'substitute(v:val, "\\m.\\{-}/", "", "")' ), ', ')
                                            call newLoclist.setName( name . ' ('. type . ')' )
                                        else
                                            " checkers from mixed types
                                            call newLoclist.setName(join(names, ', '))
                                        endif
                                    endif
                                    " }}}3
                            
                                    " issue warning about no active checkers {{{3
    3              0.000008         if len(clist) == unavailable_checkers
    3              0.000008             if !empty(a:checker_names)
                                            if len(a:checker_names) == 1
                                                call syntastic#log#warn('checker ' . a:checker_names[0] . ' is not available')
                                            else
                                                call syntastic#log#warn('checkers ' . join(a:checker_names, ', ') . ' are not available')
                                            endif
                                        else
    3   0.000044   0.000020                 call syntastic#log#debug(g:SyntasticDebugTrace, 'CacheErrors: no checkers available for ' . &filetype)
    3              0.000001             endif
    3              0.000003         endif
                                    " }}}3
                            
    3   0.000048   0.000025         call syntastic#log#debug(g:SyntasticDebugLoclist, 'aggregated:', newLoclist)
    3              0.000004         if sort_aggregated_errors
                                        call newLoclist.sort()
                                        call syntastic#log#debug(g:SyntasticDebugLoclist, 'sorted:', newLoclist)
                                    endif
    3              0.000001     endif
                            
    3   0.000264   0.000016     call newLoclist.deploy()

FUNCTION  255()
Called 3 times
Total time:   0.000242
 Self time:   0.000153

count  total (s)   self (s)
    3   0.000044   0.000009     if self.enabled()
    3   0.000034   0.000012         call syntastic#log#debug(g:SyntasticDebugNotifications, 'highlighting: refresh')
    3   0.000034   0.000008         call self._reset()
    3              0.000008         let buf = bufnr('')
    3   0.000025   0.000019         let issues = filter(a:loclist.copyRaw(), 'v:val["bufnr"] == buf')
    3              0.000003         for item in issues
                                        let group = 'Syntastic' . get(item, 'subtype', '') . ( item['type'] ==? 'E' ? 'Error' : 'Warning' )
                            
                                        " The function `Syntastic_{filetype}_{checker}_GetHighlightRegex` is
                                        " used to override default highlighting.
                                        if has_key(item, 'hl')
                                            call matchadd(group, '\%' . item['lnum'] . 'l' . item['hl'])
                                        elseif get(item, 'col', 0)
                                            if get(item, 'vcol', 0)
                                                let lastcol = virtcol([item['lnum'], '$'])
                                                let coltype = 'v'
                                            else
                                                let lastcol = col([item['lnum'], '$'])
                                                let coltype = 'c'
                                            endif
                                            let lcol = min([lastcol, item['col']])
                            
                                            call matchadd(group, '\%' . item['lnum'] . 'l\%' . lcol . coltype)
                                        endif
                                    endfor
    3              0.000002     endif

FUNCTION  syntastic#log#debugShowOptions()
Called 3 times
Total time:   0.000019
 Self time:   0.000013

count  total (s)   self (s)
    3   0.000016   0.000010     if !s:isDebugEnabled(a:level)
    3              0.000002         return
                                endif
                            
                                let leader = s:logTimestamp()
                                call s:logRedirect(1)
                            
                                let vlist = copy(type(a:names) == type("") ? [a:names] : a:names)
                                if !empty(vlist)
                                    call map(vlist, "'&' . v:val . ' = ' . strtrans(string(eval('&' . v:val)))")
                                    echomsg leader . join(vlist, ', ')
                                endif
                                call s:logRedirect(0)

FUNCTION  airline#statusline()
Called 383 times
Total time:   0.007830
 Self time:   0.007830

count  total (s)   self (s)
  383              0.003517   if has_key(s:contexts, a:winnr)
  383              0.003430     return '%{airline#check_mode('.a:winnr.')}'.s:contexts[a:winnr].line
                              endif
                            
                              " in rare circumstances this happens...see #276
                              return ''

FUNCTION  airline#check_mode()
Called 383 times
Total time:   0.093728
 Self time:   0.031609

count  total (s)   self (s)
  383              0.001667   let context = s:contexts[a:winnr]
                            
  383              0.001426   if get(w:, 'airline_active', 1)
  383              0.001142     let l:m = mode()
  383              0.000875     if l:m ==# "i"
   95              0.000255       let l:mode = ['insert']
   95              0.000126     elseif l:m ==# "R"
                                  let l:mode = ['replace']
                                elseif l:m =~# '\v(v|V||s|S|)'
   55              0.000142       let l:mode = ['visual']
   55              0.000060     else
  233              0.000571       let l:mode = ['normal']
  233              0.000195     endif
  383              0.002257     let w:airline_current_mode = get(g:airline_mode_map, l:m, l:m)
  383              0.000276   else
                                let l:mode = ['inactive']
                                let w:airline_current_mode = get(g:airline_mode_map, '__')
                              endif
                            
  383              0.001343   if g:airline_detect_modified && &modified
  107              0.000464     call add(l:mode, 'modified')
  107              0.000102   endif
                            
  383              0.000642   if g:airline_detect_paste && &paste
                                call add(l:mode, 'paste')
                              endif
                            
  383              0.000354   if &readonly
                                call add(l:mode, 'readonly')
                              endif
                            
  383              0.001736   let mode_string = join(l:mode)
  383              0.001702   if get(w:, 'airline_lastmode', '') != mode_string
   10   0.001200   0.000096     call airline#highlighter#highlight_modified_inactive(context.bufnr)
   10   0.061137   0.000122     call airline#highlighter#highlight(l:mode)
   10              0.000032     let w:airline_lastmode = mode_string
   10              0.000007   endif
                            
  383              0.000434   return ''

FUNCTION  airline#util#append()
Called 766 times
Total time:   0.009473
 Self time:   0.009473

count  total (s)   self (s)
  766              0.001588   if a:minwidth > 0 && winwidth(0) < a:minwidth
                                return ''
                              endif
  766              0.003386   let prefix = s:spc == "\ua0" ? s:spc : s:spc.s:spc
  766              0.002651   return empty(a:text) ? '' : prefix.g:airline_left_alt_sep.s:spc.a:text

FUNCTION  <SNR>74_normaliseFiletype()
Called 3 times
Total time:   0.000040
 Self time:   0.000040

count  total (s)   self (s)
    3              0.000013     let ft = get(s:defaultFiletypeMap, a:ftalias, a:ftalias)
    3              0.000009     let ft = get(g:syntastic_filetype_map, ft, ft)
    3              0.000015     let ft = substitute(ft, '\m-', '_', 'g')
    3              0.000003     return ft

FUNCTION  <SNR>55_repo_dir()
Called 18 times
Total time:   0.000172
 Self time:   0.000172

count  total (s)   self (s)
   18              0.000157   return join([self.git_dir]+a:000,'/')

FUNCTION  <SNR>55_repo()
Called 18 times
Total time:   0.000635
 Self time:   0.000635

count  total (s)   self (s)
   18              0.000171   let dir = a:0 ? a:1 : (exists('b:git_dir') && b:git_dir !=# '' ? b:git_dir : fugitive#extract_git_dir(expand('%:p')))
   18              0.000031   if dir !=# ''
   18              0.000062     if has_key(s:repos, dir)
   18              0.000060       let repo = get(s:repos, dir)
   18              0.000019     else
                                  let repo = {'git_dir': dir}
                                  let s:repos[dir] = repo
                                endif
   18              0.000174     return extend(extend(repo, s:repo_prototype, 'keep'), s:abstract_prototype, 'keep')
                              endif
                              call s:throw('not a git repository: '.expand('%:p'))

FUNCTION  ctrlp#utils#writecache()
Called 1 time
Total time:   0.000381
 Self time:   0.000369

count  total (s)   self (s)
    1   0.000020   0.000008 	if isdirectory(ctrlp#utils#mkdir(a:0 ? a:1 : s:cache_dir))
    1              0.000358 		sil! cal writefile(a:lines, a:0 >= 2 ? a:2 : ctrlp#utils#cachefile())
    1              0.000001 	en

FUNCTION  airline#themes#get_highlight()
Called 192 times
Total time:   0.017322
 Self time:   0.001362

count  total (s)   self (s)
  192   0.017254   0.001294   return call('airline#highlighter#get_highlight', [a:group] + a:000)

FUNCTION  <SNR>76_BufWritePostHook()
Called 3 times
Total time:   0.016005
 Self time:   0.000062

count  total (s)   self (s)
    3   0.000074   0.000042     call syntastic#log#debug(g:SyntasticDebugAutocommands, 'autocmd: BufWritePost, buffer ' . bufnr("") . ' = ' . string(bufname(str2nr(bufnr("")))))
    3   0.015928   0.000017     call s:UpdateErrors(1)

FUNCTION  <SNR>122_OnInsertLeave()
Called 2 times
Total time:   0.006002
 Self time:   0.004566

count  total (s)   self (s)
    2   0.000103   0.000015   if !s:AllowedToCompleteInCurrentFile()
                                return
                              endif
                            
    2              0.000005   let s:omnifunc_mode = 0
    2   0.001366   0.000018   call s:OnFileReadyToParse()
    2              0.004454   py ycm_state.OnInsertLeave()
    2              0.000029   if g:ycm_autoclose_preview_window_after_completion || g:ycm_autoclose_preview_window_after_insertion
                                call s:ClosePreviewWindowIfNeeded()
                              endif

FUNCTION  <SNR>51_addtomrufs()
Called 3 times
Total time:   0.000930
 Self time:   0.000304

count  total (s)   self (s)
    3              0.000052 	let fn = fnamemodify(a:fname, ':p')
    3              0.000016 	let fn = exists('+ssl') ? tr(fn, '/', '\') : fn
    3              0.000112 	if ( !empty({s:in}) && fn !~# {s:in} ) || ( !empty({s:ex}) && fn =~# {s:ex} ) || !empty(getbufvar('^'.fn.'$', '&bt')) || !filereadable(fn) | retu
                            	en
    3              0.000018 	let idx = index(s:mrufs, fn, 0, !{s:cseno})
    3              0.000003 	if idx
    1              0.000007 		cal filter(s:mrufs, 'v:val !='.( {s:cseno} ? '#' : '?' ).' fn')
    1              0.000002 		cal insert(s:mrufs, fn)
    1              0.000003 		if {s:soup} && idx < 0
    1   0.000682   0.000056 			cal s:savetofile(s:mergelists())
    1              0.000001 		en
    1              0.000000 	en

FUNCTION  delimitMate#IsCRExpansion()
Called 1 time
Total time:   0.000111
 Self time:   0.000059

count  total (s)   self (s)
    1              0.000007 	let nchar = getline(line('.')-1)[-1:]
    1              0.000011 	let schar = matchstr(getline(line('.')+1), '^\s*\zs\S')
    1              0.000006 	let isEmpty = a:0 ? getline('.') =~ '^\s*$' : empty(getline('.'))
    1   0.000044   0.000013 	if index(s:g('left_delims'), nchar) > -1 && index(s:g('left_delims'), nchar)    == index(s:g('right_delims'), schar) && isEmpty
                            		return 1
                            	elseif index(s:g('quotes_list'), nchar) > -1 && index(s:g('quotes_list'), nchar)    == index(s:g('quotes_list'), schar) && isEmpty
                            		return 1
                            	else
    1              0.000001 		return 0
                            	endif

FUNCTION  syntastic#log#debug()
Called 39 times
Total time:   0.000307
 Self time:   0.000199

count  total (s)   self (s)
   39   0.000256   0.000148     if !s:isDebugEnabled(a:level)
   39              0.000026         return
                                endif
                            
                                let leader = s:logTimestamp()
                                call s:logRedirect(1)
                            
                                if a:0 > 0
                                    " filter out dictionary functions
                                    echomsg leader . a:msg . ' ' . strtrans(string(type(a:1) == type({}) || type(a:1) == type([]) ? filter(copy(a:1), 'type(v:val) != type(function("tr"))') : a:1))
                                else
                                    echomsg leader . a:msg
                                endif
                            
                                call s:logRedirect(0)

FUNCTION  <SNR>5_rtp_rm_a()
Called 7 times
Total time:   0.004283
 Self time:   0.004283

count  total (s)   self (s)
    7              0.000253   let paths = map(copy(g:bundles), 'v:val.rtpath')
    7              0.000089   let prepends = join(paths, ',')
    7              0.000071   let appends = join(paths, '/after,').'/after'
    7              0.001662   exec 'set rtp-='.fnameescape(prepends)
    7              0.002199   exec 'set rtp-='.fnameescape(appends)

FUNCTION  SyntaxCheckers_vim_vimlint_IsAvailable()
Called 1 time
Total time:   0.001130
 Self time:   0.001130

count  total (s)   self (s)
    1              0.001128     return globpath(&runtimepath, 'autoload/vimlparser.vim') != '' && globpath(&runtimepath, 'autoload/vimlint.vim') != ''

FUNCTION  <SNR>5_parse_name()
Called 273 times
Total time:   0.016370
 Self time:   0.016370

count  total (s)   self (s)
  273              0.000462   let arg = a:arg
  273              0.001049   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'
                            
  273              0.003572   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'
  252              0.001832     let uri = git_proto.'://github.com/'.split(arg, ':')[-1]
  252              0.001030     if uri !~? '\.git$'
  252              0.000570       let uri .= '.git'
  252              0.000168     endif
  252              0.003044     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')
  252              0.000433   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'
                                let uri = arg
                                let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1]
                              else
   21              0.000028     let name = arg
   21              0.000084     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'
   21              0.000013   endif
  273              0.000969   return {'name': name, 'uri': uri, 'name_spec': arg }

FUNCTION  <SNR>122_UpdateCursorMoved()
Called 66 times
Total time:   0.001893
 Self time:   0.001893

count  total (s)   self (s)
   66              0.000386   let current_position = getpos('.')
   66              0.000330   let s:cursor_moved = current_position != s:old_cursor_position
                            
   66              0.000600   let s:moved_vertically_in_insert_mode = s:old_cursor_position != [] && current_position[ 1 ] != s:old_cursor_position[ 1 ]
                            
   66              0.000351   let s:old_cursor_position = current_position

FUNCTION  GetVimIndentIntern()
Called 1 time
Total time:   0.000218
 Self time:   0.000218

count  total (s)   self (s)
                              " Find a non-blank line above the current line.
    1              0.000010   let lnum = prevnonblank(v:lnum - 1)
                            
                              " If the current line doesn't start with '\' and below a line that starts
                              " with '\', use the indent of the line above it.
    1              0.000016   if getline(v:lnum) !~ '^\s*\\'
    2              0.000017     while lnum > 0 && getline(lnum) =~ '^\s*\\'
    1              0.000003       let lnum = lnum - 1
    1              0.000001     endwhile
    1              0.000001   endif
                            
                              " At the start of the file use zero indent.
    1              0.000002   if lnum == 0
                                return 0
                              endif
                            
                              " Add a 'shiftwidth' after :if, :while, :try, :catch, :finally, :function
                              " and :else.  Add it three times for a line that starts with '\' after
                              " a line that doesn't (or g:vim_indent_cont if it exists).
    1              0.000004   let ind = indent(lnum)
    1              0.000009   if getline(v:lnum) =~ '^\s*\\' && v:lnum > 1 && getline(lnum) !~ '^\s*\\'
                                if exists("g:vim_indent_cont")
                                  let ind = ind + g:vim_indent_cont
                                else
                                  let ind = ind + &sw * 3
                                endif
                              elseif getline(lnum) =~ '^\s*aug\%[roup]' && getline(lnum) !~ '^\s*aug\%[roup]\s*!\=\s\+END'
                                let ind = ind + &sw
                              else
    1              0.000003     let line = getline(lnum)
    1              0.000033     let i = match(line, '\(^\||\)\s*\(if\|wh\%[ile]\|for\|try\|cat\%[ch]\|fina\%[lly]\|fu\%[nction]\|el\%[seif]\)\>')
    1              0.000001     if i >= 0
                                  let ind += &sw
                                  if strpart(line, i, 1) == '|' && has('syntax_items') && synIDattr(synID(lnum, i, 1), "name") =~ '\(Comment\|String\)$'
                                    let ind -= &sw
                                  endif
                                endif
    1              0.000001   endif
                            
                              " If the previous line contains an "end" after a pipe, but not in an ":au"
                              " command.  And not when there is a backslash before the pipe.
                              " And when syntax HL is enabled avoid a match inside a string.
    1              0.000003   let line = getline(lnum)
    1              0.000018   let i = match(line, '[^\\]|\s*\(ene\@!\)')
    1              0.000002   if i > 0 && line !~ '^\s*au\%[tocmd]'
                                if !has('syntax_items') || synIDattr(synID(lnum, i + 2, 1), "name") !~ '\(Comment\|String\)$'
                                  let ind = ind - &sw
                                endif
                              endif
                            
                            
                              " Subtract a 'shiftwidth' on a :endif, :endwhile, :catch, :finally, :endtry,
                              " :endfun, :else and :augroup END.
    1              0.000016   if getline(v:lnum) =~ '^\s*\(ene\@!\|cat\|fina\|el\|aug\%[roup]\s*!\=\s\+END\)'
                                let ind = ind - &sw
                              endif
                            
    1              0.000002   return ind

FUNCTION  airline#parts#filetype()
Called 383 times
Total time:   0.000820
 Self time:   0.000820

count  total (s)   self (s)
  383              0.000618   return &filetype

FUNCTION  airline#parts#iminsert()
Called 383 times
Total time:   0.002533
 Self time:   0.002533

count  total (s)   self (s)
  383              0.000966   if g:airline_detect_iminsert && &iminsert && exists('b:keymap_name')
                                return toupper(b:keymap_name)
                              endif
  383              0.000278   return ''

FUNCTION  <SNR>112_check_mixed_indent()
Called 12 times
Total time:   0.005004
 Self time:   0.005004

count  total (s)   self (s)
   12              0.000023   if s:indent_algo == 1
                                " [<tab>]<space><tab>
                                " spaces before or between tabs are not allowed
                                let t_s_t = '(^\t* +\t\s*\S)'
                                " <tab>(<space> x count)
                                " count of spaces at the end of tabs should be less then tabstop value
                                let t_l_s = '(^\t+ {' . &ts . ',}' . '\S)'
                                return search('\v' . t_s_t . '|' . t_l_s, 'nw')
                              else
   12              0.004858     return search('\v(^\t+ +)|(^ +\t+)', 'nw')
                              endif

FUNCTION  <SNR>76_resolveFiletypes()
Called 3 times
Total time:   0.000030
 Self time:   0.000030

count  total (s)   self (s)
    3              0.000009     let type = a:0 ? a:1 : &filetype
    3              0.000021     return split( get(g:syntastic_filetype_map, type, type), '\m\.' )

FUNCTION  <SNR>122_OnCursorMovedNormalMode()
Called 233 times
Total time:   0.050420
 Self time:   0.018421

count  total (s)   self (s)
  233   0.009000   0.001484   if !s:AllowedToCompleteInCurrentFile()
                                return
                              endif
                            
  233   0.025746   0.001263   call s:OnFileReadyToParse()
  233              0.014744   py ycm_state.OnCursorMoved()

FUNCTION  <SNR>122_SetUpYcmChangedTick()
Called 245 times
Total time:   0.002474
 Self time:   0.002474

count  total (s)   self (s)
  245              0.002232   let b:ycm_changedtick  = get( b:, 'ycm_changedtick', {   'file_ready_to_parse' : -1, } )

FUNCTION  304()
Called 1 time
Total time:   0.000050
 Self time:   0.000046

count  total (s)   self (s)
    1   0.000012   0.000010     let ft = a:checker.getFiletype()
    1              0.000005     if !has_key(self._checkerMap, ft)
    1              0.000004         let self._checkerMap[ft] = {}
    1              0.000001     endif
                            
    1   0.000010   0.000008     let name = a:checker.getName()
    1              0.000004     if has_key(self._checkerMap[ft], name)
                                    throw 'Syntastic: Duplicate syntax checker name: ' . ft . '/' . name
                                endif
                            
    1              0.000005     let self._checkerMap[ft][name] = a:checker

FUNCTION  305()
Called 3 times
Total time:   0.000039
 Self time:   0.000039

count  total (s)   self (s)
    3              0.000035     return filter( map(copy(a:list), 'get(a:checkers_map, v:val, {})'), '!empty(v:val)' )

FUNCTION  306()
Called 3 times
Total time:   0.009583
 Self time:   0.008894

count  total (s)   self (s)
    3              0.000010     if has_key(self._checkerMap, a:filetype)
    2              0.000000         return
                                endif
                            
    1   0.009556   0.008867     execute "runtime! syntax_checkers/" . a:filetype . "/*.vim"
                            
    1              0.000006     if !has_key(self._checkerMap, a:filetype)
                                    let self._checkerMap[a:filetype] = {}
                                endif

FUNCTION  309()
Called 6 times
Total time:   0.000100
 Self time:   0.000043

count  total (s)   self (s)
    6   0.000097   0.000040     return has('signs') && syntastic#util#var('enable_signs')

FUNCTION  ctrlp#utils#readfile()
Called 1 time
Total time:   0.000058
 Self time:   0.000058

count  total (s)   self (s)
    1              0.000012 	if filereadable(a:file)
    1              0.000037 		let data = readfile(a:file)
    1              0.000003 		if empty(data) || type(data) != 3
                            			unl data
                            			let data = []
                            		en
    1              0.000001 		retu data
                            	en
                            	retu []

FUNCTION  syntastic#util#stamp()
Called 6 times
Total time:   0.000022
 Self time:   0.000022

count  total (s)   self (s)
    6              0.000019     return reltime(g:syntastic_start)

FUNCTION  310()
Called 3 times
Total time:   0.000382
 Self time:   0.000076

count  total (s)   self (s)
    3   0.000047   0.000017     call syntastic#log#debug(g:SyntasticDebugNotifications, 'signs: refresh')
    3   0.000043   0.000019     let old_signs = copy(self._bufSignIds())
    3   0.000056   0.000008     if self.enabled()
    3   0.000178   0.000015         call self._signErrors(a:loclist)
    3              0.000002     endif
    3   0.000049   0.000008     call self._removeSigns(old_signs)

FUNCTION  313()
Called 3 times
Total time:   0.000041
 Self time:   0.000041

count  total (s)   self (s)
    3              0.000008     if has('signs')
    3              0.000009         for s in reverse(copy(a:ids))
                                        execute "sign unplace " . s
                                        call remove(self._bufSignIds(), index(self._bufSignIds(), s))
                                    endfor
    3              0.000001     endif

FUNCTION  314()
Called 3 times
Total time:   0.000024
 Self time:   0.000024

count  total (s)   self (s)
    3              0.000009     if !exists("b:syntastic_sign_ids")
    1              0.000003         let b:syntastic_sign_ids = []
    1              0.000001     endif
    3              0.000004     return b:syntastic_sign_ids

FUNCTION  delimitMate#IsEmptyPair()
Called 1 time
Total time:   0.000015
 Self time:   0.000015

count  total (s)   self (s)
    1              0.000012 	if strlen(substitute(a:str, ".", "x", "g")) != 2
    1              0.000002 		return 0
                            	endif
                            	let idx = index(s:g('left_delims'), matchstr(a:str, '^.'))
                            	if idx > -1 && s:g('right_delims')[idx] == matchstr(a:str, '.$')
                            		return 1
                            	endif
                            	let idx = index(s:g('quotes_list'), matchstr(a:str, '^.'))
                            	if idx > -1 && s:g('quotes_list')[idx] == matchstr(a:str, '.$')
                            		return 1
                            	endif
                            	return 0

FUNCTION  <SNR>122_AllowedToCompleteInCurrentFile()
Called 313 times
Total time:   0.010692
 Self time:   0.010692

count  total (s)   self (s)
  313              0.004010   if empty( &filetype ) || getbufvar( winbufnr( winnr() ), "&buftype" ) ==# 'nofile' || &filetype ==# 'qf'
                                return 0
                              endif
                            
  313              0.002601   let whitelist_allows = has_key( g:ycm_filetype_whitelist, '*' ) || has_key( g:ycm_filetype_whitelist, &filetype )
  313              0.001394   let blacklist_allows = !has_key( g:ycm_filetype_blacklist, &filetype )
                            
  313              0.000793   return whitelist_allows && blacklist_allows

FUNCTION  307()
Called 3 times
Total time:   0.000041
 Self time:   0.000041

count  total (s)   self (s)
    3              0.000019     if exists('g:syntastic_' . a:filetype . '_checker') && !exists('g:syntastic_' . a:filetype . '_checkers')
                                    let g:syntastic_{a:filetype}_checkers = [g:syntastic_{a:filetype}_checker]
                                    call syntastic#log#oneTimeWarn('variable g:syntastic_' . a:filetype . '_checker is deprecated')
                                endif

FUNCTION  ctrlp#mrufiles#cachefile()
Called 1 time
Total time:   0.000011
 Self time:   0.000011

count  total (s)   self (s)
    1              0.000005 	if !exists('s:cadir') || !exists('s:cafile')
                            		let s:cadir = ctrlp#utils#cachedir().ctrlp#utils#lash().'mru'
                            		let s:cafile = s:cadir.ctrlp#utils#lash().'cache.txt'
                            	en
    1              0.000002 	retu s:cafile

FUNCTION  <SNR>122_InvokeCompletion()
Called 45 times
Total time:   0.028106
 Self time:   0.002763

count  total (s)   self (s)
   45              0.000242   if &completefunc != "youcompleteme#Complete"
                                return
                              endif
                            
   45   0.026433   0.001090   if s:InsideCommentOrStringAndShouldStop() || s:OnBlankLine()
                                return
                              endif
                            
                              " This is tricky. First, having 'refresh' set to 'always' in the dictionary
                              " that our completion function returns makes sure that our completion function
                              " is called on every keystroke. Second, when the sequence of characters the
                              " user typed produces no results in our search an infinite loop can occur. The
                              " problem is that our feedkeys call triggers the OnCursorMovedI event which we
                              " are tied to. We prevent this infinite loop from starting by making sure that
                              " the user has moved the cursor since the last time we provided completion
                              " results.
   45              0.000112   if !s:cursor_moved
                                return
                              endif
                            
                              " <c-x><c-u> invokes the user's completion function (which we have set to
                              " youcompleteme#Complete), and <c-p> tells Vim to select the previous
                              " completion candidate. This is necessary because by default, Vim selects the
                              " first candidate when completion is invoked, and selecting a candidate
                              " automatically replaces the current text with it. Calling <c-p> forces Vim to
                              " deselect the first candidate and in turn preserve the user's current text
                              " until he explicitly chooses to replace it with a completion.
   45              0.000445   call feedkeys( "\<C-X>\<C-U>\<C-P>", 'n' )

FUNCTION  vundle#config#bundle()
Called 273 times
Total time:   0.047158
 Self time:   0.006791

count  total (s)   self (s)
  273   0.038398   0.001382   let bundle = vundle#config#init_bundle(a:arg, a:000)
  273   0.004357   0.001006   if !s:check_bundle_name(bundle)
                                return
                              endif
  273              0.000803   if exists('g:vundle_lazy_load') && g:vundle_lazy_load
  273              0.000669     call add(g:bundles, bundle)
  273              0.000171   else
                                call s:rtp_rm_a()
                                call add(g:bundles, bundle)
                                call s:rtp_add_a()
                                call s:rtp_add_defaults()
                              endif
  273              0.000264   return bundle

FUNCTION  <SNR>81_SetDefaultCompletionType()
Called 2 times
Total time:   0.000039
 Self time:   0.000039

count  total (s)   self (s)
    2              0.000022   if exists('b:SuperTabDefaultCompletionType') && (!exists('b:complCommandLine') || !b:complCommandLine)
                                call SuperTabSetCompletionType(b:SuperTabDefaultCompletionType)
                              endif

FUNCTION  delimitMate#GetSyntaxRegion()
Called 1 time
Total time:   0.000343
 Self time:   0.000343

count  total (s)   self (s)
    1              0.000342 	return synIDattr(synIDtrans(synID(a:line, a:col, 1)), 'name')

FUNCTION  UltiSnips#CursorMoved()
Called 299 times
Total time:   0.061590
 Self time:   0.061590

count  total (s)   self (s)
  299              0.060880     exec g:_uspy "UltiSnips_Manager._cursor_moved()"

FUNCTION  <SNR>5_rtp_add_a()
Called 7 times
Total time:   0.003857
 Self time:   0.003857

count  total (s)   self (s)
    7              0.000189   let paths = map(copy(g:bundles), 'v:val.rtpath')
    7              0.000076   let prepends = join(paths, ',')
    7              0.000068   let appends = join(paths, '/after,').'/after'
    7              0.001633   exec 'set rtp^='.fnameescape(prepends)
    7              0.001883   exec 'set rtp+='.fnameescape(appends)

FUNCTION  <SNR>5_parse_options()
Called 273 times
Total time:   0.001132
 Self time:   0.001132

count  total (s)   self (s)
                              " TODO: improve this
  273              0.000792   if len(a:opts) != 1 | return {} | endif
                            
    7              0.000031   if type(a:opts[0]) == type({})
    7              0.000012     return a:opts[0]
                              else
                                return {'rev': a:opts[0]}
                              endif

FUNCTION  <SNR>122_GetCompletions()
Called 45 times
Total time:   0.269526
 Self time:   0.269526

count  total (s)   self (s)
   45              0.266774   py results = GetCompletionsInner()
   45              0.002472   let results = pyeval( 'results' )
   45              0.000132   return results

FUNCTION  airline#util#wrap()
Called 2298 times
Total time:   0.012081
 Self time:   0.012081

count  total (s)   self (s)
 2298              0.005156   if a:minwidth > 0 && winwidth(0) < a:minwidth
                                return ''
                              endif
 2298              0.002341   return a:text

FUNCTION  <SNR>76_skipFile()
Called 6 times
Total time:   0.000351
 Self time:   0.000212

count  total (s)   self (s)
    6              0.000027     let force_skip = exists('b:syntastic_skip_checks') ? b:syntastic_skip_checks : 0
    6              0.000015     let fname = expand('%')
    6   0.000305   0.000166     return force_skip || (&buftype != '') || !filereadable(fname) || getwinvar(0, '&diff') || s:ignoreFile(fname) || fnamemodify(fname, ':e') =~? g:syntastic_ignore_extensions

FUNCTION  312()
Called 3 times
Total time:   0.000163
 Self time:   0.000155

count  total (s)   self (s)
    3              0.000007     let loclist = a:loclist
    3   0.000017   0.000009     if !loclist.isEmpty()
                            
                                    let buf = bufnr('')
                                    if !bufloaded(buf)
                                        " signs can be placed only in loaded buffers
                                        return
                                    endif
                            
                                    " errors come first, so that they are not masked by warnings
                                    let issues = copy(loclist.errors())
                                    call extend(issues, loclist.warnings())
                                    call filter(issues, 'v:val["bufnr"] == buf')
                                    let seen = {}
                            
                                    for i in issues
                                        if i['lnum'] > 0 && !has_key(seen, i['lnum'])
                                            let seen[i['lnum']] = 1
                            
                                            let sign_severity = i['type'] ==? 'W' ? 'Warning' : 'Error'
                                            let sign_subtype = get(i, 'subtype', '')
                                            let sign_type = 'Syntastic' . sign_subtype . sign_severity
                            
                                            execute "sign place " . s:next_sign_id . " line=" . i['lnum'] . " name=" . sign_type . " buffer=" . i['bufnr']
                                            call add(self._bufSignIds(), s:next_sign_id)
                                            let s:next_sign_id += 1
                                        endif
                                    endfor
                                endif

FUNCTION  <SNR>122_BufferTextChangedSinceLastMoveInInsertMode()
Called 66 times
Total time:   0.002403
 Self time:   0.002403

count  total (s)   self (s)
   66              0.000151   if s:moved_vertically_in_insert_mode
                                let s:previous_num_chars_on_current_line = -1
                                return 0
                              endif
                            
   66              0.000464   let num_chars_in_current_cursor_line = strlen( getline('.') )
                            
   66              0.000169   if s:previous_num_chars_on_current_line == -1
    1              0.000003     let s:previous_num_chars_on_current_line = num_chars_in_current_cursor_line
    1              0.000001     return 0
                              endif
                            
   65              0.000327   let changed_text_on_current_line = num_chars_in_current_cursor_line != s:previous_num_chars_on_current_line
   65              0.000234   let s:previous_num_chars_on_current_line = num_chars_in_current_cursor_line
                            
   65              0.000160   return changed_text_on_current_line

FUNCTION  airline#extensions#whitespace#check()
Called 383 times
Total time:   0.022415
 Self time:   0.017411

count  total (s)   self (s)
  383              0.001949   if &readonly || !&modifiable || !s:enabled || line('$') > s:max_lines
                                return ''
                              endif
                            
  383              0.001402   if !exists('b:airline_whitespace_check')
   12              0.000035     let b:airline_whitespace_check = ''
   12              0.000061     let checks = get(g:, 'airline#extensions#whitespace#checks', s:default_checks)
                            
   12              0.000020     let trailing = 0
   12              0.000046     if index(checks, 'trailing') > -1
   12              0.000242       let trailing = search('\s$', 'nw')
   12              0.000011     endif
                            
   12              0.000018     let mixed = 0
   12              0.000031     if index(checks, 'indent') > -1
   12   0.005089   0.000085       let mixed = s:check_mixed_indent()
   12              0.000012     endif
                            
   12              0.000025     if trailing != 0 || mixed != 0
   12              0.000037       let b:airline_whitespace_check = s:symbol
   12              0.000019       if s:show_message
   12              0.000016         if trailing != 0
   12              0.000121           let b:airline_whitespace_check .= (g:airline_symbols.space).printf(s:trailing_format, trailing)
   12              0.000010         endif
   12              0.000015         if mixed != 0
                                      let b:airline_whitespace_check .= (g:airline_symbols.space).printf(s:mixed_indent_format, mixed)
                                    endif
   12              0.000008       endif
   12              0.000009     endif
   12              0.000006   endif
  383              0.000678   return b:airline_whitespace_check

FUNCTION  <SNR>51_chop()
Called 1 time
Total time:   0.000007
 Self time:   0.000007

count  total (s)   self (s)
    1              0.000006 	if len(a:mrufs) > {s:max} | cal remove(a:mrufs, {s:max}, -1) | en
    1              0.000001 	retu a:mrufs

FUNCTION  delimitMate#IsSpaceExpansion()
Called 1 time
Total time:   0.000233
 Self time:   0.000066

count  total (s)   self (s)
    1              0.000003 	if col('.') > 2
    1   0.000045   0.000007 		let pchar = delimitMate#GetCharFromCursor(-2)
    1   0.000029   0.000006 		let nchar = delimitMate#GetCharFromCursor(1)
    1   0.000068   0.000013 		let isSpaces = (delimitMate#GetCharFromCursor(-1)   == delimitMate#GetCharFromCursor(0) && delimitMate#GetCharFromCursor(-1) == " ")
                            
    1   0.000042   0.000014 		if index(s:g('left_delims'), pchar) > -1 && index(s:g('left_delims'), pchar)   == index(s:g('right_delims'), nchar) && isSpaces
                            			return 1
                            		elseif index(s:g('quotes_list'), pchar) > -1 && index(s:g('quotes_list'), pchar)   == index(s:g('quotes_list'), nchar) && isSpaces
                            			return 1
                            		endif
    1              0.000001 	endif
    1              0.000001 	return 0

FUNCTION  285()
Called 3 times
Total time:   0.000050
 Self time:   0.000050

count  total (s)   self (s)
    3              0.000007     if exists('g:syntastic_mode_map')
                                    let self._mode = get(g:syntastic_mode_map, 'mode', 'active')
                                    let self._activeFiletypes = get(g:syntastic_mode_map, 'active_filetypes', [])
                                    let self._passiveFiletypes = get(g:syntastic_mode_map, 'passive_filetypes', [])
                                else
    3              0.000006         let self._mode = 'active'
    3              0.000003         let self._activeFiletypes = []
    3              0.000004         let self._passiveFiletypes = []
    3              0.000003     endif

FUNCTION  syntastic#util#compareLexi()
Called 3 times
Total time:   0.000067
 Self time:   0.000067

count  total (s)   self (s)
    3              0.000028     for idx in range(max([len(a:a), len(a:b)]))
    3              0.000011         let a_element = get(a:a, idx, 0)
    3              0.000008         let b_element = get(a:b, idx, 0)
    3              0.000004         if a_element != b_element
    3              0.000006             return a_element > b_element ? 1 : -1
                                    endif
                                endfor
                                " Everything matched, so it is at least the required version.
                                return 0

FUNCTION  ctrlp#utils#mkdir()
Called 1 time
Total time:   0.000012
 Self time:   0.000012

count  total (s)   self (s)
    1              0.000007 	if exists('*mkdir') && !isdirectory(a:dir)
                            		sil! cal mkdir(a:dir, 'p')
                            	en
    1              0.000001 	retu a:dir

FUNCTION  syntastic#log#debugShowVariables()
Called 6 times
Total time:   0.000041
 Self time:   0.000027

count  total (s)   self (s)
    6   0.000031   0.000017     if !s:isDebugEnabled(a:level)
    6              0.000004         return
                                endif
                            
                                let leader = s:logTimestamp()
                                call s:logRedirect(1)
                            
                                let vlist = type(a:names) == type("") ? [a:names] : a:names
                                for name in vlist
                                    let msg = s:formatVariable(name)
                                    if msg != ''
                                        echomsg leader . msg
                                    endif
                                endfor
                            
                                call s:logRedirect(0)

FUNCTION  youcompleteme#Complete()
Called 90 times
Total time:   0.290415
 Self time:   0.020889

count  total (s)   self (s)
                              " After the user types one character after the call to the omnifunc, the
                              " completefunc will be called because of our mapping that calls the
                              " completefunc on every keystroke. Therefore we need to delegate the call we
                              " 'stole' back to the omnifunc
   90              0.000291   if s:omnifunc_mode
                                return youcompleteme#OmniComplete( a:findstart, a:base )
                              endif
                            
   90              0.000149   if a:findstart
                                " InvokeCompletion has this check but we also need it here because of random
                                " Vim bugs and unfortunate interactions with the autocommands of other
                                " plugins
   45              0.000082     if !s:cursor_moved
                                  " for vim, -2 means not found but don't trigger an error message
                                  " see :h complete-functions
                                  return -2
                                endif
                            
   45              0.003133     if !pyeval( 'ycm_state.IsServerAlive()' )
                                  return -2
                                endif
   45              0.011470     py ycm_state.CreateCompletionRequest()
   45              0.003236     return pyeval( 'base.CompletionStartColumn()' )
                              else
   45   0.269972   0.000446     return s:GetCompletions()
                              endif

FUNCTION  delimitMate#WithinEmptyPair()
Called 1 time
Total time:   0.000124
 Self time:   0.000034

count  total (s)   self (s)
                            	" get char before the cursor.
    1   0.000062   0.000013 	let char1 = delimitMate#GetCharFromCursor(-1)
                            	" get char under the cursor.
    1   0.000032   0.000006 	let char2 = delimitMate#GetCharFromCursor(0)
    1   0.000025   0.000010 	return delimitMate#IsEmptyPair( char1.char2 )

FUNCTION  <SNR>88_Highlight_Matching_Pair()
Called 369 times
Total time:   0.033987
 Self time:   0.033987

count  total (s)   self (s)
                              " Remove any previous match.
  369              0.002226   if exists('w:paren_hl_on') && w:paren_hl_on
                                silent! call matchdelete(3)
                                let w:paren_hl_on = 0
                              endif
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
  369              0.002098   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
                              endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
  369              0.001667   let c_lnum = line('.')
  369              0.001348   let c_col = col('.')
  369              0.000573   let before = 0
                            
  369              0.002356   let c = getline(c_lnum)[c_col - 1]
  369              0.008303   let plist = split(&matchpairs, '.\zs[:,]')
  369              0.001870   let i = index(plist, c)
  369              0.000581   if i < 0
                                " not found, in Insert mode try character before the cursor
  369              0.001604     if c_col > 1 && (mode() == 'i' || mode() == 'R')
  129              0.000219       let before = 1
  129              0.000702       let c = getline(c_lnum)[c_col - 2]
  129              0.000423       let i = index(plist, c)
  129              0.000110     endif
  369              0.000465     if i < 0
                                  " not found, nothing to do
  369              0.000469       return
                                endif
                              endif
                            
                              " Figure out the arguments for searchpairpos().
                              if i % 2 == 0
                                let s_flags = 'nW'
                                let c2 = plist[i + 1]
                              else
                                let s_flags = 'nbW'
                                let c2 = c
                                let c = plist[i - 1]
                              endif
                              if c == '['
                                let c = '\['
                                let c2 = '\]'
                              endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
                              if before > 0
                                let save_cursor = winsaveview()
                                call cursor(c_lnum, c_col - before)
                              endif
                            
                              " When not in a string or comment ignore matches inside them.
                              " We match "escape" for special items, such as lispEscapeSpecial.
                              let s_skip ='synIDattr(synID(line("."), col("."), 0), "name") ' . '=~?  "string\\|character\\|singlequote\\|escape\\|comment"'
                              execute 'if' s_skip '| let s_skip = 0 | endif'
                            
                              " Limit the search to lines visible in the window.
                              let stoplinebottom = line('w$')
                              let stoplinetop = line('w0')
                              if i % 2 == 0
                                let stopline = stoplinebottom
                              else
                                let stopline = stoplinetop
                              endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
                              if mode() == 'i' || mode() == 'R'
                                let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
                              else
                                let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
                              endif
                              try
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
                              endtry
                            
                              if before > 0
                                call winrestview(save_cursor)
                              endif
                            
                              " If a match is found setup match highlighting.
                              if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
                                if exists('*matchaddpos')
                                  call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
                                else
                                  exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
                                endif
                                let w:paren_hl_on = 1
                              endif

FUNCTION  airline#highlighter#highlight()
Called 10 times
Total time:   0.061015
 Self time:   0.020520

count  total (s)   self (s)
   10              0.000053   let p = g:airline#themes#{g:airline_theme}#palette
                            
                              " draw the base mode, followed by any overrides
   10              0.000150   let mapped = map(a:modes, 'v:val == a:modes[0] ? v:val : a:modes[0]."_".v:val')
   10              0.000062   let suffix = a:modes[0] == 'inactive' ? '_inactive' : ''
   26              0.000057   for mode in mapped
   16              0.000163     if exists('g:airline#themes#{g:airline_theme}#palette[mode]')
   16              0.000077       let dict = g:airline#themes#{g:airline_theme}#palette[mode]
  176              0.000433       for kvp in items(dict)
  160              0.000350         let mode_colors = kvp[1]
  160   0.006914   0.000991         call airline#highlighter#exec(kvp[0].suffix, mode_colors)
                            
  480              0.000981         for accent in keys(s:accents)
  320              0.000738           if !has_key(p.accents, accent)
                                        continue
                                      endif
  320              0.001295           let colors = copy(mode_colors)
  320              0.000744           if p.accents[accent][0] != ''
                                        let colors[0] = p.accents[accent][0]
                                      endif
  320              0.000684           if p.accents[accent][2] != ''
  160              0.000500             let colors[2] = p.accents[accent][2]
  160              0.000100           endif
  320              0.000506           if len(colors) >= 5
  132              0.000473             let colors[4] = get(p.accents[accent], 4, '')
  132              0.000077           else
  188              0.000783             call add(colors, get(p.accents[accent], 4, ''))
  188              0.000114           endif
  320   0.013186   0.002044           call airline#highlighter#exec(kvp[0].suffix.'_'.accent, colors)
  320              0.000292         endfor
  160              0.000101       endfor
                            
                                  " TODO: optimize this
  112              0.000239       for sep in items(s:separators)
   96   0.024531   0.001101         call <sid>exec_separator(dict, sep[1][0], sep[1][1], sep[1][2], suffix)
   96              0.000087       endfor
   16              0.000009     endif
   16              0.000028   endfor

FUNCTION  GetVimIndent()
Called 1 time
Total time:   0.000268
 Self time:   0.000050

count  total (s)   self (s)
    1              0.000012   let ignorecase_save = &ignorecase
    1              0.000002   try
    1              0.000009     let &ignorecase = 0
    1   0.000232   0.000014     return GetVimIndentIntern()
                              finally
    1              0.000004     let &ignorecase = ignorecase_save
    1              0.000002   endtry

FUNCTION  vundle#config#init_bundle()
Called 273 times
Total time:   0.037016
 Self time:   0.012116

count  total (s)   self (s)
  273              0.003424   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')
                                echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"
                              endif
  273   0.022233   0.004731   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')
  273              0.001447   let b = extend(opts, copy(s:bundle))
  273   0.008657   0.001259   let b.rtpath = s:rtpath(opts)
  273              0.000284   return b

FUNCTION  vundle#rc()
Called 7 times
Total time:   0.005488
 Self time:   0.000190

count  total (s)   self (s)
    7              0.000106   let g:bundle_dir = len(a:000) > 0 ? expand(a:1, 1) : expand('$HOME/.vim/bundle', 1)
    7              0.000016   let g:updated_bundles = []
    7              0.000009   let g:vundle_log = []
    7              0.000018   let g:vundle_changelog = ['Updated Plugins:']
    7   0.005330   0.000032   call vundle#config#init()

FUNCTION  airline#parts#paste()
Called 383 times
Total time:   0.001287
 Self time:   0.001287

count  total (s)   self (s)
  383              0.001071   return g:airline_detect_paste && &paste ? g:airline_symbols.paste : ''

FUNCTION  <SNR>106_sync_active_winnr()
Called 233 times
Total time:   0.002895
 Self time:   0.002895

count  total (s)   self (s)
  233              0.001828   if exists('#airline') && winnr() != s:active_winnr
                                call airline#update_statusline()
                              endif

FUNCTION  <SNR>122_OnBlankLine()
Called 45 times
Total time:   0.005425
 Self time:   0.005425

count  total (s)   self (s)
   45              0.005367   return pyeval( 'not vim.current.line or vim.current.line.isspace()' )

FUNCTION  <SNR>76_ignoreFile()
Called 6 times
Total time:   0.000139
 Self time:   0.000139

count  total (s)   self (s)
    6              0.000084     let fname = fnamemodify(a:filename, ':p')
    6              0.000015     for pattern in g:syntastic_ignore_files
                                    if fname =~# pattern
                                        return 1
                                    endif
                                endfor
    6              0.000002     return 0

FUNCTION  <SNR>51_mergelists()
Called 1 time
Total time:   0.000236
 Self time:   0.000160

count  total (s)   self (s)
    1   0.000084   0.000015 	let diskmrufs = ctrlp#utils#readfile(ctrlp#mrufiles#cachefile())
    1              0.000121 	cal filter(diskmrufs, 'index(s:mrufs, v:val) < 0')
    1              0.000017 	let mrufs = s:mrufs + diskmrufs
    1   0.000014   0.000007 	retu s:chop(mrufs)

FUNCTION  <SNR>122_OnCursorMovedInsertMode()
Called 66 times
Total time:   0.053739
 Self time:   0.007697

count  total (s)   self (s)
   66   0.003057   0.000545   if !s:AllowedToCompleteInCurrentFile()
                                return
                              endif
                            
   66              0.003390   py ycm_state.OnCursorMoved()
   66   0.002508   0.000615   call s:UpdateCursorMoved()
                            
                              " Basically, we need to only trigger the completion menu when the user has
                              " inserted or deleted a character, NOT just when the user moves in insert mode
                              " (with, say, the arrow keys). If we trigger the menu even on pure moves, then
                              " it's impossible to move in insert mode since the up/down arrows start moving
                              " the selected completion in the completion menu. Yeah, people shouldn't be
                              " moving in insert mode at all (that's what normal mode is for) but explain
                              " that to the users who complain...
   66   0.002882   0.000479   if !s:BufferTextChangedSinceLastMoveInInsertMode()
   21              0.000015     return
                              endif
                            
   45   0.011494   0.000366   call s:IdentifierFinishedOperations()
   45              0.000162   if g:ycm_autoclose_preview_window_after_completion
                                call s:ClosePreviewWindowIfNeeded()
                              endif
                            
   45              0.000127   if g:ycm_auto_trigger || s:omnifunc_mode
   45   0.028418   0.000312     call s:InvokeCompletion()
   45              0.000045   endif
                            
                              " We have to make sure we correctly leave omnifunc mode even when the user
                              " inserts something like a "operator[]" candidate string which fails
                              " CurrentIdentifierFinished check.
   45              0.000142   if s:omnifunc_mode && !pyeval( 'base.LastEnteredCharIsIdentifierChar()')
                                let s:omnifunc_mode = 0
                              endif

FUNCTION  airline#parts#readonly()
Called 383 times
Total time:   0.001031
 Self time:   0.001031

count  total (s)   self (s)
  383              0.000801   return &readonly ? g:airline_symbols.readonly : ''

FUNCTION  <SNR>24_SynSet()
Called 1 time
Total time:   0.014937
 Self time:   0.001359

count  total (s)   self (s)
                              " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
    1              0.000003   syn clear
    1              0.000002   if exists("b:current_syntax")
                                unlet b:current_syntax
                              endif
                            
    1              0.000003   let s = expand("<amatch>")
    1              0.000002   if s == "ON"
                                " :set syntax=ON
                                if &filetype == ""
                                  echohl ErrorMsg
                                  echo "filetype unknown"
                                  echohl None
                                endif
                                let s = &filetype
                              elseif s == "OFF"
                                let s = ""
                              endif
                            
    1              0.000001   if s != ""
                                " Load the syntax file(s).  When there are several, separated by dots,
                                " load each in sequence.
    2              0.000007     for name in split(s, '\.')
    1   0.014901   0.001323       exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
    1              0.000002     endfor
    1              0.000001   endif

FUNCTION  airline#highlighter#exec()
Called 586 times
Total time:   0.020731
 Self time:   0.020731

count  total (s)   self (s)
  586              0.000958   let colors = a:colors
  586              0.000623   if s:is_win32term
                                let colors[2] = s:gui2cui(get(colors, 0, ''), get(colors, 2, ''))
                                let colors[3] = s:gui2cui(get(colors, 1, ''), get(colors, 3, ''))
                              endif
  586              0.014607   exec printf('hi %s %s %s %s %s %s %s %s', a:group, get(colors, 0, '') != '' ? 'guifg='.colors[0] : '', get(colors, 1, '') != '' ? 'guibg='.colors[1] : '', get(colors, 2, '') != '' ? 'ctermfg='.colors[2] : '', get(colors, 3, '') != '' ? 'ctermbg='.colors[3] : '', get(colors, 4, '') != '' ? 'gui='.colors[4] : '', get(colors, 4, '') != '' ? 'cterm='.colors[4] : '', get(colors, 4, '') != '' ? 'term='.colors[4] : '')

FUNCTION  <SNR>122_IdentifierFinishedOperations()
Called 45 times
Total time:   0.011128
 Self time:   0.011128

count  total (s)   self (s)
   45              0.002380   if !pyeval( 'base.CurrentIdentifierFinished()' )
   39              0.000062     return
                              endif
    6              0.008520   py ycm_state.OnCurrentIdentifierFinished()
    6              0.000081   let s:omnifunc_mode = 0

FUNCTION  <SNR>122_OnInsertEnter()
Called 2 times
Total time:   0.000131
 Self time:   0.000040

count  total (s)   self (s)
    2   0.000114   0.000023   if !s:AllowedToCompleteInCurrentFile()
                                return
                              endif
                            
    2              0.000009   let s:old_cursor_position = []

FUNCTION  <SNR>5_check_bundle_name()
Called 273 times
Total time:   0.003351
 Self time:   0.003351

count  total (s)   self (s)
  273              0.000710   if has_key(g:bundle_names, a:bundle.name)
                                echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . g:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'
                                return 0
                              endif
  273              0.000855   let g:bundle_names[a:bundle.name] = a:bundle.name_spec
  273              0.000161   return 1

FUNCTION  <SNR>122_InsideCommentOrStringAndShouldStop()
Called 45 times
Total time:   0.019918
 Self time:   0.001095

count  total (s)   self (s)
   45   0.019214   0.000391   let retval = s:InsideCommentOrString()
   45              0.000138   let inside_comment = retval == 1
   45              0.000093   let inside_string = retval == 2
                            
   45              0.000179   if inside_comment && g:ycm_complete_in_comments || inside_string && g:ycm_complete_in_strings
                                return 0
                              endif
                            
   45              0.000062   return retval

FUNCTION  <SNR>51_savetofile()
Called 1 time
Total time:   0.000390
 Self time:   0.000009

count  total (s)   self (s)
    1   0.000389   0.000008 	cal ctrlp#utils#writecache(a:mrufs, s:cadir, s:cafile)

FUNCTION  <SNR>55_repo_head()
Called 9 times
Total time:   0.001978
 Self time:   0.000453

count  total (s)   self (s)
    9   0.001407   0.000117     let head = s:repo().head_ref()
                            
    9              0.000102     if head =~# '^ref: '
    9   0.000326   0.000091       let branch = s:sub(head,'^ref: %(refs/%(heads/|remotes/|tags/)=)=','')
    9              0.000019     elseif head =~# '^\x\{40\}$'
                                  " truncate hash to a:1 characters if we're in detached head mode
                                  let len = a:0 ? a:1 : 0
                                  let branch = len ? head[0:len-1] : ''
                                else
                                  return ''
                                endif
                            
    9              0.000014     return branch

FUNCTION  <SNR>114_get_array()
Called 192 times
Total time:   0.001899
 Self time:   0.001899

count  total (s)   self (s)
  192              0.000231   let fg = a:fg
  192              0.000223   let bg = a:bg
  192              0.001314   return has('gui_running') ? [ fg, bg, '', '', join(a:opts, ',') ] : [ '', '', fg, bg, join(a:opts, ',') ]

FUNCTION  <SNR>5_expand_path()
Called 280 times
Total time:   0.003867
 Self time:   0.003867

count  total (s)   self (s)
  280              0.003728   return simplify(expand(a:path, 1))

FUNCTION  vundle#config#init()
Called 7 times
Total time:   0.005298
 Self time:   0.001015

count  total (s)   self (s)
    7              0.000033   if !exists('g:bundles') | let g:bundles = [] | endif
    7   0.004411   0.000128   call s:rtp_rm_a()
    7              0.000706   let g:bundles = []
    7              0.000136   let g:bundle_names = {}

FUNCTION  <SNR>5_rtpath()
Called 273 times
Total time:   0.007398
 Self time:   0.002007

count  total (s)   self (s)
  273   0.007291   0.001900   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()

FUNCTION  <SNR>114_exec_separator()
Called 96 times
Total time:   0.023430
 Self time:   0.002999

count  total (s)   self (s)
   96   0.009366   0.000495   let l:from = airline#themes#get_highlight(a:from.a:suffix)
   96   0.008930   0.000479   let l:to = airline#themes#get_highlight(a:to.a:suffix)
   96              0.000323   let group = a:from.'_to_'.a:to.a:suffix
   96              0.000091   if a:inverse
   32              0.000138     let colors = [ l:from[1], l:to[1], l:from[3], l:to[3] ]
   32              0.000023   else
   64              0.000284     let colors = [ l:to[1], l:from[1], l:to[3], l:from[3] ]
   64              0.000037   endif
   96              0.000335   let a:dict[group] = colors
   96   0.003503   0.000394   call airline#highlighter#exec(group, colors)

FUNCTION  <SNR>114_get_syn()
Called 384 times
Total time:   0.008895
 Self time:   0.008895

count  total (s)   self (s)
                              " need to pass in mode, known to break on 7.3.547
  384              0.001367   let mode = has('gui_running') ? 'gui' : 'cterm'
  384              0.001897   let color = synIDattr(synIDtrans(hlID(a:group)), a:what, mode)
  384              0.000833   if empty(color) || color == -1
                                let color = synIDattr(synIDtrans(hlID('Normal')), a:what, mode)
                              endif
  384              0.000697   if empty(color) || color == -1
                                if has('gui_running')
                                  let color = a:what ==# 'fg' ? '#000000' : '#FFFFFF'
                                else
                                  let color = a:what ==# 'fg' ? 0 : 1
                                endif
                              endif
  384              0.000296   return color

FUNCTION  airline#extensions#branch#head()
Called 383 times
Total time:   0.008102
 Self time:   0.003807

count  total (s)   self (s)
  383              0.002117   if exists('b:airline_head') && !empty(b:airline_head)
  374              0.000520     return b:airline_head
                              endif
                            
    9              0.000024   let b:airline_head = ''
                            
    9              0.000042   if s:has_fugitive && !exists('b:mercurial_dir')
    9   0.002599   0.000062     let b:airline_head = fugitive#head()
                            
    9              0.000037     if empty(b:airline_head) && !exists('b:git_dir')
                                  let b:airline_head = s:get_git_branch(expand("%:p:h"))
                                endif
    9              0.000007   endif
                            
    9              0.000022   if empty(b:airline_head)
                                if s:has_lawrencium
                                  let b:airline_head = lawrencium#statusline()
                                endif
                              endif
                            
    9              0.000021   if empty(b:airline_head)
                                if s:has_vcscommand
                                  call VCSCommandEnableBufferSetup()
                                  if exists('b:VCSCommandBufferInfo')
                                    let b:airline_head = get(b:VCSCommandBufferInfo, 0, '')
                                  endif
                                endif
                              endif
                            
    9   0.001855   0.000097   if empty(b:airline_head) || !s:check_in_path()
                                let b:airline_head = ''
                              endif
                            
    9              0.000046   if exists("g:airline#extensions#branch#displayed_head_limit")
                                let w:displayed_head_limit = g:airline#extensions#branch#displayed_head_limit
                                if len(b:airline_head) > w:displayed_head_limit - 1
                                  let b:airline_head = b:airline_head[0:w:displayed_head_limit - 1].'…'
                                endif
                              endif
                            
    9              0.000015   return b:airline_head

FUNCTION  syntastic#log#debugDump()
Called 3 times
Total time:   0.000018
 Self time:   0.000012

count  total (s)   self (s)
    3   0.000014   0.000008     if !s:isDebugEnabled(a:level)
    3              0.000003         return
                                endif
                            
                                call syntastic#log#debugShowVariables( a:level, sort(keys(g:syntastic_defaults)) )

FUNCTION  228()
Called 3 times
Total time:   0.000155
 Self time:   0.000026

count  total (s)   self (s)
    3   0.000034   0.000013     call syntastic#log#debug(g:SyntasticDebugNotifications, 'autoloclist: refresh')
    3   0.000119   0.000011     call g:SyntasticAutoloclistNotifier.AutoToggle(a:loclist)

FUNCTION  229()
Called 3 times
Total time:   0.000108
 Self time:   0.000058

count  total (s)   self (s)
    3   0.000032   0.000013     call syntastic#log#debug(g:SyntasticDebugNotifications, 'autoloclist: toggle')
    3   0.000014   0.000007     if !a:loclist.isEmpty()
                                    if syntastic#util#var('auto_loc_list') == 1
                                        call a:loclist.show()
                                    endif
                                else
    3   0.000033   0.000009         if syntastic#util#var('auto_loc_list') > 0
                            
                                        "TODO: this will close the loc list window if one was opened by
                                        "something other than syntastic
    3              0.000003             lclose
    3              0.000001         endif
    3              0.000002     endif

FUNCTION  airline#parts#mode()
Called 383 times
Total time:   0.001517
 Self time:   0.001517

count  total (s)   self (s)
  383              0.001265   return get(w:, 'airline_current_mode', '')

FUNCTION  UltiSnips#LeavingInsertMode()
Called 2 times
Total time:   0.000238
 Self time:   0.000238

count  total (s)   self (s)
    2              0.000232     exec g:_uspy "UltiSnips_Manager._leaving_insert_mode()"

FUNCTION  vundle#end()
Called 7 times
Total time:   0.004480
 Self time:   0.000042

count  total (s)   self (s)
    7              0.000013   unlet g:vundle_lazy_load
    7   0.004463   0.000025   call vundle#config#activate_bundles()

FUNCTION  <SNR>122_OnCursorHold()
Called 10 times
Total time:   0.007819
 Self time:   0.000362

count  total (s)   self (s)
   10   0.000650   0.000165   if !s:AllowedToCompleteInCurrentFile()
                                return
                              endif
                            
   10   0.000413   0.000070   call s:SetUpCompleteopt()
   10   0.006698   0.000069   call s:OnFileReadyToParse()

FUNCTION  <SNR>122_UpdateDiagnosticNotifications()
Called 245 times
Total time:   0.005047
 Self time:   0.003665

count  total (s)   self (s)
  245   0.003741   0.002359   let should_display_diagnostics = g:ycm_show_diagnostics_ui && s:DiagnosticUiSupportedForCurrentFiletype() && pyeval( 'ycm_state.NativeFiletypeCompletionUsable()' )
                            
  245              0.000515   if !should_display_diagnostics
  245              0.000218     return
                              endif
                            
                              py ycm_state.UpdateDiagnosticInterface()

FUNCTION  231()
Called 3 times
Total time:   0.000014
 Self time:   0.000014

count  total (s)   self (s)
    3              0.000014     return has('balloon_eval') && syntastic#util#var('enable_balloons')

FUNCTION  delimitMate#IsForbidden()
Called 1 time
Total time:   0.000514
 Self time:   0.000066

count  total (s)   self (s)
    1   0.000068   0.000023 	if !s:g('excluded_regions_enabled')
                            		return 0
                            	endif
    1   0.000384   0.000014 	let region = delimitMate#GetCurrentSyntaxRegion()
                            	"if index(s:g('excluded_regions_list'), region) >= 0
                            	"	"echom "Forbidden 1!"
                            	"	return 1
                            	"endif
                            	"let region = delimitMate#GetCurrentSyntaxRegionIf(a:char)
                            	"echom "Forbidden 2!"
    1   0.000050   0.000017 	return index(s:g('excluded_regions_list'), region) >= 0

FUNCTION  233()
Called 3 times
Total time:   0.000031
 Self time:   0.000031

count  total (s)   self (s)
    3              0.000008     let b:syntastic_balloons = {}
    3              0.000010     if has('balloon_eval')
                                    call syntastic#log#debug(g:SyntasticDebugNotifications, 'balloons: reset')
                                    set nobeval
                                endif

FUNCTION  234()
Called 1 time
Total time:   0.000125
 Self time:   0.000125

count  total (s)   self (s)
    1              0.000022     let newObj = copy(self)
                            
    1              0.000006     let newObj._filetype = a:args['filetype']
    1              0.000004     let newObj._name = a:args['name']
    1              0.000014     let newObj._exec = get(a:args, 'exec', newObj._name)
    1              0.000003     let newObj._sort = 0
                            
    1              0.000004     if has_key(a:args, 'redirect')
                                    let [filetype, name] = split(a:args['redirect'], '/')
                                    let prefix = 'SyntaxCheckers_' . filetype . '_' . name . '_'
                                else
    1              0.000008         let prefix = 'SyntaxCheckers_' . newObj._filetype . '_' . newObj._name . '_'
    1              0.000001     endif
                            
    1              0.000009     let newObj._locListFunc = function(prefix . 'GetLocList')
                            
    1              0.000007     if exists('*' . prefix . 'IsAvailable')
    1              0.000007         let newObj._isAvailableFunc = function(prefix . 'IsAvailable')
    1              0.000001     else
                                    let newObj._isAvailableFunc = function('SyntasticCheckerIsAvailableDefault')
                                endif
                            
    1              0.000006     if exists('*' . prefix . 'GetHighlightRegex')
    1              0.000008         let newObj._highlightRegexFunc = function(prefix . 'GetHighlightRegex')
    1              0.000001     endif
                            
    1              0.000003     return newObj

FUNCTION  235()
Called 4 times
Total time:   0.000008
 Self time:   0.000008

count  total (s)   self (s)
    4              0.000008     return self._filetype

FUNCTION  236()
Called 4 times
Total time:   0.000007
 Self time:   0.000007

count  total (s)   self (s)
    4              0.000005     return self._name

FUNCTION  <SNR>51_record()
Called 3 times
Total time:   0.001013
 Self time:   0.000083

count  total (s)   self (s)
    3              0.000010 	if s:locked | retu | en
    3              0.000008 	let bufnr = a:bufnr + 0
    3              0.000008 	let bufname = bufname(bufnr)
    3              0.000008 	if bufnr > 0 && !empty(bufname)
    3              0.000014 		cal filter(s:mrbs, 'v:val != bufnr')
    3              0.000007 		cal insert(s:mrbs, bufnr)
    3   0.000947   0.000017 		cal s:addtomrufs(bufname)
    3              0.000002 	en

FUNCTION  <SNR>55_sub()
Called 9 times
Total time:   0.000235
 Self time:   0.000235

count  total (s)   self (s)
    9              0.000224   return substitute(a:str,'\v\C'.a:pat,a:rep,'')

FUNCTION  <SNR>121_isDebugEnabled_smart()
Called 51 times
Total time:   0.000134
 Self time:   0.000134

count  total (s)   self (s)
   51              0.000106     return and(g:syntastic_debug, a:level)

FUNCTION  fugitive#head()
Called 9 times
Total time:   0.002537
 Self time:   0.000192

count  total (s)   self (s)
    9              0.000034   if !exists('b:git_dir')
                                return ''
                              endif
                            
    9   0.002470   0.000125   return s:repo().head(a:0 ? a:1 : 0)

FUNCTION  vundle#begin()
Called 7 times
Total time:   0.005574
 Self time:   0.000086

count  total (s)   self (s)
    7              0.000025   let g:vundle_lazy_load = 1
    7   0.005540   0.000052   call call('vundle#rc', a:000)

FUNCTION  <SNR>122_DiagnosticUiSupportedForCurrentFiletype()
Called 245 times
Total time:   0.001382
 Self time:   0.001382

count  total (s)   self (s)
  245              0.001187   return get( s:diagnostic_ui_filetypes, &filetype, 0 )

FUNCTION  250()
Called 6 times
Total time:   0.000074
 Self time:   0.000025

count  total (s)   self (s)
    6   0.000073   0.000024     return syntastic#util#var('echo_current_error')

FUNCTION  251()
Called 3 times
Total time:   0.000081
 Self time:   0.000041

count  total (s)   self (s)
    3   0.000055   0.000015     if self.enabled() && !a:loclist.isEmpty()
                                    call syntastic#log#debug(g:SyntasticDebugNotifications, 'cursor: refresh')
                                    let b:syntastic_messages = copy(a:loclist.messages(bufnr('')))
                                    let b:oldLine = -1
                                    autocmd! syntastic CursorMoved
                                    autocmd syntastic CursorMoved * call SyntasticRefreshCursor()
                                endif

FUNCTION  252()
Called 3 times
Total time:   0.000052
 Self time:   0.000033

count  total (s)   self (s)
    3   0.000030   0.000011     call syntastic#log#debug(g:SyntasticDebugNotifications, 'cursor: reset')
    3              0.000011     autocmd! syntastic CursorMoved
    3              0.000004     unlet! b:syntastic_messages
    3              0.000005     let b:oldLine = -1

FUNCTION  254()
Called 6 times
Total time:   0.000075
 Self time:   0.000026

count  total (s)   self (s)
    6   0.000075   0.000026     return s:has_highlighting && syntastic#util#var('enable_highlighting')

FUNCTION  256()
Called 3 times
Total time:   0.000080
 Self time:   0.000031

count  total (s)   self (s)
    3              0.000005     if s:has_highlighting
    3   0.000033   0.000012         call syntastic#log#debug(g:SyntasticDebugNotifications, 'highlighting: reset')
    3   0.000037   0.000009         call self._reset()
    3              0.000002     endif

FUNCTION  258()
Called 6 times
Total time:   0.000054
 Self time:   0.000054

count  total (s)   self (s)
    6              0.000014     for match in getmatches()
                                    if stridx(match['group'], 'Syntastic') == 0
                                        call matchdelete(match['id'])
                                    endif
                                endfor

FUNCTION  259()
Called 3 times
Total time:   0.000093
 Self time:   0.000093

count  total (s)   self (s)
    3              0.000034     let newObj = copy(self)
                            
    3              0.000010     let llist = filter(copy(a:rawLoclist), 'v:val["valid"] == 1')
                            
    3              0.000004     for e in llist
                                    if get(e, 'type', '') == ''
                                        let e['type'] = 'E'
                                    endif
                                endfor
                            
    3              0.000007     let newObj._rawLoclist = llist
    3              0.000005     let newObj._name = ''
    3              0.000006     let newObj._owner = bufnr('')
                            
    3              0.000002     return newObj

FUNCTION  <SNR>110_check_in_path()
Called 9 times
Total time:   0.001758
 Self time:   0.001758

count  total (s)   self (s)
    9              0.000035   if !exists('b:airline_branch_path')
    9              0.000059     let root = get(b:, 'git_dir', get(b:, 'mercurial_dir', ''))
    9              0.000475     let bufferpath = resolve(fnamemodify(expand('%'), ':p'))
                            
    9              0.000055     if !filereadable(root) "not a file
                                  " if .git is a directory, it's the old submodule format
    9              0.000106       if match(root, '\.git$') >= 0
    9              0.000786         let root = expand(fnamemodify(root, ':h'))
    9              0.000011       else
                                    " else it's the newer format, and we need to guesstimate
                                    let pattern = '\.git\(\\\|\/\)modules\(\\\|\/\)'
                                    if match(root, pattern) >= 0
                                      let root = substitute(root, pattern, '', '')
                                    endif
                                endif
                            
    9              0.000060     let b:airline_file_in_root = stridx(bufferpath, root) > -1
    9              0.000006   endif
    9              0.000020   return b:airline_file_in_root

FUNCTION  <SNR>5_rtp_add_defaults()
Called 7 times
Total time:   0.000449
 Self time:   0.000449

count  total (s)   self (s)
    7              0.000022   let current = &rtp
    7              0.000023   set rtp&vim
    7              0.000014   let default = &rtp
    7              0.000022   let &rtp = current
    7              0.000048   let default_rtp_items = split(default, ',')
    7              0.000015   if !empty(default_rtp_items)
    7              0.000042     let first_item = fnameescape(default_rtp_items[0])
    7              0.000096     exec 'set rtp-=' . first_item
    7              0.000148     exec 'set rtp^=' . first_item
    7              0.000005   endif

FUNCTION  syntastic#util#unique()
Called 6 times
Total time:   0.000150
 Self time:   0.000150

count  total (s)   self (s)
    6              0.000014     let seen = {}
    6              0.000010     let uniques = []
   12              0.000018     for e in a:list
    6              0.000015         if !has_key(seen, e)
    6              0.000016             let seen[e] = 1
    6              0.000017             call add(uniques, e)
    6              0.000005         endif
    6              0.000005     endfor
    6              0.000007     return uniques

FUNCTION  260()
Called 389 times
Total time:   0.004324
 Self time:   0.004324

count  total (s)   self (s)
  389              0.002054     if !exists("b:syntastic_loclist") || empty(b:syntastic_loclist)
                                    let b:syntastic_loclist = g:SyntasticLoclist.New([])
                                endif
  389              0.000518     return b:syntastic_loclist

FUNCTION  263()
Called 12 times
Total time:   0.000029
 Self time:   0.000029

count  total (s)   self (s)
   12              0.000025     return empty(self._rawLoclist)

FUNCTION  264()
Called 3 times
Total time:   0.000107
 Self time:   0.000040

count  total (s)   self (s)
    3              0.000008     if !exists("self._stamp")
                                    let self._stamp = []
                                    return 0
                                endif
    3   0.000088   0.000021     return syntastic#util#compareLexi(self._stamp, a:stamp) > 0

FUNCTION  265()
Called 3 times
Total time:   0.000006
 Self time:   0.000006

count  total (s)   self (s)
    3              0.000006     return copy(self._rawLoclist)

FUNCTION  267()
Called 6 times
Total time:   0.000216
 Self time:   0.000066

count  total (s)   self (s)
    6   0.000211   0.000061     return syntastic#util#unique(map(copy(self._rawLoclist), 'str2nr(v:val["bufnr"])') + [self._owner])

FUNCTION  268()
Called 383 times
Total time:   0.024790
 Self time:   0.024790

count  total (s)   self (s)
  383              0.001290     if !exists("self._stl_format")
    3              0.000006         let self._stl_format = ''
    3              0.000002     endif
  383              0.000986     if !exists("self._stl_flag")
    3              0.000003         let self._stl_flag = ''
    3              0.000001     endif
                            
  383              0.000979     if g:syntastic_stl_format !=# self._stl_format
    3              0.000005         let self._stl_format = g:syntastic_stl_format
                            
    3              0.000006         if !empty(self._rawLoclist)
                                        let errors = self.errors()
                                        let warnings = self.warnings()
                            
                                        let num_errors = len(errors)
                                        let num_warnings = len(warnings)
                                        let num_issues = len(self._rawLoclist)
                            
                                        let output = self._stl_format
                            
                                        "hide stuff wrapped in %E(...) unless there are errors
                                        let output = substitute(output, '\m\C%E{\([^}]*\)}', num_errors ? '\1' : '' , 'g')
                            
                                        "hide stuff wrapped in %W(...) unless there are warnings
                                        let output = substitute(output, '\m\C%W{\([^}]*\)}', num_warnings ? '\1' : '' , 'g')
                            
                                        "hide stuff wrapped in %B(...) unless there are both errors and warnings
                                        let output = substitute(output, '\m\C%B{\([^}]*\)}', (num_warnings && num_errors) ? '\1' : '' , 'g')
                            
                                        "sub in the total errors/warnings/both
                                        let output = substitute(output, '\m\C%w', num_warnings, 'g')
                                        let output = substitute(output, '\m\C%e', num_errors, 'g')
                                        let output = substitute(output, '\m\C%t', num_issues, 'g')
                            
                                        "first error/warning line num
                                        let output = substitute(output, '\m\C%F', num_issues ? self._rawLoclist[0]['lnum'] : '', 'g')
                            
                                        "first error line num
                                        let output = substitute(output, '\m\C%fe', num_errors ? errors[0]['lnum'] : '', 'g')
                            
                                        "first warning line num
                                        let output = substitute(output, '\m\C%fw', num_warnings ? warnings[0]['lnum'] : '', 'g')
                            
                                        let self._stl_flag = output
                                    else
    3              0.000004             let self._stl_flag = ''
    3              0.000001         endif
    3              0.000002     endif
                            
  383              0.000491     return self._stl_flag

FUNCTION  <SNR>122_OnFileReadyToParse()
Called 245 times
Total time:   0.032460
 Self time:   0.024939

count  total (s)   self (s)
                              " We need to call this just in case there is no b:ycm_changetick; this can
                              " happen for special buffers.
  245   0.004104   0.001630   call s:SetUpYcmChangedTick()
                            
                              " Order is important here; we need to extract any done diagnostics before
                              " reparsing the file again. If we sent the new parse request first, then
                              " the response would always be pending when we called
                              " UpdateDiagnosticNotifications.
  245   0.006434   0.001387   call s:UpdateDiagnosticNotifications()
                            
  245              0.000963   let buffer_changed = b:changedtick != b:ycm_changedtick.file_ready_to_parse
  245              0.000367   if buffer_changed
    7              0.017517     py ycm_state.OnFileReadyToParse()
    7              0.000032   endif
  245              0.000760   let b:ycm_changedtick.file_ready_to_parse = b:changedtick

FUNCTION  airline#highlighter#get_highlight()
Called 192 times
Total time:   0.015960
 Self time:   0.005166

count  total (s)   self (s)
  192   0.005452   0.000861   let fg = s:get_syn(a:group, 'fg')
  192   0.005092   0.000788   let bg = s:get_syn(a:group, 'bg')
  192              0.002212   let reverse = has('gui_running') ? synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'gui') : synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'cterm')|| synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'term')
  192   0.003029   0.001130   return reverse ? s:get_array(bg, fg, a:000) : s:get_array(fg, bg, a:000)

FUNCTION  airline#extensions#syntastic#get_warnings()
Called 383 times
Total time:   0.037185
 Self time:   0.004410

count  total (s)   self (s)
  383   0.034537   0.001762   let errors = SyntasticStatuslineFlag()
  383              0.001078   if strlen(errors) > 0
                                return errors.(g:airline_symbols.space)
                              endif
  383              0.000290   return ''

FUNCTION  syntastic#util#var()
Called 30 times
Total time:   0.000270
 Self time:   0.000270

count  total (s)   self (s)
   30              0.000264     return exists('b:syntastic_' . a:name) ? b:syntastic_{a:name} : exists('g:syntastic_' . a:name) ? g:syntastic_{a:name} : a:0 > 0 ? a:1 : ''

FUNCTION  273()
Called 3 times
Total time:   0.000018
 Self time:   0.000018

count  total (s)   self (s)
    3              0.000017     let self._owner = type(a:buffer) == type(0) ? a:buffer : str2nr(a:buffer)

FUNCTION  274()
Called 3 times
Total time:   0.000248
 Self time:   0.000099

count  total (s)   self (s)
    3   0.000043   0.000025     call self.setOwner(bufnr(''))
    3   0.000036   0.000023     let self._stamp = syntastic#util#stamp()
    6   0.000136   0.000018     for buf in self.getBuffers()
    3              0.000016         call setbufvar(buf, 'syntastic_loclist', self)
    3              0.000004     endfor

FUNCTION  275()
Called 3 times
Total time:   0.000139
 Self time:   0.000041

count  total (s)   self (s)
    6   0.000111   0.000013     for buf in self.getBuffers()
    3              0.000013         call setbufvar(buf, 'syntastic_loclist', {})
    3              0.000001     endfor

FUNCTION  <SNR>122_SetUpCompleteopt()
Called 10 times
Total time:   0.000343
 Self time:   0.000343

count  total (s)   self (s)
                              " Some plugins (I'm looking at you, vim-notes) change completeopt by for
                              " instance adding 'longest'. This breaks YCM. So we force our settings.
                              " There's no two ways about this: if you want to use YCM then you have to
                              " have these completeopt settings, otherwise YCM won't work at all.
                            
                              " We need menuone in completeopt, otherwise when there's only one candidate
                              " for completion, the menu doesn't show up.
   10              0.000106   set completeopt-=menu
   10              0.000032   set completeopt+=menuone
                            
                              " This is unnecessary with our features. People use this option to insert
                              " the common prefix of all the matches and then add more differentiating chars
                              " so that they can select a more specific match. With our features, they
                              " don't need to insert the prefix; they just type the differentiating chars.
                              " Also, having this option set breaks the plugin.
   10              0.000029   set completeopt-=longest
                            
   10              0.000026   if g:ycm_add_preview_to_completeopt
                                set completeopt+=preview
                              endif

FUNCTION  airline#highlighter#highlight_modified_inactive()
Called 10 times
Total time:   0.001104
 Self time:   0.000547

count  total (s)   self (s)
   10              0.000090   if getbufvar(a:bufnr, '&modified')
    6              0.000095     let colors = exists('g:airline#themes#{g:airline_theme}#palette.inactive_modified.airline_c') ? g:airline#themes#{g:airline_theme}#palette.inactive_modified.airline_c : []
    6              0.000006   else
    4              0.000044     let colors = exists('g:airline#themes#{g:airline_theme}#palette.inactive.airline_c') ? g:airline#themes#{g:airline_theme}#palette.inactive.airline_c : []
    4              0.000002   endif
                            
   10              0.000025   if !empty(colors)
   10   0.000698   0.000141     call airline#highlighter#exec('airline_c'.(a:bufnr).'_inactive', colors)
   10              0.000010   endif

FUNCTION  244()
Called 3 times
Total time:   0.001172
 Self time:   0.000042

count  total (s)   self (s)
    3              0.000008     if !has_key(self, '_available')
    1   0.001145   0.000015         let self._available = self._isAvailableFunc()
    1              0.000003     endif
    3              0.000004     return self._available

FUNCTION  airline#extensions#branch#get_head()
Called 383 times
Total time:   0.018065
 Self time:   0.009963

count  total (s)   self (s)
  383   0.009959   0.001857   let head = airline#extensions#branch#head()
  383              0.002381   let empty_message = get(g:, 'airline#extensions#branch#empty_message', get(g:, 'airline_branch_empty_message', ''))
  383              0.001888   let symbol = get(g:, 'airline#extensions#branch#symbol', g:airline_symbols.branch)
  383              0.003249   return empty(head) ? empty_message : printf('%s%s', empty(symbol) ? '' : symbol.(g:airline_symbols.space), head)

FUNCTION  286()
Called 3 times
Total time:   0.000092
 Self time:   0.000058

count  total (s)   self (s)
    3              0.000016     let fts = split(a:filetype, '\m\.')
                            
    3   0.000025   0.000017     if self.isPassive()
                                    return self._isOneFiletypeActive(fts)
                                else
    3   0.000037   0.000011         return self._noFiletypesArePassive(fts)
                                endif

FUNCTION  287()
Called 3 times
Total time:   0.000008
 Self time:   0.000008

count  total (s)   self (s)
    3              0.000007     return self._mode ==# 'passive'

FUNCTION  <SNR>122_InsideCommentOrString()
Called 45 times
Total time:   0.018823
 Self time:   0.018823

count  total (s)   self (s)
                              " Has to be col('.') -1 because col('.') doesn't exist at this point. We are
                              " in insert mode when this func is called.
   45              0.017876   let syntax_group = synIDattr( synIDtrans( synID( line( '.' ), col( '.' ) - 1, 1 ) ), 'name')
                            
   45              0.000289   if stridx(syntax_group, 'Comment') > -1
                                return 1
                              endif
                            
   45              0.000144   if stridx(syntax_group, 'String') > -1
                                return 2
                              endif
                            
   45              0.000056   return 0

FUNCTION  vundle#config#activate_bundles()
Called 7 times
Total time:   0.004438
 Self time:   0.000132

count  total (s)   self (s)
    7   0.003938   0.000081   call s:rtp_add_a()
    7   0.000496   0.000047   call s:rtp_add_defaults()

FUNCTION  delimitMate#BS()
Called 1 time
Total time:   0.001074
 Self time:   0.000092

count  total (s)   self (s)
    1   0.000532   0.000018 	if delimitMate#IsForbidden("")
                            		let extra = ''
                            	elseif &bs !~ 'start\|2'
                            		let extra = ''
                            	elseif delimitMate#WithinEmptyPair()
                            		let extra = "\<Del>"
                            	elseif delimitMate#IsSpaceExpansion()
                            		let extra = "\<Del>"
                            	elseif delimitMate#IsCRExpansion()
                            		let extra = repeat("\<Del>", len(matchstr(getline(line('.') + 1), '^\s*\S')))
                            	else
    1              0.000002 		let extra = ''
    1              0.000001 	endif
    1              0.000004 	return "\<BS>" . extra

FUNCTION  <SNR>76_UpdateErrors()
Called 3 times
Total time:   0.015911
 Self time:   0.000257

count  total (s)   self (s)
    3   0.000194   0.000014     if s:skipFile()
                                    return
                                endif
                            
    3   0.000064   0.000014     call s:modemap.synch()
    3   0.000116   0.000024     let run_checks = !a:auto_invoked || s:modemap.allowsAutoChecking(&filetype)
    3              0.000003     if run_checks
    3   0.013389   0.000024         call s:CacheErrors(a:000)
    3              0.000002     endif
                            
    3   0.000047   0.000015     let loclist = g:SyntasticLoclist.current()
                            
                                " populate loclist and jump {{{3
    3   0.000047   0.000015     let do_jump = syntastic#util#var('auto_jump')
    3              0.000004     if do_jump == 2
                                    let first = loclist.getFirstIssue()
                                    let type = get(first, 'type', '')
                                    let do_jump = type ==? 'E'
                                endif
                            
    3              0.000007     let w:syntastic_loclist_set = 0
    3   0.000045   0.000014     if syntastic#util#var('always_populate_loc_list') || do_jump
                                    call syntastic#log#debug(g:SyntasticDebugNotifications, 'loclist: setloclist (new)')
                                    call setloclist(0, loclist.getRaw())
                                    let w:syntastic_loclist_set = 1
                                    if run_checks && do_jump && !loclist.isEmpty()
                                        call syntastic#log#debug(g:SyntasticDebugNotifications, 'loclist: jump')
                                        silent! lrewind
                            
                                        " XXX: Vim doesn't call autocmd commands in a predictible
                                        " order, which can lead to missing filetype when jumping
                                        " to a new file; the following is a workaround for the
                                        " resulting brain damage
                                        if &filetype == ''
                                            silent! filetype detect
                                        endif
                                    endif
                                endif
                                " }}}3
                            
    3   0.001888   0.000016     call s:notifiers.refresh(loclist)

FUNCTION  292()
Called 3 times
Total time:   0.000026
 Self time:   0.000026

count  total (s)   self (s)
    3              0.000026     return empty(filter(copy(a:filetypes), 'index(self._passiveFiletypes, v:val) != -1'))

FUNCTION  294()
Called 3 times
Total time:   0.001872
 Self time:   0.000717

count  total (s)   self (s)
    3   0.000026   0.000018     if !a:loclist.isEmpty() && !a:loclist.isNewerThan([])
                                    " loclist not fully constructed yet
                                    return
                                endif
                            
    3   0.000041   0.000016     call syntastic#log#debug(g:SyntasticDebugNotifications, 'notifiers: refresh')
   18              0.000024     for type in self._enabled_types
   15              0.000136         let class = substitute(type, '\m.*', 'Syntastic\u&Notifier', '')
   15   0.000266   0.000120         if !has_key(g:{class}, 'enabled') || self._notifier[type].enabled()
   12              0.000038             if index(s:persistent_notifiers, type) > -1
                                            " refresh only if loclist has changed since last call
    3              0.000014                 if !exists('b:syntastic_' . type . '_stamp')
                                                let b:syntastic_{type}_stamp = []
                                            endif
    3   0.000127   0.000020                 if a:loclist.isNewerThan(b:syntastic_{type}_stamp)
    3   0.000399   0.000017                     call self._notifier[type].refresh(a:loclist)
    3   0.000026   0.000017                     let b:syntastic_{type}_stamp = syntastic#util#stamp()
    3              0.000002                 endif
    3              0.000003             else
    9   0.000520   0.000042                 call self._notifier[type].refresh(a:loclist)
    9              0.000005             endif
   12              0.000004         endif
   15              0.000009     endfor

FUNCTION  295()
Called 3 times
Total time:   0.000614
 Self time:   0.000428

count  total (s)   self (s)
    3   0.000038   0.000015     call syntastic#log#debug(g:SyntasticDebugNotifications, 'notifiers: reset')
   18              0.000019     for type in self._enabled_types
   15              0.000118         let class = substitute(type, '\m.*', 'Syntastic\u&Notifier', '')
                            
                                    " reset notifiers regardless if they are enabled or not, since
                                    " the user might have disabled them since the last refresh();
                                    " notifiers MUST be prepared to deal with reset() when disabled
   15              0.000056         if has_key(g:{class}, 'reset')
    9   0.000206   0.000043             call self._notifier[type].reset(a:loclist)
    9              0.000003         endif
                            
                                    " also reset stamps
   15              0.000037         if index(s:persistent_notifiers, type) > -1
    6              0.000022             let b:syntastic_{type}_stamp = []
    6              0.000003         endif
   15              0.000009     endfor

FUNCTION  297()
Called 1 time
Total time:   0.000017
 Self time:   0.000017

count  total (s)   self (s)
    1              0.000006     if !exists('s:SyntasticRegistryInstance')
                                    let s:SyntasticRegistryInstance = copy(self)
                                    let s:SyntasticRegistryInstance._checkerMap = {}
                                endif
                            
    1              0.000003     return s:SyntasticRegistryInstance

FUNCTION  298()
Called 1 time
Total time:   0.000231
 Self time:   0.000039

count  total (s)   self (s)
    1   0.000142   0.000017     let checker = g:SyntasticChecker.New(a:args)
    1   0.000028   0.000011     let registry = g:SyntasticRegistry.Instance()
    1   0.000060   0.000010     call registry._registerChecker(checker)

FUNCTION  299()
Called 3 times
Total time:   0.009861
 Self time:   0.000158

count  total (s)   self (s)
    3   0.000060   0.000020     let ft = s:normaliseFiletype(a:ftalias)
    3   0.009597   0.000014     call self._loadCheckersFor(ft)
                            
    3              0.000009     let checkers_map = self._checkerMap[ft]
    3              0.000007     if empty(checkers_map)
                                    return []
                                endif
                            
    3   0.000057   0.000016     call self._checkDeprecation(ft)
                            
    3              0.000042     let names = !empty(a:hints_list) ? syntastic#util#unique(a:hints_list) : exists('b:syntastic_checkers') ? b:syntastic_checkers : exists('g:syntastic_' . ft . '_checkers') ? g:syntastic_{ft}_checkers : get(s:defaultCheckers, ft, 0)
                            
    3   0.000069   0.000030     return type(names) == type([]) ? self._filterCheckersByName(checkers_map, names) : [checkers_map[keys(checkers_map)[0]]]

FUNCTION  SyntasticStatuslineFlag()
Called 383 times
Total time:   0.032775
 Self time:   0.003719

count  total (s)   self (s)
  383   0.032506   0.003450     return g:SyntasticLoclist.current().getStatuslineFlag()

FUNCTION  <SNR>65_g()
Called 6 times
Total time:   0.000181
 Self time:   0.000181

count  total (s)   self (s)
    6              0.000022 	let scope = a:0 ? a:1 : 's'
    6              0.000015 	if scope == 's'
    6              0.000024 		let bufnr = bufnr('%')
    6              0.000030 		let name = 'options.' . bufnr . '.' . a:name
    6              0.000008 	else
                            		let name = 'delimitMate_' . a:name
                            	endif
    6              0.000048 	return deepcopy(eval(scope . ':' . name))

FUNCTION  delimitMate#GetCharFromCursor()
Called 6 times
Total time:   0.000191
 Self time:   0.000191

count  total (s)   self (s)
    6              0.000022 	let idx = col('.') - 1
    6              0.000015 	if !a:0 || (a:0 && a:1 >= 0)
                            		" Get char from cursor.
    3              0.000011 		let line = getline('.')[idx :]
    3              0.000006 		let pos = a:0 ? a:1 : 0
    3              0.000027 		return matchstr(line, '^'.repeat('.', pos).'\zs.')
                            	endif
                            	" Get char behind cursor.
    3              0.000015 	let line = getline('.')[: idx - 1]
    3              0.000008 	let pos = 0 - (1 + a:1)
    3              0.000040 	return matchstr(line, '.\ze'.repeat('.', pos).'$')

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
   90   0.290415   0.020889  youcompleteme#Complete()
   45   0.269526             <SNR>122_GetCompletions()
  383   0.093728   0.031609  airline#check_mode()
  299   0.061590             UltiSnips#CursorMoved()
   10   0.061015   0.020520  airline#highlighter#highlight()
   66   0.053739   0.007697  <SNR>122_OnCursorMovedInsertMode()
  233   0.050420   0.018421  <SNR>122_OnCursorMovedNormalMode()
  273   0.047158   0.006791  vundle#config#bundle()
  383   0.037185   0.004410  airline#extensions#syntastic#get_warnings()
  273   0.037016   0.012116  vundle#config#init_bundle()
  369   0.033987             <SNR>88_Highlight_Matching_Pair()
  383   0.032775   0.003719  SyntasticStatuslineFlag()
  245   0.032460   0.024939  <SNR>122_OnFileReadyToParse()
   45   0.028106   0.002763  <SNR>122_InvokeCompletion()
  383   0.024790             268()
   96   0.023430   0.002999  <SNR>114_exec_separator()
  383   0.022415   0.017411  airline#extensions#whitespace#check()
  586   0.020731             airline#highlighter#exec()
   45   0.019918   0.001095  <SNR>122_InsideCommentOrStringAndShouldStop()
   45   0.018823             <SNR>122_InsideCommentOrString()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
   45              0.269526  <SNR>122_GetCompletions()
  299              0.061590  UltiSnips#CursorMoved()
  369              0.033987  <SNR>88_Highlight_Matching_Pair()
  383   0.093728   0.031609  airline#check_mode()
  245   0.032460   0.024939  <SNR>122_OnFileReadyToParse()
  383              0.024790  268()
   90   0.290415   0.020889  youcompleteme#Complete()
  586              0.020731  airline#highlighter#exec()
   10   0.061015   0.020520  airline#highlighter#highlight()
   45              0.018823  <SNR>122_InsideCommentOrString()
  233   0.050420   0.018421  <SNR>122_OnCursorMovedNormalMode()
  383   0.022415   0.017411  airline#extensions#whitespace#check()
  273              0.016370  <SNR>5_parse_name()
  273   0.037016   0.012116  vundle#config#init_bundle()
 2298              0.012081  airline#util#wrap()
   45              0.011128  <SNR>122_IdentifierFinishedOperations()
  313              0.010692  <SNR>122_AllowedToCompleteInCurrentFile()
  383   0.018065   0.009963  airline#extensions#branch#get_head()
  766              0.009473  airline#util#append()
  384              0.008895  <SNR>114_get_syn()

